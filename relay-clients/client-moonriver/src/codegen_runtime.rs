// Copyright (C) Parity Technologies (UK) Ltd.
// This file is part of Parity Bridges Common.

// Parity Bridges Common is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Parity Bridges Common is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Parity Bridges Common.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated runtime API
//! THIS FILE WAS AUTOGENERATED USING parity-bridges-common::runtime-codegen
//! EXECUTED COMMAND: target/debug/runtime-codegen --from-node-url ws://127.0.0.1:8801

#[allow(dead_code, unused_imports, non_camel_case_types, unreachable_patterns)]
#[allow(clippy::all)]
#[allow(rustdoc::broken_intra_doc_links)]
pub mod api {
	#[allow(unused_imports)]
	mod root_mod {
		pub use super::*;
	}
	pub mod runtime_types {
		use super::runtime_types;
		pub mod account {
			use super::runtime_types;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct EthereumSignature(pub [::core::primitive::u8; 65usize]);
		}
		pub mod bounded_collections {
			use super::runtime_types;
			pub mod bounded_btree_set {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct BoundedBTreeSet<_0>(pub ::subxt::ext::subxt_core::alloc::vec::Vec<_0>);
			}
			pub mod bounded_vec {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct BoundedVec<_0>(pub ::subxt::ext::subxt_core::alloc::vec::Vec<_0>);
			}
			pub mod weak_bounded_vec {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct WeakBoundedVec<_0>(pub ::subxt::ext::subxt_core::alloc::vec::Vec<_0>);
			}
		}
		pub mod bp_header_chain {
			use super::runtime_types;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct AuthoritySet {
				pub authorities: ::subxt::ext::subxt_core::alloc::vec::Vec<(
					runtime_types::sp_consensus_grandpa::app::Public,
					::core::primitive::u64,
				)>,
				pub set_id: ::core::primitive::u64,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum HeaderChainError {
				#[codec(index = 0)]
				UnknownHeader,
				#[codec(index = 1)]
				StorageProof(runtime_types::bp_runtime::storage_proof::StorageProofError),
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct HeaderFinalityInfo<_0, _1> {
				pub finality_proof: _0,
				pub new_verification_context: ::core::option::Option<_1>,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct StoredHeaderData<_0, _1> {
				pub number: _0,
				pub state_root: _1,
			}
		}
		pub mod bp_messages {
			use super::runtime_types;
			pub mod lane {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum LaneState {
					#[codec(index = 0)]
					Opened,
					#[codec(index = 1)]
					Closed,
				}
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct DeliveredMessages {
				pub begin: ::core::primitive::u64,
				pub end: ::core::primitive::u64,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct InboundLaneData<_0> {
				pub relayers: ::subxt::ext::subxt_core::alloc::vec::Vec<
					runtime_types::bp_messages::UnrewardedRelayer<_0>,
				>,
				pub last_confirmed_nonce: ::core::primitive::u64,
				pub state: runtime_types::bp_messages::lane::LaneState,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct InboundMessageDetails {
				pub dispatch_weight: ::sp_weights::Weight,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct MessageKey<_0> {
				pub lane_id: _0,
				pub nonce: ::core::primitive::u64,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum MessagesOperatingMode {
				#[codec(index = 0)]
				Basic(runtime_types::bp_runtime::BasicOperatingMode),
				#[codec(index = 1)]
				RejectingOutboundMessages,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct OutboundLaneData {
				pub oldest_unpruned_nonce: ::core::primitive::u64,
				pub latest_received_nonce: ::core::primitive::u64,
				pub latest_generated_nonce: ::core::primitive::u64,
				pub state: runtime_types::bp_messages::lane::LaneState,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct OutboundMessageDetails {
				pub nonce: ::core::primitive::u64,
				pub dispatch_weight: ::sp_weights::Weight,
				pub size: ::core::primitive::u32,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct ReceivedMessages<_0, _1> {
				pub lane: _1,
				pub receive_results: ::subxt::ext::subxt_core::alloc::vec::Vec<(
					::core::primitive::u64,
					runtime_types::bp_messages::ReceptionResult<_0>,
				)>,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum ReceptionResult<_0> {
				#[codec(index = 0)]
				Dispatched(runtime_types::bp_runtime::messages::MessageDispatchResult<_0>),
				#[codec(index = 1)]
				InvalidNonce,
				#[codec(index = 2)]
				TooManyUnrewardedRelayers,
				#[codec(index = 3)]
				TooManyUnconfirmedMessages,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct UnrewardedRelayer<_0> {
				pub relayer: _0,
				pub messages: runtime_types::bp_messages::DeliveredMessages,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum VerificationError {
				#[codec(index = 0)]
				EmptyMessageProof,
				#[codec(index = 1)]
				HeaderChain(runtime_types::bp_header_chain::HeaderChainError),
				#[codec(index = 2)]
				InboundLaneStorage(runtime_types::bp_runtime::storage_proof::StorageProofError),
				#[codec(index = 3)]
				InvalidMessageWeight,
				#[codec(index = 4)]
				MessagesCountMismatch,
				#[codec(index = 5)]
				MessageStorage(runtime_types::bp_runtime::storage_proof::StorageProofError),
				#[codec(index = 6)]
				MessageTooLarge,
				#[codec(index = 7)]
				OutboundLaneStorage(runtime_types::bp_runtime::storage_proof::StorageProofError),
				#[codec(index = 8)]
				StorageProof(runtime_types::bp_runtime::storage_proof::StorageProofError),
				#[codec(index = 9)]
				Other,
			}
		}
		pub mod bp_parachains {
			use super::runtime_types;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct BestParaHeadHash {
				pub at_relay_block_number: ::core::primitive::u32,
				pub head_hash: ::subxt::ext::subxt_core::utils::H256,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct ParaInfo {
				pub best_head_hash: runtime_types::bp_parachains::BestParaHeadHash,
				pub next_imported_hash_position: ::core::primitive::u32,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct ParaStoredHeaderData(
				pub ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
			);
		}
		pub mod bp_runtime {
			use super::runtime_types;
			pub mod messages {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct MessageDispatchResult<_0> {
					pub unspent_weight: ::sp_weights::Weight,
					pub dispatch_level_result: _0,
				}
			}
			pub mod storage_proof {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum StorageProofError {
					#[codec(index = 0)]
					UnableToGenerateTrieProof,
					#[codec(index = 1)]
					InvalidProof,
					#[codec(index = 2)]
					UnsortedEntries,
					#[codec(index = 3)]
					UnavailableKey,
					#[codec(index = 4)]
					EmptyVal,
					#[codec(index = 5)]
					DecodeError,
					#[codec(index = 6)]
					UnusedKey,
					#[codec(index = 7)]
					StorageRootMismatch,
					#[codec(index = 8)]
					StorageValueUnavailable,
					#[codec(index = 9)]
					DuplicateNodes,
				}
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum BasicOperatingMode {
				#[codec(index = 0)]
				Normal,
				#[codec(index = 1)]
				Halted,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct HeaderId<_0, _1>(pub _1, pub _0);
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum OwnedBridgeModuleError {
				#[codec(index = 0)]
				Halted,
			}
		}
		pub mod bp_xcm_bridge {
			use super::runtime_types;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct Bridge {
				pub bridge_origin_relative_location: ::subxt::ext::subxt_core::alloc::boxed::Box<
					runtime_types::xcm::VersionedLocation,
				>,
				pub bridge_origin_universal_location: ::subxt::ext::subxt_core::alloc::boxed::Box<
					runtime_types::xcm::VersionedInteriorLocation,
				>,
				pub bridge_destination_universal_location:
					::subxt::ext::subxt_core::alloc::boxed::Box<
						runtime_types::xcm::VersionedInteriorLocation,
					>,
				pub state: runtime_types::bp_xcm_bridge::BridgeState,
				pub deposit: ::core::option::Option<
					runtime_types::bp_xcm_bridge::Deposit<
						::bp_moonbeam::AccountId,
						::core::primitive::u128,
					>,
				>,
				pub lane_id: ::bp_messages::LegacyLaneId,
				pub maybe_notify: ::core::option::Option<runtime_types::bp_xcm_bridge::Receiver>,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct BridgeId(pub ::subxt::ext::subxt_core::utils::H256);
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum BridgeLocationsError {
				#[codec(index = 0)]
				NonUniversalLocation,
				#[codec(index = 1)]
				InvalidBridgeOrigin,
				#[codec(index = 2)]
				InvalidBridgeDestination,
				#[codec(index = 3)]
				DestinationIsLocal,
				#[codec(index = 4)]
				UnreachableDestination,
				#[codec(index = 5)]
				UnsupportedDestinationLocation,
				#[codec(index = 6)]
				UnsupportedXcmVersion,
				#[codec(index = 7)]
				UnsupportedLaneIdType,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum BridgeState {
				#[codec(index = 0)]
				Opened,
				#[codec(index = 1)]
				SoftSuspended,
				#[codec(index = 2)]
				HardSuspended,
				#[codec(index = 3)]
				Closed,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct Deposit<_0, _1> {
				pub account: _0,
				pub amount: _1,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct Receiver {
				pub pallet_index: ::core::primitive::u8,
				pub call_index: ::core::primitive::u8,
			}
		}
		pub mod bp_xcm_bridge_router {
			use super::runtime_types;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct BridgeState {
				pub delivery_fee_factor: runtime_types::sp_arithmetic::fixed_point::FixedU128,
				pub is_congested: ::core::primitive::bool,
			}
		}
		pub mod cumulus_pallet_parachain_system {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
                    set_validation_data {
                        data: runtime_types::cumulus_primitives_parachain_inherent::ParachainInherentData,
                    },
                    #[codec(index = 1)]
                    sudo_send_upward_message {
                        message: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            ::core::primitive::u8,
                        >,
                    },
                }
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					OverlappingUpgrades,
					#[codec(index = 1)]
					ProhibitedByPolkadot,
					#[codec(index = 2)]
					TooBig,
					#[codec(index = 3)]
					ValidationDataNotAvailable,
					#[codec(index = 4)]
					HostConfigurationNotAvailable,
					#[codec(index = 5)]
					NotScheduled,
					#[codec(index = 6)]
					NothingAuthorized,
					#[codec(index = 7)]
					Unauthorized,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					ValidationFunctionStored,
					#[codec(index = 1)]
					ValidationFunctionApplied { relay_chain_block_num: ::core::primitive::u32 },
					#[codec(index = 2)]
					ValidationFunctionDiscarded,
					#[codec(index = 3)]
					DownwardMessagesReceived { count: ::core::primitive::u32 },
					#[codec(index = 4)]
					DownwardMessagesProcessed {
						weight_used: ::sp_weights::Weight,
						dmq_head: ::subxt::ext::subxt_core::utils::H256,
					},
					#[codec(index = 5)]
					UpwardMessageSent {
						message_hash: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
				}
			}
			pub mod relay_state_snapshot {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct MessagingStateSnapshot {
                    pub dmq_mqc_head: ::subxt::ext::subxt_core::utils::H256,
                    pub relay_dispatch_queue_remaining_capacity: runtime_types::cumulus_pallet_parachain_system::relay_state_snapshot::RelayDispatchQueueRemainingCapacity,
                    pub ingress_channels: ::subxt::ext::subxt_core::alloc::vec::Vec<
                        (
                            runtime_types::polkadot_parachain_primitives::primitives::Id,
                            runtime_types::polkadot_primitives::v8::AbridgedHrmpChannel,
                        ),
                    >,
                    pub egress_channels: ::subxt::ext::subxt_core::alloc::vec::Vec<
                        (
                            runtime_types::polkadot_parachain_primitives::primitives::Id,
                            runtime_types::polkadot_primitives::v8::AbridgedHrmpChannel,
                        ),
                    >,
                }
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct RelayDispatchQueueRemainingCapacity {
					pub remaining_count: ::core::primitive::u32,
					pub remaining_size: ::core::primitive::u32,
				}
			}
			pub mod unincluded_segment {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Ancestor<_0> {
                    pub used_bandwidth: runtime_types::cumulus_pallet_parachain_system::unincluded_segment::UsedBandwidth,
                    pub para_head_hash: ::core::option::Option<_0>,
                    pub consumed_go_ahead_signal: ::core::option::Option<
                        runtime_types::polkadot_primitives::v8::UpgradeGoAhead,
                    >,
                }
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct HrmpChannelUpdate {
					pub msg_count: ::core::primitive::u32,
					pub total_bytes: ::core::primitive::u32,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct SegmentTracker<_0> {
                    pub used_bandwidth: runtime_types::cumulus_pallet_parachain_system::unincluded_segment::UsedBandwidth,
                    pub hrmp_watermark: ::core::option::Option<::core::primitive::u32>,
                    pub consumed_go_ahead_signal: ::core::option::Option<
                        runtime_types::polkadot_primitives::v8::UpgradeGoAhead,
                    >,
                    #[codec(skip)]
                    pub __ignore: ::core::marker::PhantomData<_0>,
                }
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct UsedBandwidth {
                    pub ump_msg_count: ::core::primitive::u32,
                    pub ump_total_bytes: ::core::primitive::u32,
                    pub hrmp_outgoing: ::subxt::ext::subxt_core::utils::KeyedVec<
                        runtime_types::polkadot_parachain_primitives::primitives::Id,
                        runtime_types::cumulus_pallet_parachain_system::unincluded_segment::HrmpChannelUpdate,
                    >,
                }
			}
		}
		pub mod cumulus_pallet_xcm {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					InvalidFormat([::core::primitive::u8; 32usize]),
					#[codec(index = 1)]
					UnsupportedVersion([::core::primitive::u8; 32usize]),
					#[codec(index = 2)]
					ExecutedDownward(
						[::core::primitive::u8; 32usize],
						runtime_types::staging_xcm::v4::traits::Outcome,
					),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Origin {
					#[codec(index = 0)]
					Relay,
					#[codec(index = 1)]
					SiblingParachain(runtime_types::polkadot_parachain_primitives::primitives::Id),
				}
			}
		}
		pub mod cumulus_pallet_xcmp_queue {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					BadQueueConfig,
					#[codec(index = 1)]
					AlreadySuspended,
					#[codec(index = 2)]
					AlreadyResumed,
					#[codec(index = 3)]
					TooManyActiveOutboundChannels,
					#[codec(index = 4)]
					TooBig,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					XcmpMessageSent { message_hash: [::core::primitive::u8; 32usize] },
				}
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct OutboundChannelDetails {
				pub recipient: runtime_types::polkadot_parachain_primitives::primitives::Id,
				pub state: runtime_types::cumulus_pallet_xcmp_queue::OutboundState,
				pub signals_exist: ::core::primitive::bool,
				pub first_index: ::core::primitive::u16,
				pub last_index: ::core::primitive::u16,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum OutboundState {
				#[codec(index = 0)]
				Ok,
				#[codec(index = 1)]
				Suspended,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct QueueConfigData {
				pub suspend_threshold: ::core::primitive::u32,
				pub drop_threshold: ::core::primitive::u32,
				pub resume_threshold: ::core::primitive::u32,
			}
		}
		pub mod cumulus_primitives_core {
			use super::runtime_types;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum AggregateMessageOrigin {
				#[codec(index = 0)]
				Here,
				#[codec(index = 1)]
				Parent,
				#[codec(index = 2)]
				Sibling(runtime_types::polkadot_parachain_primitives::primitives::Id),
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct CollationInfo {
				pub upward_messages: ::subxt::ext::subxt_core::alloc::vec::Vec<
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
				>,
				pub horizontal_messages: ::subxt::ext::subxt_core::alloc::vec::Vec<
					runtime_types::polkadot_core_primitives::OutboundHrmpMessage<
						runtime_types::polkadot_parachain_primitives::primitives::Id,
					>,
				>,
				pub new_validation_code: ::core::option::Option<
					runtime_types::polkadot_parachain_primitives::primitives::ValidationCode,
				>,
				pub processed_downward_messages: ::core::primitive::u32,
				pub hrmp_watermark: ::core::primitive::u32,
				pub head_data: runtime_types::polkadot_parachain_primitives::primitives::HeadData,
			}
		}
		pub mod cumulus_primitives_parachain_inherent {
			use super::runtime_types;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct MessageQueueChain(pub ::subxt::ext::subxt_core::utils::H256);
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct ParachainInherentData {
				pub validation_data:
					runtime_types::polkadot_primitives::v8::PersistedValidationData<
						::subxt::ext::subxt_core::utils::H256,
						::core::primitive::u32,
					>,
				pub relay_chain_state: runtime_types::sp_trie::storage_proof::StorageProof,
				pub downward_messages: ::subxt::ext::subxt_core::alloc::vec::Vec<
					runtime_types::polkadot_core_primitives::InboundDownwardMessage<
						::core::primitive::u32,
					>,
				>,
				pub horizontal_messages: ::subxt::ext::subxt_core::utils::KeyedVec<
					runtime_types::polkadot_parachain_primitives::primitives::Id,
					::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::polkadot_core_primitives::InboundHrmpMessage<
							::core::primitive::u32,
						>,
					>,
				>,
			}
		}
		pub mod cumulus_primitives_storage_weight_reclaim {
			use super::runtime_types;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct StorageWeightReclaim;
		}
		pub mod ethbloom {
			use super::runtime_types;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct Bloom(pub [::core::primitive::u8; 256usize]);
		}
		pub mod ethereum {
			use super::runtime_types;
			pub mod block {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Block<_0> {
					pub header: runtime_types::ethereum::header::Header,
					pub transactions: ::subxt::ext::subxt_core::alloc::vec::Vec<_0>,
					pub ommers: ::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::ethereum::header::Header,
					>,
				}
			}
			pub mod header {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Header {
					pub parent_hash: ::subxt::ext::subxt_core::utils::H256,
					pub ommers_hash: ::subxt::ext::subxt_core::utils::H256,
					pub beneficiary: ::subxt::ext::subxt_core::utils::H160,
					pub state_root: ::subxt::ext::subxt_core::utils::H256,
					pub transactions_root: ::subxt::ext::subxt_core::utils::H256,
					pub receipts_root: ::subxt::ext::subxt_core::utils::H256,
					pub logs_bloom: runtime_types::ethbloom::Bloom,
					pub difficulty: runtime_types::primitive_types::U256,
					pub number: runtime_types::primitive_types::U256,
					pub gas_limit: runtime_types::primitive_types::U256,
					pub gas_used: runtime_types::primitive_types::U256,
					pub timestamp: ::core::primitive::u64,
					pub extra_data:
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					pub mix_hash: ::subxt::ext::subxt_core::utils::H256,
					pub nonce: runtime_types::ethereum_types::hash::H64,
				}
			}
			pub mod log {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Log {
					pub address: ::subxt::ext::subxt_core::utils::H160,
					pub topics: ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::H256,
					>,
					pub data: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
				}
			}
			pub mod receipt {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct EIP658ReceiptData {
					pub status_code: ::core::primitive::u8,
					pub used_gas: runtime_types::primitive_types::U256,
					pub logs_bloom: runtime_types::ethbloom::Bloom,
					pub logs: ::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::ethereum::log::Log,
					>,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum ReceiptV3 {
					#[codec(index = 0)]
					Legacy(runtime_types::ethereum::receipt::EIP658ReceiptData),
					#[codec(index = 1)]
					EIP2930(runtime_types::ethereum::receipt::EIP658ReceiptData),
					#[codec(index = 2)]
					EIP1559(runtime_types::ethereum::receipt::EIP658ReceiptData),
				}
			}
			pub mod transaction {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct AccessListItem {
					pub address: ::subxt::ext::subxt_core::utils::H160,
					pub storage_keys: ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::utils::H256,
					>,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct EIP1559Transaction {
					pub chain_id: ::core::primitive::u64,
					pub nonce: runtime_types::primitive_types::U256,
					pub max_priority_fee_per_gas: runtime_types::primitive_types::U256,
					pub max_fee_per_gas: runtime_types::primitive_types::U256,
					pub gas_limit: runtime_types::primitive_types::U256,
					pub action: runtime_types::ethereum::transaction::TransactionAction,
					pub value: runtime_types::primitive_types::U256,
					pub input: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					pub access_list: ::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::ethereum::transaction::AccessListItem,
					>,
					pub odd_y_parity: ::core::primitive::bool,
					pub r: ::subxt::ext::subxt_core::utils::H256,
					pub s: ::subxt::ext::subxt_core::utils::H256,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct EIP2930Transaction {
					pub chain_id: ::core::primitive::u64,
					pub nonce: runtime_types::primitive_types::U256,
					pub gas_price: runtime_types::primitive_types::U256,
					pub gas_limit: runtime_types::primitive_types::U256,
					pub action: runtime_types::ethereum::transaction::TransactionAction,
					pub value: runtime_types::primitive_types::U256,
					pub input: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					pub access_list: ::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::ethereum::transaction::AccessListItem,
					>,
					pub odd_y_parity: ::core::primitive::bool,
					pub r: ::subxt::ext::subxt_core::utils::H256,
					pub s: ::subxt::ext::subxt_core::utils::H256,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct LegacyTransaction {
					pub nonce: runtime_types::primitive_types::U256,
					pub gas_price: runtime_types::primitive_types::U256,
					pub gas_limit: runtime_types::primitive_types::U256,
					pub action: runtime_types::ethereum::transaction::TransactionAction,
					pub value: runtime_types::primitive_types::U256,
					pub input: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					pub signature: runtime_types::ethereum::transaction::TransactionSignature,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum TransactionAction {
					#[codec(index = 0)]
					Call(::subxt::ext::subxt_core::utils::H160),
					#[codec(index = 1)]
					Create,
				}
				#[derive(
					::codec::Decode,
					::codec::Encode,
					::subxt::ext::subxt_core::ext::codec::CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct TransactionRecoveryId(pub ::core::primitive::u64);
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct TransactionSignature {
					pub v: runtime_types::ethereum::transaction::TransactionRecoveryId,
					pub r: ::subxt::ext::subxt_core::utils::H256,
					pub s: ::subxt::ext::subxt_core::utils::H256,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum TransactionV2 {
					#[codec(index = 0)]
					Legacy(runtime_types::ethereum::transaction::LegacyTransaction),
					#[codec(index = 1)]
					EIP2930(runtime_types::ethereum::transaction::EIP2930Transaction),
					#[codec(index = 2)]
					EIP1559(runtime_types::ethereum::transaction::EIP1559Transaction),
				}
			}
		}
		pub mod ethereum_types {
			use super::runtime_types;
			pub mod hash {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct H64(pub [::core::primitive::u8; 8usize]);
			}
		}
		pub mod evm {
			use super::runtime_types;
			pub mod backend {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Basic {
					pub balance: runtime_types::primitive_types::U256,
					pub nonce: runtime_types::primitive_types::U256,
				}
			}
		}
		pub mod evm_core {
			use super::runtime_types;
			pub mod error {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum ExitError {
					#[codec(index = 0)]
					StackUnderflow,
					#[codec(index = 1)]
					StackOverflow,
					#[codec(index = 2)]
					InvalidJump,
					#[codec(index = 3)]
					InvalidRange,
					#[codec(index = 4)]
					DesignatedInvalid,
					#[codec(index = 5)]
					CallTooDeep,
					#[codec(index = 6)]
					CreateCollision,
					#[codec(index = 7)]
					CreateContractLimit,
					#[codec(index = 15)]
					InvalidCode(runtime_types::evm_core::opcode::Opcode),
					#[codec(index = 8)]
					OutOfOffset,
					#[codec(index = 9)]
					OutOfGas,
					#[codec(index = 10)]
					OutOfFund,
					#[codec(index = 11)]
					PCUnderflow,
					#[codec(index = 12)]
					CreateEmpty,
					#[codec(index = 13)]
					Other(::subxt::ext::subxt_core::alloc::string::String),
					#[codec(index = 14)]
					MaxNonce,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum ExitFatal {
					#[codec(index = 0)]
					NotSupported,
					#[codec(index = 1)]
					UnhandledInterrupt,
					#[codec(index = 2)]
					CallErrorAsFatal(runtime_types::evm_core::error::ExitError),
					#[codec(index = 3)]
					Other(::subxt::ext::subxt_core::alloc::string::String),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum ExitReason {
					#[codec(index = 0)]
					Succeed(runtime_types::evm_core::error::ExitSucceed),
					#[codec(index = 1)]
					Error(runtime_types::evm_core::error::ExitError),
					#[codec(index = 2)]
					Revert(runtime_types::evm_core::error::ExitRevert),
					#[codec(index = 3)]
					Fatal(runtime_types::evm_core::error::ExitFatal),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum ExitRevert {
					#[codec(index = 0)]
					Reverted,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum ExitSucceed {
					#[codec(index = 0)]
					Stopped,
					#[codec(index = 1)]
					Returned,
					#[codec(index = 2)]
					Suicided,
				}
			}
			pub mod opcode {
				use super::runtime_types;
				#[derive(
					::codec::Decode,
					::codec::Encode,
					::subxt::ext::subxt_core::ext::codec::CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct Opcode(pub ::core::primitive::u8);
			}
		}
		pub mod finality_grandpa {
			use super::runtime_types;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct Commit<_0, _1, _2, _3> {
				pub target_hash: _0,
				pub target_number: _1,
				pub precommits: ::subxt::ext::subxt_core::alloc::vec::Vec<
					runtime_types::finality_grandpa::SignedPrecommit<_0, _1, _2, _3>,
				>,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct Precommit<_0, _1> {
				pub target_hash: _0,
				pub target_number: _1,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct SignedPrecommit<_0, _1, _2, _3> {
				pub precommit: runtime_types::finality_grandpa::Precommit<_0, _1>,
				pub signature: _2,
				pub id: _3,
			}
		}
		pub mod fp_evm {
			use super::runtime_types;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct ExecutionInfoV2<_0> {
				pub exit_reason: runtime_types::evm_core::error::ExitReason,
				pub value: _0,
				pub used_gas: runtime_types::fp_evm::UsedGas,
				pub weight_info: ::core::option::Option<runtime_types::fp_evm::WeightInfo>,
				pub logs:
					::subxt::ext::subxt_core::alloc::vec::Vec<runtime_types::ethereum::log::Log>,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct UsedGas {
				pub standard: runtime_types::primitive_types::U256,
				pub effective: runtime_types::primitive_types::U256,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct WeightInfo {
				pub ref_time_limit: ::core::option::Option<::core::primitive::u64>,
				pub proof_size_limit: ::core::option::Option<::core::primitive::u64>,
				pub ref_time_usage: ::core::option::Option<::core::primitive::u64>,
				pub proof_size_usage: ::core::option::Option<::core::primitive::u64>,
			}
		}
		pub mod fp_rpc {
			use super::runtime_types;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct TransactionStatus {
				pub transaction_hash: ::subxt::ext::subxt_core::utils::H256,
				pub transaction_index: ::core::primitive::u32,
				pub from: ::subxt::ext::subxt_core::utils::H160,
				pub to: ::core::option::Option<::subxt::ext::subxt_core::utils::H160>,
				pub contract_address: ::core::option::Option<::subxt::ext::subxt_core::utils::H160>,
				pub logs:
					::subxt::ext::subxt_core::alloc::vec::Vec<runtime_types::ethereum::log::Log>,
				pub logs_bloom: runtime_types::ethbloom::Bloom,
			}
		}
		pub mod fp_self_contained {
			use super::runtime_types;
			pub mod unchecked_extrinsic {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct UncheckedExtrinsic<_0, _1, _2, _3>(
					pub ::subxt::ext::subxt_core::utils::UncheckedExtrinsic<_0, _1, _2, _3>,
				);
			}
		}
		pub mod frame_metadata_hash_extension {
			use super::runtime_types;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct CheckMetadataHash {
				pub mode: runtime_types::frame_metadata_hash_extension::Mode,
			}
			#[derive(
				::codec::Decode,
				::codec::DecodeWithMemTracking,
				::codec::Encode,
				Clone,
				Debug,
				Eq,
				PartialEq,
				scale_info::TypeInfo,
			)]
			pub enum Mode {
				#[codec(index = 0)]
				Disabled,
				#[codec(index = 1)]
				Enabled,
			}
		}
		pub mod frame_support {
			use super::runtime_types;
			pub mod dispatch {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum DispatchClass {
					#[codec(index = 0)]
					Normal,
					#[codec(index = 1)]
					Operational,
					#[codec(index = 2)]
					Mandatory,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct DispatchInfo {
					pub weight: ::sp_weights::Weight,
					pub class: runtime_types::frame_support::dispatch::DispatchClass,
					pub pays_fee: runtime_types::frame_support::dispatch::Pays,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Pays {
					#[codec(index = 0)]
					Yes,
					#[codec(index = 1)]
					No,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct PerDispatchClass<_0> {
					pub normal: _0,
					pub operational: _0,
					pub mandatory: _0,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct PostDispatchInfo {
					pub actual_weight: ::core::option::Option<::sp_weights::Weight>,
					pub pays_fee: runtime_types::frame_support::dispatch::Pays,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum RawOrigin<_0> {
					#[codec(index = 0)]
					Root,
					#[codec(index = 1)]
					Signed(_0),
					#[codec(index = 2)]
					None,
				}
			}
			pub mod traits {
				use super::runtime_types;
				pub mod messages {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum ProcessMessageError {
						#[codec(index = 0)]
						BadFormat,
						#[codec(index = 1)]
						Corrupt,
						#[codec(index = 2)]
						Unsupported,
						#[codec(index = 3)]
						Overweight(::sp_weights::Weight),
						#[codec(index = 4)]
						Yield,
						#[codec(index = 5)]
						StackLimitReached,
					}
				}
				pub mod preimages {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum Bounded<_0, _1> {
						#[codec(index = 0)]
						Legacy {
							hash: ::subxt::ext::subxt_core::utils::H256,
						},
						#[codec(index = 1)]
						Inline(
							runtime_types::bounded_collections::bounded_vec::BoundedVec<
								::core::primitive::u8,
							>,
						),
						#[codec(index = 2)]
						Lookup {
							hash: ::subxt::ext::subxt_core::utils::H256,
							len: ::core::primitive::u32,
						},
						__Ignore(::core::marker::PhantomData<(_0, _1)>),
					}
				}
				pub mod schedule {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum DispatchTime<_0> {
						#[codec(index = 0)]
						At(_0),
						#[codec(index = 1)]
						After(_0),
					}
				}
				pub mod tokens {
					use super::runtime_types;
					pub mod fungible {
						use super::runtime_types;
						#[derive(
							::codec::Decode,
							::codec::Encode,
							::subxt::ext::subxt_core::ext::codec::CompactAs,
							Clone,
							Debug,
							PartialEq,
						)]
						pub struct HoldConsideration(pub ::core::primitive::u128);
					}
					pub mod misc {
						use super::runtime_types;
						#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
						pub enum BalanceStatus {
							#[codec(index = 0)]
							Free,
							#[codec(index = 1)]
							Reserved,
						}
						#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
						pub struct IdAmount<_0, _1> {
							pub id: _0,
							pub amount: _1,
						}
					}
				}
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct PalletId(pub [::core::primitive::u8; 8usize]);
		}
		pub mod frame_system {
			use super::runtime_types;
			pub mod extensions {
				use super::runtime_types;
				pub mod check_genesis {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub struct CheckGenesis;
				}
				pub mod check_mortality {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub struct CheckMortality(pub ::sp_runtime::generic::Era);
				}
				pub mod check_non_zero_sender {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub struct CheckNonZeroSender;
				}
				pub mod check_nonce {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub struct CheckNonce(#[codec(compact)] pub ::core::primitive::u32);
				}
				pub mod check_spec_version {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub struct CheckSpecVersion;
				}
				pub mod check_tx_version {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub struct CheckTxVersion;
				}
				pub mod check_weight {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub struct CheckWeight;
				}
			}
			pub mod limits {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct BlockLength {
					pub max: runtime_types::frame_support::dispatch::PerDispatchClass<
						::core::primitive::u32,
					>,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct BlockWeights {
					pub base_block: ::sp_weights::Weight,
					pub max_block: ::sp_weights::Weight,
					pub per_class: runtime_types::frame_support::dispatch::PerDispatchClass<
						runtime_types::frame_system::limits::WeightsPerClass,
					>,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct WeightsPerClass {
					pub base_extrinsic: ::sp_weights::Weight,
					pub max_extrinsic: ::core::option::Option<::sp_weights::Weight>,
					pub max_total: ::core::option::Option<::sp_weights::Weight>,
					pub reserved: ::core::option::Option<::sp_weights::Weight>,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					remark {
						remark: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 1)]
					set_heap_pages { pages: ::core::primitive::u64 },
					#[codec(index = 2)]
					set_code {
						code: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 3)]
					set_code_without_checks {
						code: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 4)]
					set_storage {
						items: ::subxt::ext::subxt_core::alloc::vec::Vec<(
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						)>,
					},
					#[codec(index = 5)]
					kill_storage {
						keys: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
					},
					#[codec(index = 6)]
					kill_prefix {
						prefix: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						subkeys: ::core::primitive::u32,
					},
					#[codec(index = 7)]
					remark_with_event {
						remark: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 9)]
					authorize_upgrade { code_hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 10)]
					authorize_upgrade_without_checks {
						code_hash: ::subxt::ext::subxt_core::utils::H256,
					},
					#[codec(index = 11)]
					apply_authorized_upgrade {
						code: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					InvalidSpecName,
					#[codec(index = 1)]
					SpecVersionNeedsToIncrease,
					#[codec(index = 2)]
					FailedToExtractRuntimeVersion,
					#[codec(index = 3)]
					NonDefaultComposite,
					#[codec(index = 4)]
					NonZeroRefCount,
					#[codec(index = 5)]
					CallFiltered,
					#[codec(index = 6)]
					MultiBlockMigrationsOngoing,
					#[codec(index = 7)]
					NothingAuthorized,
					#[codec(index = 8)]
					Unauthorized,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					ExtrinsicSuccess {
						dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
					},
					#[codec(index = 1)]
					ExtrinsicFailed {
						dispatch_error: runtime_types::sp_runtime::DispatchError,
						dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
					},
					#[codec(index = 2)]
					CodeUpdated,
					#[codec(index = 3)]
					NewAccount { account: ::bp_moonbeam::AccountId },
					#[codec(index = 4)]
					KilledAccount { account: ::bp_moonbeam::AccountId },
					#[codec(index = 5)]
					Remarked {
						sender: ::bp_moonbeam::AccountId,
						hash: ::subxt::ext::subxt_core::utils::H256,
					},
					#[codec(index = 6)]
					UpgradeAuthorized {
						code_hash: ::subxt::ext::subxt_core::utils::H256,
						check_version: ::core::primitive::bool,
					},
				}
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct AccountInfo<_0, _1> {
				pub nonce: _0,
				pub consumers: ::core::primitive::u32,
				pub providers: ::core::primitive::u32,
				pub sufficients: ::core::primitive::u32,
				pub data: _1,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct CodeUpgradeAuthorization {
				pub code_hash: ::subxt::ext::subxt_core::utils::H256,
				pub check_version: ::core::primitive::bool,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct EventRecord<_0, _1> {
				pub phase: runtime_types::frame_system::Phase,
				pub event: _0,
				pub topics: ::subxt::ext::subxt_core::alloc::vec::Vec<_1>,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct LastRuntimeUpgradeInfo {
				#[codec(compact)]
				pub spec_version: ::core::primitive::u32,
				pub spec_name: ::subxt::ext::subxt_core::alloc::string::String,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum Phase {
				#[codec(index = 0)]
				ApplyExtrinsic(::core::primitive::u32),
				#[codec(index = 1)]
				Finalization,
				#[codec(index = 2)]
				Initialization,
			}
		}
		pub mod moonbeam_rpc_primitives_txpool {
			use super::runtime_types;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct TxPoolResponse {
				pub ready: ::subxt::ext::subxt_core::alloc::vec::Vec<
					runtime_types::ethereum::transaction::TransactionV2,
				>,
				pub future: ::subxt::ext::subxt_core::alloc::vec::Vec<
					runtime_types::ethereum::transaction::TransactionV2,
				>,
			}
		}
		pub mod moonbeam_runtime_common {
			use super::runtime_types;
			pub mod types {
				use super::runtime_types;
				#[derive(
					::codec::Decode,
					::codec::Encode,
					::subxt::ext::subxt_core::ext::codec::CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct BoundedU128(pub ::core::primitive::u128);
			}
		}
		pub mod moonriver_runtime {
			use super::runtime_types;
			pub mod asset_config {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct AssetRegistrarMetadata {
					pub name: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					pub symbol: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					pub decimals: ::core::primitive::u8,
					pub is_frozen: ::core::primitive::bool,
				}
			}
			pub mod governance {
				use super::runtime_types;
				pub mod origins {
					use super::runtime_types;
					pub mod custom_origins {
						use super::runtime_types;
						#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
						pub enum Origin {
							#[codec(index = 0)]
							WhitelistedCaller,
							#[codec(index = 1)]
							GeneralAdmin,
							#[codec(index = 2)]
							ReferendumCanceller,
							#[codec(index = 3)]
							ReferendumKiller,
							#[codec(index = 4)]
							FastGeneralAdmin,
						}
					}
				}
			}
			pub mod runtime_params {
				use super::runtime_types;
				pub mod dynamic_params {
					use super::runtime_types;
					pub mod pallet_randomness {
						use super::runtime_types;
						#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
						pub struct Deposit;
						#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
						pub enum Parameters {
							#[codec(index = 0)]
                            Deposit(
                                runtime_types::moonriver_runtime::runtime_params::dynamic_params::pallet_randomness::Deposit,
                                ::core::option::Option<
                                    runtime_types::moonbeam_runtime_common::types::BoundedU128,
                                >,
                            ),
                        }
						#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
						pub enum ParametersKey {
							#[codec(index = 0)]
                            Deposit(
                                runtime_types::moonriver_runtime::runtime_params::dynamic_params::pallet_randomness::Deposit,
                            ),
                        }
						#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
						pub enum ParametersValue {
							#[codec(index = 0)]
							Deposit(runtime_types::moonbeam_runtime_common::types::BoundedU128),
						}
					}
					pub mod runtime_config {
						use super::runtime_types;
						#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
						pub struct FeesTreasuryProportion;
						#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
						pub enum Parameters {
							#[codec(index = 0)]
                            FeesTreasuryProportion(
                                runtime_types::moonriver_runtime::runtime_params::dynamic_params::runtime_config::FeesTreasuryProportion,
                                ::core::option::Option<
                                    runtime_types::sp_arithmetic::per_things::Perbill,
                                >,
                            ),
                        }
						#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
						pub enum ParametersKey {
							#[codec(index = 0)]
                            FeesTreasuryProportion(
                                runtime_types::moonriver_runtime::runtime_params::dynamic_params::runtime_config::FeesTreasuryProportion,
                            ),
                        }
						#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
						pub enum ParametersValue {
							#[codec(index = 0)]
							FeesTreasuryProportion(
								runtime_types::sp_arithmetic::per_things::Perbill,
							),
						}
					}
					pub mod xcm_config {
						use super::runtime_types;
						#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
						pub struct ForeignAssetCreationDeposit;
						#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
						pub enum Parameters {
							#[codec(index = 0)]
                            ForeignAssetCreationDeposit(
                                runtime_types::moonriver_runtime::runtime_params::dynamic_params::xcm_config::ForeignAssetCreationDeposit,
                                ::core::option::Option<::core::primitive::u128>,
                            ),
                        }
						#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
						pub enum ParametersKey {
							#[codec(index = 0)]
                            ForeignAssetCreationDeposit(
                                runtime_types::moonriver_runtime::runtime_params::dynamic_params::xcm_config::ForeignAssetCreationDeposit,
                            ),
                        }
						#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
						pub enum ParametersValue {
							#[codec(index = 0)]
							ForeignAssetCreationDeposit(::core::primitive::u128),
						}
					}
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum RuntimeParameters {
					#[codec(index = 0)]
                    RuntimeConfig(
                        runtime_types::moonriver_runtime::runtime_params::dynamic_params::runtime_config::Parameters,
                    ),
                    #[codec(index = 1)]
                    PalletRandomness(
                        runtime_types::moonriver_runtime::runtime_params::dynamic_params::pallet_randomness::Parameters,
                    ),
                    #[codec(index = 2)]
                    XcmConfig(
                        runtime_types::moonriver_runtime::runtime_params::dynamic_params::xcm_config::Parameters,
                    ),
                }
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum RuntimeParametersKey {
					#[codec(index = 0)]
                    RuntimeConfig(
                        runtime_types::moonriver_runtime::runtime_params::dynamic_params::runtime_config::ParametersKey,
                    ),
                    #[codec(index = 1)]
                    PalletRandomness(
                        runtime_types::moonriver_runtime::runtime_params::dynamic_params::pallet_randomness::ParametersKey,
                    ),
                    #[codec(index = 2)]
                    XcmConfig(
                        runtime_types::moonriver_runtime::runtime_params::dynamic_params::xcm_config::ParametersKey,
                    ),
                }
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum RuntimeParametersValue {
					#[codec(index = 0)]
                    RuntimeConfig(
                        runtime_types::moonriver_runtime::runtime_params::dynamic_params::runtime_config::ParametersValue,
                    ),
                    #[codec(index = 1)]
                    PalletRandomness(
                        runtime_types::moonriver_runtime::runtime_params::dynamic_params::pallet_randomness::ParametersValue,
                    ),
                    #[codec(index = 2)]
                    XcmConfig(
                        runtime_types::moonriver_runtime::runtime_params::dynamic_params::xcm_config::ParametersValue,
                    ),
                }
			}
			pub mod xcm_config {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum AssetType {
					#[codec(index = 0)]
					Xcm(runtime_types::staging_xcm::v3::multilocation::MultiLocation),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum CurrencyId {
					#[codec(index = 0)]
					SelfReserve,
					#[codec(index = 1)]
					ForeignAsset(::core::primitive::u128),
					#[codec(index = 2)]
					Erc20 { contract_address: ::subxt::ext::subxt_core::utils::H160 },
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Transactors {
					#[codec(index = 0)]
					Relay,
				}
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct BridgeRejectObsoleteHeadersAndMessages;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum OriginCaller {
				#[codec(index = 0)]
				system(runtime_types::frame_support::dispatch::RawOrigin<::bp_moonbeam::AccountId>),
				#[codec(index = 52)]
				Ethereum(runtime_types::pallet_ethereum::RawOrigin),
				#[codec(index = 65)]
				Origins(
					runtime_types::moonriver_runtime::governance::origins::custom_origins::Origin,
				),
				#[codec(index = 72)]
				TreasuryCouncilCollective(
					runtime_types::pallet_collective::RawOrigin<::bp_moonbeam::AccountId>,
				),
				#[codec(index = 73)]
				OpenTechCommitteeCollective(
					runtime_types::pallet_collective::RawOrigin<::bp_moonbeam::AccountId>,
				),
				#[codec(index = 101)]
				CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Origin),
				#[codec(index = 103)]
				PolkadotXcm(runtime_types::pallet_xcm::pallet::Origin),
				#[codec(index = 109)]
				EthereumXcm(runtime_types::pallet_ethereum_xcm::RawOrigin),
				#[codec(index = 8)]
				Void(runtime_types::sp_core::Void),
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum ProxyType {
				#[codec(index = 0)]
				Any,
				#[codec(index = 1)]
				NonTransfer,
				#[codec(index = 2)]
				Governance,
				#[codec(index = 3)]
				Staking,
				#[codec(index = 4)]
				CancelProxy,
				#[codec(index = 5)]
				Balances,
				#[codec(index = 6)]
				AuthorMapping,
				#[codec(index = 7)]
				IdentityJudgement,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct Runtime;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum RuntimeCall {
				#[codec(index = 0)]
				System(runtime_types::frame_system::pallet::Call),
				#[codec(index = 1)]
				ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Call),
				#[codec(index = 3)]
				Timestamp(runtime_types::pallet_timestamp::pallet::Call),
				#[codec(index = 5)]
				RootTesting(runtime_types::pallet_root_testing::pallet::Call),
				#[codec(index = 10)]
				Balances(runtime_types::pallet_balances::pallet::Call),
				#[codec(index = 20)]
				ParachainStaking(runtime_types::pallet_parachain_staking::pallet::Call),
				#[codec(index = 21)]
				AuthorInherent(runtime_types::pallet_author_inherent::pallet::Call),
				#[codec(index = 22)]
				AuthorFilter(runtime_types::pallet_author_slot_filter::pallet::Call),
				#[codec(index = 23)]
				AuthorMapping(runtime_types::pallet_author_mapping::pallet::Call),
				#[codec(index = 24)]
				MoonbeamOrbiters(runtime_types::pallet_moonbeam_orbiters::pallet::Call),
				#[codec(index = 30)]
				Utility(runtime_types::pallet_utility::pallet::Call),
				#[codec(index = 31)]
				Proxy(runtime_types::pallet_proxy::pallet::Call),
				#[codec(index = 32)]
				MaintenanceMode(runtime_types::pallet_maintenance_mode::pallet::Call),
				#[codec(index = 33)]
				Identity(runtime_types::pallet_identity::pallet::Call),
				#[codec(index = 36)]
				Multisig(runtime_types::pallet_multisig::pallet::Call),
				#[codec(index = 37)]
				MoonbeamLazyMigrations(
					runtime_types::pallet_moonbeam_lazy_migrations::pallet::Call,
				),
				#[codec(index = 38)]
				Parameters(runtime_types::pallet_parameters::pallet::Call),
				#[codec(index = 51)]
				EVM(runtime_types::pallet_evm::pallet::Call),
				#[codec(index = 52)]
				Ethereum(runtime_types::pallet_ethereum::pallet::Call),
				#[codec(index = 60)]
				Scheduler(runtime_types::pallet_scheduler::pallet::Call),
				#[codec(index = 62)]
				Preimage(runtime_types::pallet_preimage::pallet::Call),
				#[codec(index = 63)]
				ConvictionVoting(runtime_types::pallet_conviction_voting::pallet::Call),
				#[codec(index = 64)]
				Referenda(runtime_types::pallet_referenda::pallet::Call),
				#[codec(index = 66)]
				Whitelist(runtime_types::pallet_whitelist::pallet::Call),
				#[codec(index = 72)]
				TreasuryCouncilCollective(runtime_types::pallet_collective::pallet::Call),
				#[codec(index = 73)]
				OpenTechCommitteeCollective(runtime_types::pallet_collective::pallet::Call),
				#[codec(index = 80)]
				Treasury(runtime_types::pallet_treasury::pallet::Call),
				#[codec(index = 90)]
				CrowdloanRewards(runtime_types::pallet_crowdloan_rewards::pallet::Call),
				#[codec(index = 103)]
				PolkadotXcm(runtime_types::pallet_xcm::pallet::Call),
				#[codec(index = 104)]
				Assets(runtime_types::pallet_assets::pallet::Call),
				#[codec(index = 105)]
				AssetManager(runtime_types::pallet_asset_manager::pallet::Call),
				#[codec(index = 107)]
				XcmTransactor(runtime_types::pallet_xcm_transactor::pallet::Call),
				#[codec(index = 109)]
				EthereumXcm(runtime_types::pallet_ethereum_xcm::pallet::Call),
				#[codec(index = 111)]
				MessageQueue(runtime_types::pallet_message_queue::pallet::Call),
				#[codec(index = 114)]
				EvmForeignAssets(runtime_types::pallet_moonbeam_foreign_assets::pallet::Call),
				#[codec(index = 115)]
				XcmWeightTrader(runtime_types::pallet_xcm_weight_trader::pallet::Call),
				#[codec(index = 116)]
				EmergencyParaXcm(runtime_types::pallet_emergency_para_xcm::pallet::Call),
				#[codec(index = 120)]
				Randomness(runtime_types::pallet_randomness::pallet::Call),
				#[codec(index = 130)]
				BridgePolkadotGrandpa(runtime_types::pallet_bridge_grandpa::pallet::Call),
				#[codec(index = 131)]
				BridgePolkadotParachains(runtime_types::pallet_bridge_parachains::pallet::Call),
				#[codec(index = 132)]
				BridgePolkadotMessages(runtime_types::pallet_bridge_messages::pallet::Call),
				#[codec(index = 133)]
				BridgeXcmOverMoonbeam(runtime_types::pallet_xcm_bridge::pallet::Call),
				#[codec(index = 134)]
				ToPolkadotXcmRouter(runtime_types::pallet_xcm_bridge_router::pallet::Call),
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum RuntimeError {
				#[codec(index = 0)]
				System(runtime_types::frame_system::pallet::Error),
				#[codec(index = 1)]
				ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Error),
				#[codec(index = 10)]
				Balances(runtime_types::pallet_balances::pallet::Error),
				#[codec(index = 20)]
				ParachainStaking(runtime_types::pallet_parachain_staking::pallet::Error),
				#[codec(index = 21)]
				AuthorInherent(runtime_types::pallet_author_inherent::pallet::Error),
				#[codec(index = 23)]
				AuthorMapping(runtime_types::pallet_author_mapping::pallet::Error),
				#[codec(index = 24)]
				MoonbeamOrbiters(runtime_types::pallet_moonbeam_orbiters::pallet::Error),
				#[codec(index = 30)]
				Utility(runtime_types::pallet_utility::pallet::Error),
				#[codec(index = 31)]
				Proxy(runtime_types::pallet_proxy::pallet::Error),
				#[codec(index = 32)]
				MaintenanceMode(runtime_types::pallet_maintenance_mode::pallet::Error),
				#[codec(index = 33)]
				Identity(runtime_types::pallet_identity::pallet::Error),
				#[codec(index = 34)]
				Migrations(runtime_types::pallet_migrations::pallet::Error),
				#[codec(index = 36)]
				Multisig(runtime_types::pallet_multisig::pallet::Error),
				#[codec(index = 37)]
				MoonbeamLazyMigrations(
					runtime_types::pallet_moonbeam_lazy_migrations::pallet::Error,
				),
				#[codec(index = 51)]
				EVM(runtime_types::pallet_evm::pallet::Error),
				#[codec(index = 52)]
				Ethereum(runtime_types::pallet_ethereum::pallet::Error),
				#[codec(index = 60)]
				Scheduler(runtime_types::pallet_scheduler::pallet::Error),
				#[codec(index = 62)]
				Preimage(runtime_types::pallet_preimage::pallet::Error),
				#[codec(index = 63)]
				ConvictionVoting(runtime_types::pallet_conviction_voting::pallet::Error),
				#[codec(index = 64)]
				Referenda(runtime_types::pallet_referenda::pallet::Error),
				#[codec(index = 66)]
				Whitelist(runtime_types::pallet_whitelist::pallet::Error),
				#[codec(index = 72)]
				TreasuryCouncilCollective(runtime_types::pallet_collective::pallet::Error),
				#[codec(index = 73)]
				OpenTechCommitteeCollective(runtime_types::pallet_collective::pallet::Error),
				#[codec(index = 80)]
				Treasury(runtime_types::pallet_treasury::pallet::Error),
				#[codec(index = 90)]
				CrowdloanRewards(runtime_types::pallet_crowdloan_rewards::pallet::Error),
				#[codec(index = 100)]
				XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Error),
				#[codec(index = 103)]
				PolkadotXcm(runtime_types::pallet_xcm::pallet::Error),
				#[codec(index = 104)]
				Assets(runtime_types::pallet_assets::pallet::Error),
				#[codec(index = 105)]
				AssetManager(runtime_types::pallet_asset_manager::pallet::Error),
				#[codec(index = 107)]
				XcmTransactor(runtime_types::pallet_xcm_transactor::pallet::Error),
				#[codec(index = 109)]
				EthereumXcm(runtime_types::pallet_ethereum_xcm::pallet::Error),
				#[codec(index = 111)]
				MessageQueue(runtime_types::pallet_message_queue::pallet::Error),
				#[codec(index = 114)]
				EvmForeignAssets(runtime_types::pallet_moonbeam_foreign_assets::pallet::Error),
				#[codec(index = 115)]
				XcmWeightTrader(runtime_types::pallet_xcm_weight_trader::pallet::Error),
				#[codec(index = 116)]
				EmergencyParaXcm(runtime_types::pallet_emergency_para_xcm::pallet::Error),
				#[codec(index = 113)]
				PrecompileBenchmarks(runtime_types::pallet_precompile_benchmarks::pallet::Error),
				#[codec(index = 120)]
				Randomness(runtime_types::pallet_randomness::pallet::Error),
				#[codec(index = 130)]
				BridgePolkadotGrandpa(runtime_types::pallet_bridge_grandpa::pallet::Error),
				#[codec(index = 131)]
				BridgePolkadotParachains(runtime_types::pallet_bridge_parachains::pallet::Error),
				#[codec(index = 132)]
				BridgePolkadotMessages(runtime_types::pallet_bridge_messages::pallet::Error),
				#[codec(index = 133)]
				BridgeXcmOverMoonbeam(runtime_types::pallet_xcm_bridge::pallet::Error),
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum RuntimeEvent {
				#[codec(index = 0)]
				System(runtime_types::frame_system::pallet::Event),
				#[codec(index = 1)]
				ParachainSystem(runtime_types::cumulus_pallet_parachain_system::pallet::Event),
				#[codec(index = 5)]
				RootTesting(runtime_types::pallet_root_testing::pallet::Event),
				#[codec(index = 10)]
				Balances(runtime_types::pallet_balances::pallet::Event),
				#[codec(index = 11)]
				TransactionPayment(runtime_types::pallet_transaction_payment::pallet::Event),
				#[codec(index = 20)]
				ParachainStaking(runtime_types::pallet_parachain_staking::pallet::Event),
				#[codec(index = 22)]
				AuthorFilter(runtime_types::pallet_author_slot_filter::pallet::Event),
				#[codec(index = 23)]
				AuthorMapping(runtime_types::pallet_author_mapping::pallet::Event),
				#[codec(index = 24)]
				MoonbeamOrbiters(runtime_types::pallet_moonbeam_orbiters::pallet::Event),
				#[codec(index = 30)]
				Utility(runtime_types::pallet_utility::pallet::Event),
				#[codec(index = 31)]
				Proxy(runtime_types::pallet_proxy::pallet::Event),
				#[codec(index = 32)]
				MaintenanceMode(runtime_types::pallet_maintenance_mode::pallet::Event),
				#[codec(index = 33)]
				Identity(runtime_types::pallet_identity::pallet::Event),
				#[codec(index = 34)]
				Migrations(runtime_types::pallet_migrations::pallet::Event),
				#[codec(index = 36)]
				Multisig(runtime_types::pallet_multisig::pallet::Event),
				#[codec(index = 38)]
				Parameters(runtime_types::pallet_parameters::pallet::Event),
				#[codec(index = 51)]
				EVM(runtime_types::pallet_evm::pallet::Event),
				#[codec(index = 52)]
				Ethereum(runtime_types::pallet_ethereum::pallet::Event),
				#[codec(index = 60)]
				Scheduler(runtime_types::pallet_scheduler::pallet::Event),
				#[codec(index = 62)]
				Preimage(runtime_types::pallet_preimage::pallet::Event),
				#[codec(index = 63)]
				ConvictionVoting(runtime_types::pallet_conviction_voting::pallet::Event),
				#[codec(index = 64)]
				Referenda(runtime_types::pallet_referenda::pallet::Event),
				#[codec(index = 66)]
				Whitelist(runtime_types::pallet_whitelist::pallet::Event),
				#[codec(index = 72)]
				TreasuryCouncilCollective(runtime_types::pallet_collective::pallet::Event),
				#[codec(index = 73)]
				OpenTechCommitteeCollective(runtime_types::pallet_collective::pallet::Event),
				#[codec(index = 80)]
				Treasury(runtime_types::pallet_treasury::pallet::Event),
				#[codec(index = 90)]
				CrowdloanRewards(runtime_types::pallet_crowdloan_rewards::pallet::Event),
				#[codec(index = 100)]
				XcmpQueue(runtime_types::cumulus_pallet_xcmp_queue::pallet::Event),
				#[codec(index = 101)]
				CumulusXcm(runtime_types::cumulus_pallet_xcm::pallet::Event),
				#[codec(index = 103)]
				PolkadotXcm(runtime_types::pallet_xcm::pallet::Event),
				#[codec(index = 104)]
				Assets(runtime_types::pallet_assets::pallet::Event),
				#[codec(index = 105)]
				AssetManager(runtime_types::pallet_asset_manager::pallet::Event),
				#[codec(index = 107)]
				XcmTransactor(runtime_types::pallet_xcm_transactor::pallet::Event),
				#[codec(index = 109)]
				EthereumXcm(runtime_types::pallet_ethereum_xcm::pallet::Event),
				#[codec(index = 111)]
				MessageQueue(runtime_types::pallet_message_queue::pallet::Event),
				#[codec(index = 114)]
				EvmForeignAssets(runtime_types::pallet_moonbeam_foreign_assets::pallet::Event),
				#[codec(index = 115)]
				XcmWeightTrader(runtime_types::pallet_xcm_weight_trader::pallet::Event),
				#[codec(index = 116)]
				EmergencyParaXcm(runtime_types::pallet_emergency_para_xcm::pallet::Event),
				#[codec(index = 120)]
				Randomness(runtime_types::pallet_randomness::pallet::Event),
				#[codec(index = 130)]
				BridgePolkadotGrandpa(runtime_types::pallet_bridge_grandpa::pallet::Event),
				#[codec(index = 131)]
				BridgePolkadotParachains(runtime_types::pallet_bridge_parachains::pallet::Event),
				#[codec(index = 132)]
				BridgePolkadotMessages(runtime_types::pallet_bridge_messages::pallet::Event),
				#[codec(index = 133)]
				BridgeXcmOverMoonbeam(runtime_types::pallet_xcm_bridge::pallet::Event),
				#[codec(index = 134)]
				ToPolkadotXcmRouter(runtime_types::pallet_xcm_bridge_router::pallet::Event),
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum RuntimeHoldReason {
				#[codec(index = 62)]
				Preimage(runtime_types::pallet_preimage::pallet::HoldReason),
				#[codec(index = 133)]
				BridgeXcmOverMoonbeam(runtime_types::pallet_xcm_bridge::pallet::HoldReason),
			}
		}
		pub mod nimbus_primitives {
			use super::runtime_types;
			pub mod nimbus_crypto {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Public(pub [::core::primitive::u8; 32usize]);
			}
		}
		pub mod pallet_asset_manager {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					register_foreign_asset {
						asset: runtime_types::moonriver_runtime::xcm_config::AssetType,
						metadata:
							runtime_types::moonriver_runtime::asset_config::AssetRegistrarMetadata,
						min_amount: ::core::primitive::u128,
						is_sufficient: ::core::primitive::bool,
					},
					#[codec(index = 2)]
					change_existing_asset_type {
						asset_id: ::core::primitive::u128,
						new_asset_type: runtime_types::moonriver_runtime::xcm_config::AssetType,
						num_assets_weight_hint: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					remove_existing_asset_type {
						asset_id: ::core::primitive::u128,
						num_assets_weight_hint: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					destroy_foreign_asset {
						asset_id: ::core::primitive::u128,
						num_assets_weight_hint: ::core::primitive::u32,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					ErrorCreatingAsset,
					#[codec(index = 1)]
					AssetAlreadyExists,
					#[codec(index = 2)]
					AssetDoesNotExist,
					#[codec(index = 3)]
					TooLowNumAssetsWeightHint,
					#[codec(index = 4)]
					LocalAssetLimitReached,
					#[codec(index = 5)]
					ErrorDestroyingAsset,
					#[codec(index = 6)]
					NotSufficientDeposit,
					#[codec(index = 7)]
					NonExistentLocalAsset,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					ForeignAssetRegistered {
						asset_id: ::core::primitive::u128,
						asset: runtime_types::moonriver_runtime::xcm_config::AssetType,
						metadata:
							runtime_types::moonriver_runtime::asset_config::AssetRegistrarMetadata,
					},
					#[codec(index = 1)]
					UnitsPerSecondChanged,
					#[codec(index = 2)]
					ForeignAssetXcmLocationChanged {
						asset_id: ::core::primitive::u128,
						new_asset_type: runtime_types::moonriver_runtime::xcm_config::AssetType,
					},
					#[codec(index = 3)]
					ForeignAssetRemoved {
						asset_id: ::core::primitive::u128,
						asset_type: runtime_types::moonriver_runtime::xcm_config::AssetType,
					},
					#[codec(index = 4)]
					SupportedAssetRemoved {
						asset_type: runtime_types::moonriver_runtime::xcm_config::AssetType,
					},
					#[codec(index = 5)]
					ForeignAssetDestroyed {
						asset_id: ::core::primitive::u128,
						asset_type: runtime_types::moonriver_runtime::xcm_config::AssetType,
					},
					#[codec(index = 6)]
					LocalAssetDestroyed { asset_id: ::core::primitive::u128 },
				}
			}
		}
		pub mod pallet_assets {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					create {
						#[codec(compact)]
						id: ::core::primitive::u128,
						admin: ::bp_moonbeam::AccountId,
						min_balance: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					force_create {
						#[codec(compact)]
						id: ::core::primitive::u128,
						owner: ::bp_moonbeam::AccountId,
						is_sufficient: ::core::primitive::bool,
						#[codec(compact)]
						min_balance: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					start_destroy {
						#[codec(compact)]
						id: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					destroy_accounts {
						#[codec(compact)]
						id: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					destroy_approvals {
						#[codec(compact)]
						id: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					finish_destroy {
						#[codec(compact)]
						id: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					mint {
						#[codec(compact)]
						id: ::core::primitive::u128,
						beneficiary: ::bp_moonbeam::AccountId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 7)]
					burn {
						#[codec(compact)]
						id: ::core::primitive::u128,
						who: ::bp_moonbeam::AccountId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					transfer {
						#[codec(compact)]
						id: ::core::primitive::u128,
						target: ::bp_moonbeam::AccountId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					transfer_keep_alive {
						#[codec(compact)]
						id: ::core::primitive::u128,
						target: ::bp_moonbeam::AccountId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 10)]
					force_transfer {
						#[codec(compact)]
						id: ::core::primitive::u128,
						source: ::bp_moonbeam::AccountId,
						dest: ::bp_moonbeam::AccountId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 11)]
					freeze {
						#[codec(compact)]
						id: ::core::primitive::u128,
						who: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 12)]
					thaw {
						#[codec(compact)]
						id: ::core::primitive::u128,
						who: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 13)]
					freeze_asset {
						#[codec(compact)]
						id: ::core::primitive::u128,
					},
					#[codec(index = 14)]
					thaw_asset {
						#[codec(compact)]
						id: ::core::primitive::u128,
					},
					#[codec(index = 15)]
					transfer_ownership {
						#[codec(compact)]
						id: ::core::primitive::u128,
						owner: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 16)]
					set_team {
						#[codec(compact)]
						id: ::core::primitive::u128,
						issuer: ::bp_moonbeam::AccountId,
						admin: ::bp_moonbeam::AccountId,
						freezer: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 17)]
					set_metadata {
						#[codec(compact)]
						id: ::core::primitive::u128,
						name: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						symbol: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						decimals: ::core::primitive::u8,
					},
					#[codec(index = 18)]
					clear_metadata {
						#[codec(compact)]
						id: ::core::primitive::u128,
					},
					#[codec(index = 19)]
					force_set_metadata {
						#[codec(compact)]
						id: ::core::primitive::u128,
						name: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						symbol: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						decimals: ::core::primitive::u8,
						is_frozen: ::core::primitive::bool,
					},
					#[codec(index = 20)]
					force_clear_metadata {
						#[codec(compact)]
						id: ::core::primitive::u128,
					},
					#[codec(index = 21)]
					force_asset_status {
						#[codec(compact)]
						id: ::core::primitive::u128,
						owner: ::bp_moonbeam::AccountId,
						issuer: ::bp_moonbeam::AccountId,
						admin: ::bp_moonbeam::AccountId,
						freezer: ::bp_moonbeam::AccountId,
						#[codec(compact)]
						min_balance: ::core::primitive::u128,
						is_sufficient: ::core::primitive::bool,
						is_frozen: ::core::primitive::bool,
					},
					#[codec(index = 22)]
					approve_transfer {
						#[codec(compact)]
						id: ::core::primitive::u128,
						delegate: ::bp_moonbeam::AccountId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 23)]
					cancel_approval {
						#[codec(compact)]
						id: ::core::primitive::u128,
						delegate: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 24)]
					force_cancel_approval {
						#[codec(compact)]
						id: ::core::primitive::u128,
						owner: ::bp_moonbeam::AccountId,
						delegate: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 25)]
					transfer_approved {
						#[codec(compact)]
						id: ::core::primitive::u128,
						owner: ::bp_moonbeam::AccountId,
						destination: ::bp_moonbeam::AccountId,
						#[codec(compact)]
						amount: ::core::primitive::u128,
					},
					#[codec(index = 26)]
					touch {
						#[codec(compact)]
						id: ::core::primitive::u128,
					},
					#[codec(index = 27)]
					refund {
						#[codec(compact)]
						id: ::core::primitive::u128,
						allow_burn: ::core::primitive::bool,
					},
					#[codec(index = 28)]
					set_min_balance {
						#[codec(compact)]
						id: ::core::primitive::u128,
						min_balance: ::core::primitive::u128,
					},
					#[codec(index = 29)]
					touch_other {
						#[codec(compact)]
						id: ::core::primitive::u128,
						who: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 30)]
					refund_other {
						#[codec(compact)]
						id: ::core::primitive::u128,
						who: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 31)]
					block {
						#[codec(compact)]
						id: ::core::primitive::u128,
						who: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 32)]
					transfer_all {
						#[codec(compact)]
						id: ::core::primitive::u128,
						dest: ::bp_moonbeam::AccountId,
						keep_alive: ::core::primitive::bool,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					BalanceLow,
					#[codec(index = 1)]
					NoAccount,
					#[codec(index = 2)]
					NoPermission,
					#[codec(index = 3)]
					Unknown,
					#[codec(index = 4)]
					Frozen,
					#[codec(index = 5)]
					InUse,
					#[codec(index = 6)]
					BadWitness,
					#[codec(index = 7)]
					MinBalanceZero,
					#[codec(index = 8)]
					UnavailableConsumer,
					#[codec(index = 9)]
					BadMetadata,
					#[codec(index = 10)]
					Unapproved,
					#[codec(index = 11)]
					WouldDie,
					#[codec(index = 12)]
					AlreadyExists,
					#[codec(index = 13)]
					NoDeposit,
					#[codec(index = 14)]
					WouldBurn,
					#[codec(index = 15)]
					LiveAsset,
					#[codec(index = 16)]
					AssetNotLive,
					#[codec(index = 17)]
					IncorrectStatus,
					#[codec(index = 18)]
					NotFrozen,
					#[codec(index = 19)]
					CallbackFailed,
					#[codec(index = 20)]
					BadAssetId,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Created {
						asset_id: ::core::primitive::u128,
						creator: ::bp_moonbeam::AccountId,
						owner: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 1)]
					Issued {
						asset_id: ::core::primitive::u128,
						owner: ::bp_moonbeam::AccountId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					Transferred {
						asset_id: ::core::primitive::u128,
						from: ::bp_moonbeam::AccountId,
						to: ::bp_moonbeam::AccountId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					Burned {
						asset_id: ::core::primitive::u128,
						owner: ::bp_moonbeam::AccountId,
						balance: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					TeamChanged {
						asset_id: ::core::primitive::u128,
						issuer: ::bp_moonbeam::AccountId,
						admin: ::bp_moonbeam::AccountId,
						freezer: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 5)]
					OwnerChanged {
						asset_id: ::core::primitive::u128,
						owner: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 6)]
					Frozen { asset_id: ::core::primitive::u128, who: ::bp_moonbeam::AccountId },
					#[codec(index = 7)]
					Thawed { asset_id: ::core::primitive::u128, who: ::bp_moonbeam::AccountId },
					#[codec(index = 8)]
					AssetFrozen { asset_id: ::core::primitive::u128 },
					#[codec(index = 9)]
					AssetThawed { asset_id: ::core::primitive::u128 },
					#[codec(index = 10)]
					AccountsDestroyed {
						asset_id: ::core::primitive::u128,
						accounts_destroyed: ::core::primitive::u32,
						accounts_remaining: ::core::primitive::u32,
					},
					#[codec(index = 11)]
					ApprovalsDestroyed {
						asset_id: ::core::primitive::u128,
						approvals_destroyed: ::core::primitive::u32,
						approvals_remaining: ::core::primitive::u32,
					},
					#[codec(index = 12)]
					DestructionStarted { asset_id: ::core::primitive::u128 },
					#[codec(index = 13)]
					Destroyed { asset_id: ::core::primitive::u128 },
					#[codec(index = 14)]
					ForceCreated {
						asset_id: ::core::primitive::u128,
						owner: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 15)]
					MetadataSet {
						asset_id: ::core::primitive::u128,
						name: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						symbol: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						decimals: ::core::primitive::u8,
						is_frozen: ::core::primitive::bool,
					},
					#[codec(index = 16)]
					MetadataCleared { asset_id: ::core::primitive::u128 },
					#[codec(index = 17)]
					ApprovedTransfer {
						asset_id: ::core::primitive::u128,
						source: ::bp_moonbeam::AccountId,
						delegate: ::bp_moonbeam::AccountId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 18)]
					ApprovalCancelled {
						asset_id: ::core::primitive::u128,
						owner: ::bp_moonbeam::AccountId,
						delegate: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 19)]
					TransferredApproved {
						asset_id: ::core::primitive::u128,
						owner: ::bp_moonbeam::AccountId,
						delegate: ::bp_moonbeam::AccountId,
						destination: ::bp_moonbeam::AccountId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 20)]
					AssetStatusChanged { asset_id: ::core::primitive::u128 },
					#[codec(index = 21)]
					AssetMinBalanceChanged {
						asset_id: ::core::primitive::u128,
						new_min_balance: ::core::primitive::u128,
					},
					#[codec(index = 22)]
					Touched {
						asset_id: ::core::primitive::u128,
						who: ::bp_moonbeam::AccountId,
						depositor: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 23)]
					Blocked { asset_id: ::core::primitive::u128, who: ::bp_moonbeam::AccountId },
					#[codec(index = 24)]
					Deposited {
						asset_id: ::core::primitive::u128,
						who: ::bp_moonbeam::AccountId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 25)]
					Withdrawn {
						asset_id: ::core::primitive::u128,
						who: ::bp_moonbeam::AccountId,
						amount: ::core::primitive::u128,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum AccountStatus {
					#[codec(index = 0)]
					Liquid,
					#[codec(index = 1)]
					Frozen,
					#[codec(index = 2)]
					Blocked,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Approval<_0, _1> {
					pub amount: _0,
					pub deposit: _1,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct AssetAccount<_0, _1, _2, _3> {
					pub balance: _0,
					pub status: runtime_types::pallet_assets::types::AccountStatus,
					pub reason: runtime_types::pallet_assets::types::ExistenceReason<_0, _3>,
					pub extra: _2,
					#[codec(skip)]
					pub __ignore: ::core::marker::PhantomData<_1>,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct AssetDetails<_0, _1, _2> {
					pub owner: _1,
					pub issuer: _1,
					pub admin: _1,
					pub freezer: _1,
					pub supply: _0,
					pub deposit: _2,
					pub min_balance: _0,
					pub is_sufficient: ::core::primitive::bool,
					pub accounts: ::core::primitive::u32,
					pub sufficients: ::core::primitive::u32,
					pub approvals: ::core::primitive::u32,
					pub status: runtime_types::pallet_assets::types::AssetStatus,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct AssetMetadata<_0, _1> {
					pub deposit: _0,
					pub name: _1,
					pub symbol: _1,
					pub decimals: ::core::primitive::u8,
					pub is_frozen: ::core::primitive::bool,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum AssetStatus {
					#[codec(index = 0)]
					Live,
					#[codec(index = 1)]
					Frozen,
					#[codec(index = 2)]
					Destroying,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum ExistenceReason<_0, _1> {
					#[codec(index = 0)]
					Consumer,
					#[codec(index = 1)]
					Sufficient,
					#[codec(index = 2)]
					DepositHeld(_0),
					#[codec(index = 3)]
					DepositRefunded,
					#[codec(index = 4)]
					DepositFrom(_1, _0),
				}
			}
		}
		pub mod pallet_author_inherent {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					kick_off_authorship_validation,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					AuthorAlreadySet,
					#[codec(index = 1)]
					NoAccountId,
					#[codec(index = 2)]
					CannotBeAuthor,
				}
			}
		}
		pub mod pallet_author_mapping {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					add_association {
						nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
					},
					#[codec(index = 1)]
					update_association {
						old_nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
						new_nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
					},
					#[codec(index = 2)]
					clear_association {
						nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
					},
					#[codec(index = 3)]
					remove_keys,
					#[codec(index = 4)]
					set_keys {
						keys: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					AssociationNotFound,
					#[codec(index = 1)]
					NotYourAssociation,
					#[codec(index = 2)]
					CannotAffordSecurityDeposit,
					#[codec(index = 3)]
					AlreadyAssociated,
					#[codec(index = 4)]
					OldAuthorIdNotFound,
					#[codec(index = 5)]
					WrongKeySize,
					#[codec(index = 6)]
					DecodeNimbusFailed,
					#[codec(index = 7)]
					DecodeKeysFailed,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					KeysRegistered {
						nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
						account_id: ::bp_moonbeam::AccountId,
						keys: runtime_types::session_keys_primitives::vrf::vrf_crypto::Public,
					},
					#[codec(index = 1)]
					KeysRemoved {
						nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
						account_id: ::bp_moonbeam::AccountId,
						keys: runtime_types::session_keys_primitives::vrf::vrf_crypto::Public,
					},
					#[codec(index = 2)]
					KeysRotated {
						new_nimbus_id: runtime_types::nimbus_primitives::nimbus_crypto::Public,
						account_id: ::bp_moonbeam::AccountId,
						new_keys: runtime_types::session_keys_primitives::vrf::vrf_crypto::Public,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct RegistrationInfo {
					pub account: ::bp_moonbeam::AccountId,
					pub deposit: ::core::primitive::u128,
					pub keys: runtime_types::session_keys_primitives::vrf::vrf_crypto::Public,
				}
			}
		}
		pub mod pallet_author_slot_filter {
			use super::runtime_types;
			pub mod num {
				use super::runtime_types;
				#[derive(
					::codec::Decode,
					::codec::Encode,
					::subxt::ext::subxt_core::ext::codec::CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct NonZeroU32(pub ::core::primitive::u32);
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					set_eligible { new: runtime_types::pallet_author_slot_filter::num::NonZeroU32 },
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					EligibleUpdated(runtime_types::pallet_author_slot_filter::num::NonZeroU32),
				}
			}
		}
		pub mod pallet_balances {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					transfer_allow_death {
						dest: ::bp_moonbeam::AccountId,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					force_transfer {
						source: ::bp_moonbeam::AccountId,
						dest: ::bp_moonbeam::AccountId,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					transfer_keep_alive {
						dest: ::bp_moonbeam::AccountId,
						#[codec(compact)]
						value: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					transfer_all {
						dest: ::bp_moonbeam::AccountId,
						keep_alive: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					force_unreserve {
						who: ::bp_moonbeam::AccountId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 6)]
					upgrade_accounts {
						who: ::subxt::ext::subxt_core::alloc::vec::Vec<::bp_moonbeam::AccountId>,
					},
					#[codec(index = 8)]
					force_set_balance {
						who: ::bp_moonbeam::AccountId,
						#[codec(compact)]
						new_free: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					force_adjust_total_issuance {
						direction: runtime_types::pallet_balances::types::AdjustmentDirection,
						#[codec(compact)]
						delta: ::core::primitive::u128,
					},
					#[codec(index = 10)]
					burn {
						#[codec(compact)]
						value: ::core::primitive::u128,
						keep_alive: ::core::primitive::bool,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					VestingBalance,
					#[codec(index = 1)]
					LiquidityRestrictions,
					#[codec(index = 2)]
					InsufficientBalance,
					#[codec(index = 3)]
					ExistentialDeposit,
					#[codec(index = 4)]
					Expendability,
					#[codec(index = 5)]
					ExistingVestingSchedule,
					#[codec(index = 6)]
					DeadAccount,
					#[codec(index = 7)]
					TooManyReserves,
					#[codec(index = 8)]
					TooManyHolds,
					#[codec(index = 9)]
					TooManyFreezes,
					#[codec(index = 10)]
					IssuanceDeactivated,
					#[codec(index = 11)]
					DeltaZero,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Endowed {
						account: ::bp_moonbeam::AccountId,
						free_balance: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					DustLost { account: ::bp_moonbeam::AccountId, amount: ::core::primitive::u128 },
					#[codec(index = 2)]
					Transfer {
						from: ::bp_moonbeam::AccountId,
						to: ::bp_moonbeam::AccountId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					BalanceSet { who: ::bp_moonbeam::AccountId, free: ::core::primitive::u128 },
					#[codec(index = 4)]
					Reserved { who: ::bp_moonbeam::AccountId, amount: ::core::primitive::u128 },
					#[codec(index = 5)]
					Unreserved { who: ::bp_moonbeam::AccountId, amount: ::core::primitive::u128 },
					#[codec(index = 6)]
					ReserveRepatriated {
						from: ::bp_moonbeam::AccountId,
						to: ::bp_moonbeam::AccountId,
						amount: ::core::primitive::u128,
						destination_status:
							runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
					},
					#[codec(index = 7)]
					Deposit { who: ::bp_moonbeam::AccountId, amount: ::core::primitive::u128 },
					#[codec(index = 8)]
					Withdraw { who: ::bp_moonbeam::AccountId, amount: ::core::primitive::u128 },
					#[codec(index = 9)]
					Slashed { who: ::bp_moonbeam::AccountId, amount: ::core::primitive::u128 },
					#[codec(index = 10)]
					Minted { who: ::bp_moonbeam::AccountId, amount: ::core::primitive::u128 },
					#[codec(index = 11)]
					Burned { who: ::bp_moonbeam::AccountId, amount: ::core::primitive::u128 },
					#[codec(index = 12)]
					Suspended { who: ::bp_moonbeam::AccountId, amount: ::core::primitive::u128 },
					#[codec(index = 13)]
					Restored { who: ::bp_moonbeam::AccountId, amount: ::core::primitive::u128 },
					#[codec(index = 14)]
					Upgraded { who: ::bp_moonbeam::AccountId },
					#[codec(index = 15)]
					Issued { amount: ::core::primitive::u128 },
					#[codec(index = 16)]
					Rescinded { amount: ::core::primitive::u128 },
					#[codec(index = 17)]
					Locked { who: ::bp_moonbeam::AccountId, amount: ::core::primitive::u128 },
					#[codec(index = 18)]
					Unlocked { who: ::bp_moonbeam::AccountId, amount: ::core::primitive::u128 },
					#[codec(index = 19)]
					Frozen { who: ::bp_moonbeam::AccountId, amount: ::core::primitive::u128 },
					#[codec(index = 20)]
					Thawed { who: ::bp_moonbeam::AccountId, amount: ::core::primitive::u128 },
					#[codec(index = 21)]
					TotalIssuanceForced {
						old: ::core::primitive::u128,
						new: ::core::primitive::u128,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct AccountData<_0> {
					pub free: _0,
					pub reserved: _0,
					pub frozen: _0,
					pub flags: runtime_types::pallet_balances::types::ExtraFlags,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum AdjustmentDirection {
					#[codec(index = 0)]
					Increase,
					#[codec(index = 1)]
					Decrease,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct BalanceLock<_0> {
					pub id: [::core::primitive::u8; 8usize],
					pub amount: _0,
					pub reasons: runtime_types::pallet_balances::types::Reasons,
				}
				#[derive(
					::codec::Decode,
					::codec::Encode,
					::subxt::ext::subxt_core::ext::codec::CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct ExtraFlags(pub ::core::primitive::u128);
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Reasons {
					#[codec(index = 0)]
					Fee,
					#[codec(index = 1)]
					Misc,
					#[codec(index = 2)]
					All,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct ReserveData<_0, _1> {
					pub id: _0,
					pub amount: _1,
				}
			}
		}
		pub mod pallet_bridge_grandpa {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					submit_finality_proof {
						finality_target: ::subxt::ext::subxt_core::alloc::boxed::Box<
							::sp_runtime::generic::Header<
								::core::primitive::u32,
								::sp_runtime::traits::BlakeTwo256,
							>,
						>,
						justification: ::bp_header_chain::justification::GrandpaJustification<
							::sp_runtime::generic::Header<
								::core::primitive::u32,
								::sp_runtime::traits::BlakeTwo256,
							>,
						>,
					},
					#[codec(index = 1)]
					initialize {
						init_data: ::bp_header_chain::InitializationData<
							::sp_runtime::generic::Header<
								::core::primitive::u32,
								::sp_runtime::traits::BlakeTwo256,
							>,
						>,
					},
					#[codec(index = 2)]
					set_owner { new_owner: ::core::option::Option<::bp_moonbeam::AccountId> },
					#[codec(index = 3)]
					set_operating_mode {
						operating_mode: runtime_types::bp_runtime::BasicOperatingMode,
					},
					#[codec(index = 4)]
					submit_finality_proof_ex {
						finality_target: ::subxt::ext::subxt_core::alloc::boxed::Box<
							::sp_runtime::generic::Header<
								::core::primitive::u32,
								::sp_runtime::traits::BlakeTwo256,
							>,
						>,
						justification: ::bp_header_chain::justification::GrandpaJustification<
							::sp_runtime::generic::Header<
								::core::primitive::u32,
								::sp_runtime::traits::BlakeTwo256,
							>,
						>,
						current_set_id: ::core::primitive::u64,
						is_free_execution_expected: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					force_set_pallet_state {
						new_current_set_id: ::core::primitive::u64,
						new_authorities: ::subxt::ext::subxt_core::alloc::vec::Vec<(
							runtime_types::sp_consensus_grandpa::app::Public,
							::core::primitive::u64,
						)>,
						new_best_header: ::subxt::ext::subxt_core::alloc::boxed::Box<
							::sp_runtime::generic::Header<
								::core::primitive::u32,
								::sp_runtime::traits::BlakeTwo256,
							>,
						>,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					InvalidJustification,
					#[codec(index = 1)]
					InvalidAuthoritySet,
					#[codec(index = 2)]
					OldHeader,
					#[codec(index = 3)]
					UnsupportedScheduledChange,
					#[codec(index = 4)]
					NotInitialized,
					#[codec(index = 5)]
					AlreadyInitialized,
					#[codec(index = 6)]
					TooManyAuthoritiesInSet,
					#[codec(index = 7)]
					BridgeModule(runtime_types::bp_runtime::OwnedBridgeModuleError),
					#[codec(index = 8)]
					InvalidAuthoritySetId,
					#[codec(index = 9)]
					FreeHeadersLimitExceded,
					#[codec(index = 10)]
					BelowFreeHeaderInterval,
					#[codec(index = 11)]
					HeaderOverflowLimits,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					UpdatedBestFinalizedHeader {
						number: ::core::primitive::u32,
						hash: ::subxt::ext::subxt_core::utils::H256,
						grandpa_info: runtime_types::bp_header_chain::HeaderFinalityInfo<
							::bp_header_chain::justification::GrandpaJustification<
								::sp_runtime::generic::Header<
									::core::primitive::u32,
									::sp_runtime::traits::BlakeTwo256,
								>,
							>,
							runtime_types::bp_header_chain::AuthoritySet,
						>,
					},
				}
			}
			pub mod storage_types {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct StoredAuthoritySet {
					pub authorities: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						runtime_types::sp_consensus_grandpa::app::Public,
						::core::primitive::u64,
					)>,
					pub set_id: ::core::primitive::u64,
				}
			}
		}
		pub mod pallet_bridge_messages {
			use super::runtime_types;
			pub mod lanes_manager {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum LanesManagerError {
					#[codec(index = 0)]
					InboundLaneAlreadyExists,
					#[codec(index = 1)]
					OutboundLaneAlreadyExists,
					#[codec(index = 2)]
					UnknownInboundLane,
					#[codec(index = 3)]
					UnknownOutboundLane,
					#[codec(index = 4)]
					ClosedInboundLane,
					#[codec(index = 5)]
					ClosedOutboundLane,
					#[codec(index = 6)]
					LaneDispatcherInactive,
				}
			}
			pub mod outbound_lane {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum ReceptionConfirmationError {
					#[codec(index = 0)]
					FailedToConfirmFutureMessages,
					#[codec(index = 1)]
					EmptyUnrewardedRelayerEntry,
					#[codec(index = 2)]
					NonConsecutiveUnrewardedRelayerEntries,
					#[codec(index = 3)]
					TryingToConfirmMoreMessagesThanExpected,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					set_owner { new_owner: ::core::option::Option<::bp_moonbeam::AccountId> },
					#[codec(index = 1)]
					set_operating_mode {
						operating_mode: runtime_types::bp_messages::MessagesOperatingMode,
					},
					#[codec(index = 2)]
					receive_messages_proof {
						relayer_id_at_bridged_chain: ::bp_moonbeam::AccountId,
						proof: ::subxt::ext::subxt_core::alloc::boxed::Box<
							::bp_messages::target_chain::FromBridgedChainMessagesProof<
								::subxt::ext::subxt_core::utils::H256,
								::bp_messages::LegacyLaneId,
							>,
						>,
						messages_count: ::core::primitive::u32,
						dispatch_weight: ::sp_weights::Weight,
					},
					#[codec(index = 3)]
					receive_messages_delivery_proof {
						proof: ::bp_messages::source_chain::FromBridgedChainMessagesDeliveryProof<
							::subxt::ext::subxt_core::utils::H256,
							::bp_messages::LegacyLaneId,
						>,
						relayers_state: ::bp_messages::UnrewardedRelayersState,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
                    NotOperatingNormally,
                    #[codec(index = 1)]
                    LanesManager(
                        runtime_types::pallet_bridge_messages::lanes_manager::LanesManagerError,
                    ),
                    #[codec(index = 2)]
                    MessageRejectedByPallet(
                        runtime_types::bp_messages::VerificationError,
                    ),
                    #[codec(index = 3)]
                    TooManyMessagesInTheProof,
                    #[codec(index = 4)]
                    InvalidMessagesProof,
                    #[codec(index = 5)]
                    InvalidMessagesDeliveryProof,
                    #[codec(index = 6)]
                    InvalidUnrewardedRelayersState,
                    #[codec(index = 7)]
                    InsufficientDispatchWeight,
                    #[codec(index = 8)]
                    ReceptionConfirmation(
                        runtime_types::pallet_bridge_messages::outbound_lane::ReceptionConfirmationError,
                    ),
                    #[codec(index = 9)]
                    BridgeModule(runtime_types::bp_runtime::OwnedBridgeModuleError),
                }
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
                    MessageAccepted {
                        lane_id: ::bp_messages::LegacyLaneId,
                        nonce: ::core::primitive::u64,
                    },
                    #[codec(index = 1)]
                    MessagesReceived(
                        runtime_types::bp_messages::ReceivedMessages<
                            runtime_types::pallet_xcm_bridge::dispatcher::XcmBlobMessageDispatchResult,
                            ::bp_messages::LegacyLaneId,
                        >,
                    ),
                    #[codec(index = 2)]
                    MessagesDelivered {
                        lane_id: ::bp_messages::LegacyLaneId,
                        messages: runtime_types::bp_messages::DeliveredMessages,
                    },
                }
			}
		}
		pub mod pallet_bridge_parachains {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					submit_parachain_heads {
						at_relay_block:
							(::core::primitive::u32, ::subxt::ext::subxt_core::utils::H256),
						parachains: ::subxt::ext::subxt_core::alloc::vec::Vec<(
							::bp_polkadot_core::parachains::ParaId,
							::subxt::ext::subxt_core::utils::H256,
						)>,
						parachain_heads_proof: ::bp_polkadot_core::parachains::ParaHeadsProof,
					},
					#[codec(index = 1)]
					set_owner { new_owner: ::core::option::Option<::bp_moonbeam::AccountId> },
					#[codec(index = 2)]
					set_operating_mode {
						operating_mode: runtime_types::bp_runtime::BasicOperatingMode,
					},
					#[codec(index = 3)]
					submit_parachain_heads_ex {
						at_relay_block:
							(::core::primitive::u32, ::subxt::ext::subxt_core::utils::H256),
						parachains: ::subxt::ext::subxt_core::alloc::vec::Vec<(
							::bp_polkadot_core::parachains::ParaId,
							::subxt::ext::subxt_core::utils::H256,
						)>,
						parachain_heads_proof: ::bp_polkadot_core::parachains::ParaHeadsProof,
						is_free_execution_expected: ::core::primitive::bool,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					UnknownRelayChainBlock,
					#[codec(index = 1)]
					InvalidRelayChainBlockNumber,
					#[codec(index = 2)]
					HeaderChainStorageProof(runtime_types::bp_header_chain::HeaderChainError),
					#[codec(index = 3)]
					BridgeModule(runtime_types::bp_runtime::OwnedBridgeModuleError),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					UntrackedParachainRejected { parachain: ::bp_polkadot_core::parachains::ParaId },
					#[codec(index = 1)]
					MissingParachainHead { parachain: ::bp_polkadot_core::parachains::ParaId },
					#[codec(index = 2)]
					IncorrectParachainHeadHash {
						parachain: ::bp_polkadot_core::parachains::ParaId,
						parachain_head_hash: ::subxt::ext::subxt_core::utils::H256,
						actual_parachain_head_hash: ::subxt::ext::subxt_core::utils::H256,
					},
					#[codec(index = 3)]
					RejectedObsoleteParachainHead {
						parachain: ::bp_polkadot_core::parachains::ParaId,
						parachain_head_hash: ::subxt::ext::subxt_core::utils::H256,
					},
					#[codec(index = 4)]
					RejectedLargeParachainHead {
						parachain: ::bp_polkadot_core::parachains::ParaId,
						parachain_head_hash: ::subxt::ext::subxt_core::utils::H256,
						parachain_head_size: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					UpdatedParachainHead {
						parachain: ::bp_polkadot_core::parachains::ParaId,
						parachain_head_hash: ::subxt::ext::subxt_core::utils::H256,
					},
				}
			}
		}
		pub mod pallet_collective {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					set_members {
						new_members:
							::subxt::ext::subxt_core::alloc::vec::Vec<::bp_moonbeam::AccountId>,
						prime: ::core::option::Option<::bp_moonbeam::AccountId>,
						old_count: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					execute {
						proposal: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::moonriver_runtime::RuntimeCall,
						>,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					propose {
						#[codec(compact)]
						threshold: ::core::primitive::u32,
						proposal: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::moonriver_runtime::RuntimeCall,
						>,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					vote {
						proposal: ::subxt::ext::subxt_core::utils::H256,
						#[codec(compact)]
						index: ::core::primitive::u32,
						approve: ::core::primitive::bool,
					},
					#[codec(index = 5)]
					disapprove_proposal { proposal_hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 6)]
					close {
						proposal_hash: ::subxt::ext::subxt_core::utils::H256,
						#[codec(compact)]
						index: ::core::primitive::u32,
						proposal_weight_bound: ::sp_weights::Weight,
						#[codec(compact)]
						length_bound: ::core::primitive::u32,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					NotMember,
					#[codec(index = 1)]
					DuplicateProposal,
					#[codec(index = 2)]
					ProposalMissing,
					#[codec(index = 3)]
					WrongIndex,
					#[codec(index = 4)]
					DuplicateVote,
					#[codec(index = 5)]
					AlreadyInitialized,
					#[codec(index = 6)]
					TooEarly,
					#[codec(index = 7)]
					TooManyProposals,
					#[codec(index = 8)]
					WrongProposalWeight,
					#[codec(index = 9)]
					WrongProposalLength,
					#[codec(index = 10)]
					PrimeAccountNotMember,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Proposed {
						account: ::bp_moonbeam::AccountId,
						proposal_index: ::core::primitive::u32,
						proposal_hash: ::subxt::ext::subxt_core::utils::H256,
						threshold: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					Voted {
						account: ::bp_moonbeam::AccountId,
						proposal_hash: ::subxt::ext::subxt_core::utils::H256,
						voted: ::core::primitive::bool,
						yes: ::core::primitive::u32,
						no: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					Approved { proposal_hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 3)]
					Disapproved { proposal_hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 4)]
					Executed {
						proposal_hash: ::subxt::ext::subxt_core::utils::H256,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 5)]
					MemberExecuted {
						proposal_hash: ::subxt::ext::subxt_core::utils::H256,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 6)]
					Closed {
						proposal_hash: ::subxt::ext::subxt_core::utils::H256,
						yes: ::core::primitive::u32,
						no: ::core::primitive::u32,
					},
				}
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum RawOrigin<_0> {
				#[codec(index = 0)]
				Members(::core::primitive::u32, ::core::primitive::u32),
				#[codec(index = 1)]
				Member(_0),
				#[codec(index = 2)]
				_Phantom,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct Votes<_0, _1> {
				pub index: ::core::primitive::u32,
				pub threshold: ::core::primitive::u32,
				pub ayes: ::subxt::ext::subxt_core::alloc::vec::Vec<_0>,
				pub nays: ::subxt::ext::subxt_core::alloc::vec::Vec<_0>,
				pub end: _1,
			}
		}
		pub mod pallet_conviction_voting {
			use super::runtime_types;
			pub mod conviction {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Conviction {
					#[codec(index = 0)]
					None,
					#[codec(index = 1)]
					Locked1x,
					#[codec(index = 2)]
					Locked2x,
					#[codec(index = 3)]
					Locked3x,
					#[codec(index = 4)]
					Locked4x,
					#[codec(index = 5)]
					Locked5x,
					#[codec(index = 6)]
					Locked6x,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					vote {
						#[codec(compact)]
						poll_index: ::core::primitive::u32,
						vote: runtime_types::pallet_conviction_voting::vote::AccountVote<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 1)]
					delegate {
						class: ::core::primitive::u16,
						to: ::bp_moonbeam::AccountId,
						conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
						balance: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					undelegate { class: ::core::primitive::u16 },
					#[codec(index = 3)]
					unlock { class: ::core::primitive::u16, target: ::bp_moonbeam::AccountId },
					#[codec(index = 4)]
					remove_vote {
						class: ::core::option::Option<::core::primitive::u16>,
						index: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					remove_other_vote {
						target: ::bp_moonbeam::AccountId,
						class: ::core::primitive::u16,
						index: ::core::primitive::u32,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					NotOngoing,
					#[codec(index = 1)]
					NotVoter,
					#[codec(index = 2)]
					NoPermission,
					#[codec(index = 3)]
					NoPermissionYet,
					#[codec(index = 4)]
					AlreadyDelegating,
					#[codec(index = 5)]
					AlreadyVoting,
					#[codec(index = 6)]
					InsufficientFunds,
					#[codec(index = 7)]
					NotDelegating,
					#[codec(index = 8)]
					Nonsense,
					#[codec(index = 9)]
					MaxVotesReached,
					#[codec(index = 10)]
					ClassNeeded,
					#[codec(index = 11)]
					BadClass,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Delegated(::bp_moonbeam::AccountId, ::bp_moonbeam::AccountId),
					#[codec(index = 1)]
					Undelegated(::bp_moonbeam::AccountId),
					#[codec(index = 2)]
					Voted {
						who: ::bp_moonbeam::AccountId,
						vote: runtime_types::pallet_conviction_voting::vote::AccountVote<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 3)]
					VoteRemoved {
						who: ::bp_moonbeam::AccountId,
						vote: runtime_types::pallet_conviction_voting::vote::AccountVote<
							::core::primitive::u128,
						>,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Delegations<_0> {
					pub votes: _0,
					pub capital: _0,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Tally<_0> {
					pub ayes: _0,
					pub nays: _0,
					pub support: _0,
				}
			}
			pub mod vote {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum AccountVote<_0> {
					#[codec(index = 0)]
					Standard {
						vote: runtime_types::pallet_conviction_voting::vote::Vote,
						balance: _0,
					},
					#[codec(index = 1)]
					Split { aye: _0, nay: _0 },
					#[codec(index = 2)]
					SplitAbstain { aye: _0, nay: _0, abstain: _0 },
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Casting<_0, _1, _2> {
					pub votes: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						_1,
						runtime_types::pallet_conviction_voting::vote::AccountVote<_0>,
					)>,
					pub delegations:
						runtime_types::pallet_conviction_voting::types::Delegations<_0>,
					pub prior: runtime_types::pallet_conviction_voting::vote::PriorLock<_1, _0>,
					#[codec(skip)]
					pub __ignore: ::core::marker::PhantomData<_2>,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Delegating<_0, _1, _2> {
					pub balance: _0,
					pub target: _1,
					pub conviction: runtime_types::pallet_conviction_voting::conviction::Conviction,
					pub delegations:
						runtime_types::pallet_conviction_voting::types::Delegations<_0>,
					pub prior: runtime_types::pallet_conviction_voting::vote::PriorLock<_2, _0>,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct PriorLock<_0, _1>(pub _0, pub _1);
				#[derive(
					::codec::Decode,
					::codec::Encode,
					::subxt::ext::subxt_core::ext::codec::CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct Vote(pub ::core::primitive::u8);
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Voting<_0, _1, _2, _3> {
					#[codec(index = 0)]
					Casting(runtime_types::pallet_conviction_voting::vote::Casting<_0, _2, _2>),
					#[codec(index = 1)]
					Delegating(
						runtime_types::pallet_conviction_voting::vote::Delegating<_0, _1, _2>,
					),
					__Ignore(::core::marker::PhantomData<_3>),
				}
			}
		}
		pub mod pallet_crowdloan_rewards {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					associate_native_identity {
						reward_account: ::bp_moonbeam::AccountId,
						relay_account: [::core::primitive::u8; 32usize],
						proof: runtime_types::sp_runtime::MultiSignature,
					},
					#[codec(index = 1)]
					change_association_with_relay_keys {
						reward_account: ::bp_moonbeam::AccountId,
						previous_account: ::bp_moonbeam::AccountId,
						proofs: ::subxt::ext::subxt_core::alloc::vec::Vec<(
							[::core::primitive::u8; 32usize],
							runtime_types::sp_runtime::MultiSignature,
						)>,
					},
					#[codec(index = 2)]
					claim,
					#[codec(index = 3)]
					update_reward_address { new_reward_account: ::bp_moonbeam::AccountId },
					#[codec(index = 4)]
					complete_initialization { lease_ending_block: ::core::primitive::u32 },
					#[codec(index = 5)]
					initialize_reward_vec {
						rewards: ::subxt::ext::subxt_core::alloc::vec::Vec<(
							[::core::primitive::u8; 32usize],
							::core::option::Option<::bp_moonbeam::AccountId>,
							::core::primitive::u128,
						)>,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					AlreadyAssociated,
					#[codec(index = 1)]
					BatchBeyondFundPot,
					#[codec(index = 2)]
					FirstClaimAlreadyDone,
					#[codec(index = 3)]
					RewardNotHighEnough,
					#[codec(index = 4)]
					InvalidClaimSignature,
					#[codec(index = 5)]
					InvalidFreeClaimSignature,
					#[codec(index = 6)]
					NoAssociatedClaim,
					#[codec(index = 7)]
					RewardsAlreadyClaimed,
					#[codec(index = 8)]
					RewardVecAlreadyInitialized,
					#[codec(index = 9)]
					RewardVecNotFullyInitializedYet,
					#[codec(index = 10)]
					RewardsDoNotMatchFund,
					#[codec(index = 11)]
					TooManyContributors,
					#[codec(index = 12)]
					VestingPeriodNonValid,
					#[codec(index = 13)]
					NonContributedAddressProvided,
					#[codec(index = 14)]
					InsufficientNumberOfValidProofs,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					InitialPaymentMade(::bp_moonbeam::AccountId, ::core::primitive::u128),
					#[codec(index = 1)]
					NativeIdentityAssociated(
						[::core::primitive::u8; 32usize],
						::bp_moonbeam::AccountId,
						::core::primitive::u128,
					),
					#[codec(index = 2)]
					RewardsPaid(::bp_moonbeam::AccountId, ::core::primitive::u128),
					#[codec(index = 3)]
					RewardAddressUpdated(::bp_moonbeam::AccountId, ::bp_moonbeam::AccountId),
					#[codec(index = 4)]
					InitializedAlreadyInitializedAccount(
						[::core::primitive::u8; 32usize],
						::core::option::Option<::bp_moonbeam::AccountId>,
						::core::primitive::u128,
					),
					#[codec(index = 5)]
					InitializedAccountWithNotEnoughContribution(
						[::core::primitive::u8; 32usize],
						::core::option::Option<::bp_moonbeam::AccountId>,
						::core::primitive::u128,
					),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct RewardInfo {
					pub total_reward: ::core::primitive::u128,
					pub claimed_reward: ::core::primitive::u128,
					pub contributed_relay_addresses:
						::subxt::ext::subxt_core::alloc::vec::Vec<[::core::primitive::u8; 32usize]>,
				}
			}
		}
		pub mod pallet_emergency_para_xcm {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					paused_to_normal,
					#[codec(index = 1)]
					fast_authorize_upgrade { code_hash: ::subxt::ext::subxt_core::utils::H256 },
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					NotInPausedMode,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					EnteredPausedXcmMode,
					#[codec(index = 1)]
					NormalXcmOperationResumed,
				}
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum XcmMode {
				#[codec(index = 0)]
				Normal,
				#[codec(index = 1)]
				Paused,
			}
		}
		pub mod pallet_ethereum {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					transact { transaction: runtime_types::ethereum::transaction::TransactionV2 },
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					InvalidSignature,
					#[codec(index = 1)]
					PreLogExists,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Executed {
						from: ::subxt::ext::subxt_core::utils::H160,
						to: ::subxt::ext::subxt_core::utils::H160,
						transaction_hash: ::subxt::ext::subxt_core::utils::H256,
						exit_reason: runtime_types::evm_core::error::ExitReason,
						extra_data:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
				}
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum RawOrigin {
				#[codec(index = 0)]
				EthereumTransaction(::subxt::ext::subxt_core::utils::H160),
			}
		}
		pub mod pallet_ethereum_xcm {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					transact {
						xcm_transaction:
							runtime_types::xcm_primitives::ethereum_xcm::EthereumXcmTransaction,
					},
					#[codec(index = 1)]
					transact_through_proxy {
						transact_as: ::subxt::ext::subxt_core::utils::H160,
						xcm_transaction:
							runtime_types::xcm_primitives::ethereum_xcm::EthereumXcmTransaction,
					},
					#[codec(index = 2)]
					suspend_ethereum_xcm_execution,
					#[codec(index = 3)]
					resume_ethereum_xcm_execution,
					#[codec(index = 4)]
					force_transact_as {
						transact_as: ::subxt::ext::subxt_core::utils::H160,
						xcm_transaction:
							runtime_types::xcm_primitives::ethereum_xcm::EthereumXcmTransaction,
						force_create_address:
							::core::option::Option<::subxt::ext::subxt_core::utils::H160>,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					EthereumXcmExecutionSuspended,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					ExecutedFromXcm {
						xcm_msg_hash: ::subxt::ext::subxt_core::utils::H256,
						eth_tx_hash: ::subxt::ext::subxt_core::utils::H256,
					},
				}
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum RawOrigin {
				#[codec(index = 0)]
				XcmEthereumTransaction(::subxt::ext::subxt_core::utils::H160),
			}
		}
		pub mod pallet_evm {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					withdraw {
						address: ::subxt::ext::subxt_core::utils::H160,
						value: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					call {
						source: ::subxt::ext::subxt_core::utils::H160,
						target: ::subxt::ext::subxt_core::utils::H160,
						input: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						value: runtime_types::primitive_types::U256,
						gas_limit: ::core::primitive::u64,
						max_fee_per_gas: runtime_types::primitive_types::U256,
						max_priority_fee_per_gas:
							::core::option::Option<runtime_types::primitive_types::U256>,
						nonce: ::core::option::Option<runtime_types::primitive_types::U256>,
						access_list: ::subxt::ext::subxt_core::alloc::vec::Vec<(
							::subxt::ext::subxt_core::utils::H160,
							::subxt::ext::subxt_core::alloc::vec::Vec<
								::subxt::ext::subxt_core::utils::H256,
							>,
						)>,
					},
					#[codec(index = 2)]
					create {
						source: ::subxt::ext::subxt_core::utils::H160,
						init: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						value: runtime_types::primitive_types::U256,
						gas_limit: ::core::primitive::u64,
						max_fee_per_gas: runtime_types::primitive_types::U256,
						max_priority_fee_per_gas:
							::core::option::Option<runtime_types::primitive_types::U256>,
						nonce: ::core::option::Option<runtime_types::primitive_types::U256>,
						access_list: ::subxt::ext::subxt_core::alloc::vec::Vec<(
							::subxt::ext::subxt_core::utils::H160,
							::subxt::ext::subxt_core::alloc::vec::Vec<
								::subxt::ext::subxt_core::utils::H256,
							>,
						)>,
					},
					#[codec(index = 3)]
					create2 {
						source: ::subxt::ext::subxt_core::utils::H160,
						init: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						salt: ::subxt::ext::subxt_core::utils::H256,
						value: runtime_types::primitive_types::U256,
						gas_limit: ::core::primitive::u64,
						max_fee_per_gas: runtime_types::primitive_types::U256,
						max_priority_fee_per_gas:
							::core::option::Option<runtime_types::primitive_types::U256>,
						nonce: ::core::option::Option<runtime_types::primitive_types::U256>,
						access_list: ::subxt::ext::subxt_core::alloc::vec::Vec<(
							::subxt::ext::subxt_core::utils::H160,
							::subxt::ext::subxt_core::alloc::vec::Vec<
								::subxt::ext::subxt_core::utils::H256,
							>,
						)>,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					BalanceLow,
					#[codec(index = 1)]
					FeeOverflow,
					#[codec(index = 2)]
					PaymentOverflow,
					#[codec(index = 3)]
					WithdrawFailed,
					#[codec(index = 4)]
					GasPriceTooLow,
					#[codec(index = 5)]
					InvalidNonce,
					#[codec(index = 6)]
					GasLimitTooLow,
					#[codec(index = 7)]
					GasLimitTooHigh,
					#[codec(index = 8)]
					InvalidChainId,
					#[codec(index = 9)]
					InvalidSignature,
					#[codec(index = 10)]
					Reentrancy,
					#[codec(index = 11)]
					TransactionMustComeFromEOA,
					#[codec(index = 12)]
					Undefined,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Log { log: runtime_types::ethereum::log::Log },
					#[codec(index = 1)]
					Created { address: ::subxt::ext::subxt_core::utils::H160 },
					#[codec(index = 2)]
					CreatedFailed { address: ::subxt::ext::subxt_core::utils::H160 },
					#[codec(index = 3)]
					Executed { address: ::subxt::ext::subxt_core::utils::H160 },
					#[codec(index = 4)]
					ExecutedFailed { address: ::subxt::ext::subxt_core::utils::H160 },
				}
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct CodeMetadata {
				pub size: ::core::primitive::u64,
				pub hash: ::subxt::ext::subxt_core::utils::H256,
			}
		}
		pub mod pallet_identity {
			use super::runtime_types;
			pub mod legacy {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct IdentityInfo {
					pub additional: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						runtime_types::pallet_identity::types::Data,
						runtime_types::pallet_identity::types::Data,
					)>,
					pub display: runtime_types::pallet_identity::types::Data,
					pub legal: runtime_types::pallet_identity::types::Data,
					pub web: runtime_types::pallet_identity::types::Data,
					pub riot: runtime_types::pallet_identity::types::Data,
					pub email: runtime_types::pallet_identity::types::Data,
					pub pgp_fingerprint: ::core::option::Option<[::core::primitive::u8; 20usize]>,
					pub image: runtime_types::pallet_identity::types::Data,
					pub twitter: runtime_types::pallet_identity::types::Data,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					add_registrar { account: ::bp_moonbeam::AccountId },
					#[codec(index = 1)]
					set_identity {
						info: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::pallet_identity::legacy::IdentityInfo,
						>,
					},
					#[codec(index = 2)]
					set_subs {
						subs: ::subxt::ext::subxt_core::alloc::vec::Vec<(
							::bp_moonbeam::AccountId,
							runtime_types::pallet_identity::types::Data,
						)>,
					},
					#[codec(index = 3)]
					clear_identity,
					#[codec(index = 4)]
					request_judgement {
						#[codec(compact)]
						reg_index: ::core::primitive::u32,
						#[codec(compact)]
						max_fee: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					cancel_request { reg_index: ::core::primitive::u32 },
					#[codec(index = 6)]
					set_fee {
						#[codec(compact)]
						index: ::core::primitive::u32,
						#[codec(compact)]
						fee: ::core::primitive::u128,
					},
					#[codec(index = 7)]
					set_account_id {
						#[codec(compact)]
						index: ::core::primitive::u32,
						new: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 8)]
					set_fields {
						#[codec(compact)]
						index: ::core::primitive::u32,
						fields: ::core::primitive::u64,
					},
					#[codec(index = 9)]
					provide_judgement {
						#[codec(compact)]
						reg_index: ::core::primitive::u32,
						target: ::bp_moonbeam::AccountId,
						judgement: runtime_types::pallet_identity::types::Judgement<
							::core::primitive::u128,
						>,
						identity: ::subxt::ext::subxt_core::utils::H256,
					},
					#[codec(index = 10)]
					kill_identity { target: ::bp_moonbeam::AccountId },
					#[codec(index = 11)]
					add_sub {
						sub: ::bp_moonbeam::AccountId,
						data: runtime_types::pallet_identity::types::Data,
					},
					#[codec(index = 12)]
					rename_sub {
						sub: ::bp_moonbeam::AccountId,
						data: runtime_types::pallet_identity::types::Data,
					},
					#[codec(index = 13)]
					remove_sub { sub: ::bp_moonbeam::AccountId },
					#[codec(index = 14)]
					quit_sub,
					#[codec(index = 15)]
					add_username_authority {
						authority: ::bp_moonbeam::AccountId,
						suffix: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						allocation: ::core::primitive::u32,
					},
					#[codec(index = 16)]
					remove_username_authority { authority: ::bp_moonbeam::AccountId },
					#[codec(index = 17)]
					set_username_for {
						who: ::bp_moonbeam::AccountId,
						username: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						signature:
							::core::option::Option<runtime_types::account::EthereumSignature>,
					},
					#[codec(index = 18)]
					accept_username {
						username: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
					#[codec(index = 19)]
					remove_expired_approval {
						username: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
					#[codec(index = 20)]
					set_primary_username {
						username: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
					#[codec(index = 21)]
					remove_dangling_username {
						username: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					TooManySubAccounts,
					#[codec(index = 1)]
					NotFound,
					#[codec(index = 2)]
					NotNamed,
					#[codec(index = 3)]
					EmptyIndex,
					#[codec(index = 4)]
					FeeChanged,
					#[codec(index = 5)]
					NoIdentity,
					#[codec(index = 6)]
					StickyJudgement,
					#[codec(index = 7)]
					JudgementGiven,
					#[codec(index = 8)]
					InvalidJudgement,
					#[codec(index = 9)]
					InvalidIndex,
					#[codec(index = 10)]
					InvalidTarget,
					#[codec(index = 11)]
					TooManyRegistrars,
					#[codec(index = 12)]
					AlreadyClaimed,
					#[codec(index = 13)]
					NotSub,
					#[codec(index = 14)]
					NotOwned,
					#[codec(index = 15)]
					JudgementForDifferentIdentity,
					#[codec(index = 16)]
					JudgementPaymentFailed,
					#[codec(index = 17)]
					InvalidSuffix,
					#[codec(index = 18)]
					NotUsernameAuthority,
					#[codec(index = 19)]
					NoAllocation,
					#[codec(index = 20)]
					InvalidSignature,
					#[codec(index = 21)]
					RequiresSignature,
					#[codec(index = 22)]
					InvalidUsername,
					#[codec(index = 23)]
					UsernameTaken,
					#[codec(index = 24)]
					NoUsername,
					#[codec(index = 25)]
					NotExpired,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					IdentitySet { who: ::bp_moonbeam::AccountId },
					#[codec(index = 1)]
					IdentityCleared {
						who: ::bp_moonbeam::AccountId,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					IdentityKilled {
						who: ::bp_moonbeam::AccountId,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					JudgementRequested {
						who: ::bp_moonbeam::AccountId,
						registrar_index: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					JudgementUnrequested {
						who: ::bp_moonbeam::AccountId,
						registrar_index: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					JudgementGiven {
						target: ::bp_moonbeam::AccountId,
						registrar_index: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					RegistrarAdded { registrar_index: ::core::primitive::u32 },
					#[codec(index = 7)]
					SubIdentityAdded {
						sub: ::bp_moonbeam::AccountId,
						main: ::bp_moonbeam::AccountId,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					SubIdentityRemoved {
						sub: ::bp_moonbeam::AccountId,
						main: ::bp_moonbeam::AccountId,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 9)]
					SubIdentityRevoked {
						sub: ::bp_moonbeam::AccountId,
						main: ::bp_moonbeam::AccountId,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 10)]
					AuthorityAdded { authority: ::bp_moonbeam::AccountId },
					#[codec(index = 11)]
					AuthorityRemoved { authority: ::bp_moonbeam::AccountId },
					#[codec(index = 12)]
					UsernameSet {
						who: ::bp_moonbeam::AccountId,
						username: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
					#[codec(index = 13)]
					UsernameQueued {
						who: ::bp_moonbeam::AccountId,
						username: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
						expiration: ::core::primitive::u32,
					},
					#[codec(index = 14)]
					PreapprovalExpired { whose: ::bp_moonbeam::AccountId },
					#[codec(index = 15)]
					PrimaryUsernameSet {
						who: ::bp_moonbeam::AccountId,
						username: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
					#[codec(index = 16)]
					DanglingUsernameRemoved {
						who: ::bp_moonbeam::AccountId,
						username: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct AuthorityProperties<_0> {
					pub suffix: _0,
					pub allocation: ::core::primitive::u32,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Data {
					#[codec(index = 0)]
					None,
					#[codec(index = 1)]
					Raw0([::core::primitive::u8; 0usize]),
					#[codec(index = 2)]
					Raw1([::core::primitive::u8; 1usize]),
					#[codec(index = 3)]
					Raw2([::core::primitive::u8; 2usize]),
					#[codec(index = 4)]
					Raw3([::core::primitive::u8; 3usize]),
					#[codec(index = 5)]
					Raw4([::core::primitive::u8; 4usize]),
					#[codec(index = 6)]
					Raw5([::core::primitive::u8; 5usize]),
					#[codec(index = 7)]
					Raw6([::core::primitive::u8; 6usize]),
					#[codec(index = 8)]
					Raw7([::core::primitive::u8; 7usize]),
					#[codec(index = 9)]
					Raw8([::core::primitive::u8; 8usize]),
					#[codec(index = 10)]
					Raw9([::core::primitive::u8; 9usize]),
					#[codec(index = 11)]
					Raw10([::core::primitive::u8; 10usize]),
					#[codec(index = 12)]
					Raw11([::core::primitive::u8; 11usize]),
					#[codec(index = 13)]
					Raw12([::core::primitive::u8; 12usize]),
					#[codec(index = 14)]
					Raw13([::core::primitive::u8; 13usize]),
					#[codec(index = 15)]
					Raw14([::core::primitive::u8; 14usize]),
					#[codec(index = 16)]
					Raw15([::core::primitive::u8; 15usize]),
					#[codec(index = 17)]
					Raw16([::core::primitive::u8; 16usize]),
					#[codec(index = 18)]
					Raw17([::core::primitive::u8; 17usize]),
					#[codec(index = 19)]
					Raw18([::core::primitive::u8; 18usize]),
					#[codec(index = 20)]
					Raw19([::core::primitive::u8; 19usize]),
					#[codec(index = 21)]
					Raw20([::core::primitive::u8; 20usize]),
					#[codec(index = 22)]
					Raw21([::core::primitive::u8; 21usize]),
					#[codec(index = 23)]
					Raw22([::core::primitive::u8; 22usize]),
					#[codec(index = 24)]
					Raw23([::core::primitive::u8; 23usize]),
					#[codec(index = 25)]
					Raw24([::core::primitive::u8; 24usize]),
					#[codec(index = 26)]
					Raw25([::core::primitive::u8; 25usize]),
					#[codec(index = 27)]
					Raw26([::core::primitive::u8; 26usize]),
					#[codec(index = 28)]
					Raw27([::core::primitive::u8; 27usize]),
					#[codec(index = 29)]
					Raw28([::core::primitive::u8; 28usize]),
					#[codec(index = 30)]
					Raw29([::core::primitive::u8; 29usize]),
					#[codec(index = 31)]
					Raw30([::core::primitive::u8; 30usize]),
					#[codec(index = 32)]
					Raw31([::core::primitive::u8; 31usize]),
					#[codec(index = 33)]
					Raw32([::core::primitive::u8; 32usize]),
					#[codec(index = 34)]
					BlakeTwo256([::core::primitive::u8; 32usize]),
					#[codec(index = 35)]
					Sha256([::core::primitive::u8; 32usize]),
					#[codec(index = 36)]
					Keccak256([::core::primitive::u8; 32usize]),
					#[codec(index = 37)]
					ShaThree256([::core::primitive::u8; 32usize]),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Judgement<_0> {
					#[codec(index = 0)]
					Unknown,
					#[codec(index = 1)]
					FeePaid(_0),
					#[codec(index = 2)]
					Reasonable,
					#[codec(index = 3)]
					KnownGood,
					#[codec(index = 4)]
					OutOfDate,
					#[codec(index = 5)]
					LowQuality,
					#[codec(index = 6)]
					Erroneous,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct RegistrarInfo<_0, _1, _2> {
					pub account: _1,
					pub fee: _0,
					pub fields: _2,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Registration<_0, _2> {
					pub judgements: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						::core::primitive::u32,
						runtime_types::pallet_identity::types::Judgement<_0>,
					)>,
					pub deposit: _0,
					pub info: _2,
				}
			}
		}
		pub mod pallet_maintenance_mode {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					enter_maintenance_mode,
					#[codec(index = 1)]
					resume_normal_operation,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					AlreadyInMaintenanceMode,
					#[codec(index = 1)]
					NotInMaintenanceMode,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					EnteredMaintenanceMode,
					#[codec(index = 1)]
					NormalOperationResumed,
					#[codec(index = 2)]
					FailedToSuspendIdleXcmExecution {
						error: runtime_types::sp_runtime::DispatchError,
					},
					#[codec(index = 3)]
					FailedToResumeIdleXcmExecution {
						error: runtime_types::sp_runtime::DispatchError,
					},
				}
			}
		}
		pub mod pallet_message_queue {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					reap_page {
						message_origin:
							runtime_types::cumulus_primitives_core::AggregateMessageOrigin,
						page_index: ::core::primitive::u32,
					},
					#[codec(index = 1)]
					execute_overweight {
						message_origin:
							runtime_types::cumulus_primitives_core::AggregateMessageOrigin,
						page: ::core::primitive::u32,
						index: ::core::primitive::u32,
						weight_limit: ::sp_weights::Weight,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					NotReapable,
					#[codec(index = 1)]
					NoPage,
					#[codec(index = 2)]
					NoMessage,
					#[codec(index = 3)]
					AlreadyProcessed,
					#[codec(index = 4)]
					Queued,
					#[codec(index = 5)]
					InsufficientWeight,
					#[codec(index = 6)]
					TemporarilyUnprocessable,
					#[codec(index = 7)]
					QueuePaused,
					#[codec(index = 8)]
					RecursiveDisallowed,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					ProcessingFailed {
						id: ::subxt::ext::subxt_core::utils::H256,
						origin: runtime_types::cumulus_primitives_core::AggregateMessageOrigin,
						error: runtime_types::frame_support::traits::messages::ProcessMessageError,
					},
					#[codec(index = 1)]
					Processed {
						id: ::subxt::ext::subxt_core::utils::H256,
						origin: runtime_types::cumulus_primitives_core::AggregateMessageOrigin,
						weight_used: ::sp_weights::Weight,
						success: ::core::primitive::bool,
					},
					#[codec(index = 2)]
					OverweightEnqueued {
						id: [::core::primitive::u8; 32usize],
						origin: runtime_types::cumulus_primitives_core::AggregateMessageOrigin,
						page_index: ::core::primitive::u32,
						message_index: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					PageReaped {
						origin: runtime_types::cumulus_primitives_core::AggregateMessageOrigin,
						index: ::core::primitive::u32,
					},
				}
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct BookState<_0> {
				pub begin: ::core::primitive::u32,
				pub end: ::core::primitive::u32,
				pub count: ::core::primitive::u32,
				pub ready_neighbours:
					::core::option::Option<runtime_types::pallet_message_queue::Neighbours<_0>>,
				pub message_count: ::core::primitive::u64,
				pub size: ::core::primitive::u64,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct Neighbours<_0> {
				pub prev: _0,
				pub next: _0,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct Page<_0> {
				pub remaining: _0,
				pub remaining_size: _0,
				pub first_index: _0,
				pub first: _0,
				pub last: _0,
				pub heap: runtime_types::bounded_collections::bounded_vec::BoundedVec<
					::core::primitive::u8,
				>,
			}
		}
		pub mod pallet_migrations {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					PreimageMissing,
					#[codec(index = 1)]
					WrongUpperBound,
					#[codec(index = 2)]
					PreimageIsTooBig,
					#[codec(index = 3)]
					PreimageAlreadyExists,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					RuntimeUpgradeStarted,
					#[codec(index = 1)]
					RuntimeUpgradeCompleted { weight: ::sp_weights::Weight },
					#[codec(index = 2)]
					MigrationStarted {
						migration_name:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 3)]
					MigrationCompleted {
						migration_name:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						consumed_weight: ::sp_weights::Weight,
					},
					#[codec(index = 4)]
					FailedToSuspendIdleXcmExecution {
						error: runtime_types::sp_runtime::DispatchError,
					},
					#[codec(index = 5)]
					FailedToResumeIdleXcmExecution {
						error: runtime_types::sp_runtime::DispatchError,
					},
				}
			}
		}
		pub mod pallet_moonbeam_foreign_assets {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct AssetDepositDetails<_0> {
					pub deposit_account: ::bp_moonbeam::AccountId,
					pub deposit: ::core::primitive::u128,
					#[codec(skip)]
					pub __ignore: ::core::marker::PhantomData<_0>,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					create_foreign_asset {
						asset_id: ::core::primitive::u128,
						asset_xcm_location: runtime_types::staging_xcm::v4::location::Location,
						decimals: ::core::primitive::u8,
						symbol: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
						name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					},
					#[codec(index = 1)]
					change_xcm_location {
						asset_id: ::core::primitive::u128,
						new_xcm_location: runtime_types::staging_xcm::v4::location::Location,
					},
					#[codec(index = 2)]
					freeze_foreign_asset {
						asset_id: ::core::primitive::u128,
						allow_xcm_deposit: ::core::primitive::bool,
					},
					#[codec(index = 3)]
					unfreeze_foreign_asset { asset_id: ::core::primitive::u128 },
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					AssetAlreadyExists,
					#[codec(index = 1)]
					AssetAlreadyFrozen,
					#[codec(index = 2)]
					AssetDoesNotExist,
					#[codec(index = 3)]
					AssetIdFiltered,
					#[codec(index = 4)]
					AssetNotFrozen,
					#[codec(index = 5)]
					CorruptedStorageOrphanLocation,
					#[codec(index = 6)]
					Erc20ContractCreationFail,
					#[codec(index = 7)]
					EvmCallPauseFail,
					#[codec(index = 8)]
					EvmCallUnpauseFail,
					#[codec(index = 9)]
					EvmInternalError,
					#[codec(index = 10)]
					InsufficientBalance,
					#[codec(index = 11)]
					CannotConvertLocationToAccount,
					#[codec(index = 12)]
					LocationOutsideOfOrigin,
					#[codec(index = 13)]
					AssetNotInSiblingPara,
					#[codec(index = 14)]
					InvalidSymbol,
					#[codec(index = 15)]
					InvalidTokenName,
					#[codec(index = 16)]
					LocationAlreadyExists,
					#[codec(index = 17)]
					TooManyForeignAssets,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					ForeignAssetCreated {
						contract_address: ::subxt::ext::subxt_core::utils::H160,
						asset_id: ::core::primitive::u128,
						xcm_location: runtime_types::staging_xcm::v4::location::Location,
						deposit: ::core::option::Option<::core::primitive::u128>,
					},
					#[codec(index = 1)]
					ForeignAssetXcmLocationChanged {
						asset_id: ::core::primitive::u128,
						previous_xcm_location: runtime_types::staging_xcm::v4::location::Location,
						new_xcm_location: runtime_types::staging_xcm::v4::location::Location,
					},
					#[codec(index = 2)]
					ForeignAssetFrozen {
						asset_id: ::core::primitive::u128,
						xcm_location: runtime_types::staging_xcm::v4::location::Location,
					},
					#[codec(index = 3)]
					ForeignAssetUnfrozen {
						asset_id: ::core::primitive::u128,
						xcm_location: runtime_types::staging_xcm::v4::location::Location,
					},
					#[codec(index = 4)]
					TokensLocked(
						::bp_moonbeam::AccountId,
						::core::primitive::u128,
						runtime_types::primitive_types::U256,
					),
				}
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum AssetStatus {
				#[codec(index = 0)]
				Active,
				#[codec(index = 1)]
				FrozenXcmDepositAllowed,
				#[codec(index = 2)]
				FrozenXcmDepositForbidden,
			}
		}
		pub mod pallet_moonbeam_lazy_migrations {
			use super::runtime_types;
			pub mod foreign_asset {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct ForeignAssetMigrationInfo {
					pub asset_id: ::core::primitive::u128,
					pub remaining_balances: ::core::primitive::u32,
					pub remaining_approvals: ::core::primitive::u32,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum ForeignAssetMigrationStatus {
					#[codec(index = 0)]
                    Idle,
                    #[codec(index = 1)]
                    Migrating(
                        runtime_types::pallet_moonbeam_lazy_migrations::foreign_asset::ForeignAssetMigrationInfo,
                    ),
                }
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 2)]
					create_contract_metadata { address: ::subxt::ext::subxt_core::utils::H160 },
					#[codec(index = 3)]
					approve_assets_to_migrate {
						assets: runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 4)]
					start_foreign_assets_migration { asset_id: ::core::primitive::u128 },
					#[codec(index = 5)]
					migrate_foreign_asset_balances { limit: ::core::primitive::u32 },
					#[codec(index = 6)]
					migrate_foreign_asset_approvals { limit: ::core::primitive::u32 },
					#[codec(index = 7)]
					finish_foreign_assets_migration,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					LimitCannotBeZero,
					#[codec(index = 1)]
					ContractMetadataAlreadySet,
					#[codec(index = 2)]
					ContractNotExist,
					#[codec(index = 3)]
					SymbolTooLong,
					#[codec(index = 4)]
					NameTooLong,
					#[codec(index = 5)]
					AssetTypeNotFound,
					#[codec(index = 6)]
					AssetNotFound,
					#[codec(index = 7)]
					LocationNotFound,
					#[codec(index = 8)]
					MigrationNotFinished,
					#[codec(index = 9)]
					NoMigrationInProgress,
					#[codec(index = 10)]
					MintFailed,
					#[codec(index = 11)]
					ApprovalFailed,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum StateMigrationStatus {
					#[codec(index = 0)]
					NotStarted,
					#[codec(index = 1)]
					Started(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					),
					#[codec(index = 2)]
					Error(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					),
					#[codec(index = 3)]
					Complete,
				}
			}
		}
		pub mod pallet_moonbeam_orbiters {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					collator_add_orbiter { orbiter: ::bp_moonbeam::AccountId },
					#[codec(index = 1)]
					collator_remove_orbiter { orbiter: ::bp_moonbeam::AccountId },
					#[codec(index = 2)]
					orbiter_leave_collator_pool { collator: ::bp_moonbeam::AccountId },
					#[codec(index = 3)]
					orbiter_register,
					#[codec(index = 4)]
					orbiter_unregister { collators_pool_count: ::core::primitive::u32 },
					#[codec(index = 5)]
					add_collator { collator: ::bp_moonbeam::AccountId },
					#[codec(index = 6)]
					remove_collator { collator: ::bp_moonbeam::AccountId },
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					CollatorAlreadyAdded,
					#[codec(index = 1)]
					CollatorNotFound,
					#[codec(index = 2)]
					CollatorPoolTooLarge,
					#[codec(index = 3)]
					CollatorsPoolCountTooLow,
					#[codec(index = 4)]
					MinOrbiterDepositNotSet,
					#[codec(index = 5)]
					OrbiterAlreadyInPool,
					#[codec(index = 6)]
					OrbiterDepositNotFound,
					#[codec(index = 7)]
					OrbiterNotFound,
					#[codec(index = 8)]
					OrbiterStillInAPool,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					OrbiterJoinCollatorPool {
						collator: ::bp_moonbeam::AccountId,
						orbiter: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 1)]
					OrbiterLeaveCollatorPool {
						collator: ::bp_moonbeam::AccountId,
						orbiter: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 2)]
					OrbiterRewarded {
						account: ::bp_moonbeam::AccountId,
						rewards: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					OrbiterRotation {
						collator: ::bp_moonbeam::AccountId,
						old_orbiter: ::core::option::Option<::bp_moonbeam::AccountId>,
						new_orbiter: ::core::option::Option<::bp_moonbeam::AccountId>,
					},
					#[codec(index = 4)]
					OrbiterRegistered {
						account: ::bp_moonbeam::AccountId,
						deposit: ::core::primitive::u128,
					},
					#[codec(index = 5)]
					OrbiterUnregistered { account: ::bp_moonbeam::AccountId },
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct CollatorPoolInfo<_0> {
					pub orbiters: ::subxt::ext::subxt_core::alloc::vec::Vec<_0>,
					pub maybe_current_orbiter: ::core::option::Option<
						runtime_types::pallet_moonbeam_orbiters::types::CurrentOrbiter<_0>,
					>,
					pub next_orbiter: ::core::primitive::u32,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct CurrentOrbiter<_0> {
					pub account_id: _0,
					pub removed: ::core::primitive::bool,
				}
			}
		}
		pub mod pallet_multisig {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					as_multi_threshold_1 {
						other_signatories:
							::subxt::ext::subxt_core::alloc::vec::Vec<::bp_moonbeam::AccountId>,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::moonriver_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 1)]
					as_multi {
						threshold: ::core::primitive::u16,
						other_signatories:
							::subxt::ext::subxt_core::alloc::vec::Vec<::bp_moonbeam::AccountId>,
						maybe_timepoint: ::core::option::Option<
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						>,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::moonriver_runtime::RuntimeCall,
						>,
						max_weight: ::sp_weights::Weight,
					},
					#[codec(index = 2)]
					approve_as_multi {
						threshold: ::core::primitive::u16,
						other_signatories:
							::subxt::ext::subxt_core::alloc::vec::Vec<::bp_moonbeam::AccountId>,
						maybe_timepoint: ::core::option::Option<
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						>,
						call_hash: [::core::primitive::u8; 32usize],
						max_weight: ::sp_weights::Weight,
					},
					#[codec(index = 3)]
					cancel_as_multi {
						threshold: ::core::primitive::u16,
						other_signatories:
							::subxt::ext::subxt_core::alloc::vec::Vec<::bp_moonbeam::AccountId>,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						call_hash: [::core::primitive::u8; 32usize],
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					MinimumThreshold,
					#[codec(index = 1)]
					AlreadyApproved,
					#[codec(index = 2)]
					NoApprovalsNeeded,
					#[codec(index = 3)]
					TooFewSignatories,
					#[codec(index = 4)]
					TooManySignatories,
					#[codec(index = 5)]
					SignatoriesOutOfOrder,
					#[codec(index = 6)]
					SenderInSignatories,
					#[codec(index = 7)]
					NotFound,
					#[codec(index = 8)]
					NotOwner,
					#[codec(index = 9)]
					NoTimepoint,
					#[codec(index = 10)]
					WrongTimepoint,
					#[codec(index = 11)]
					UnexpectedTimepoint,
					#[codec(index = 12)]
					MaxWeightTooLow,
					#[codec(index = 13)]
					AlreadyStored,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					NewMultisig {
						approving: ::bp_moonbeam::AccountId,
						multisig: ::bp_moonbeam::AccountId,
						call_hash: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 1)]
					MultisigApproval {
						approving: ::bp_moonbeam::AccountId,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::bp_moonbeam::AccountId,
						call_hash: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 2)]
					MultisigExecuted {
						approving: ::bp_moonbeam::AccountId,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::bp_moonbeam::AccountId,
						call_hash: [::core::primitive::u8; 32usize],
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 3)]
					MultisigCancelled {
						cancelling: ::bp_moonbeam::AccountId,
						timepoint:
							runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
						multisig: ::bp_moonbeam::AccountId,
						call_hash: [::core::primitive::u8; 32usize],
					},
				}
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct Multisig<_0, _1, _2> {
				pub when: runtime_types::pallet_multisig::Timepoint<_0>,
				pub deposit: _1,
				pub depositor: _2,
				pub approvals: runtime_types::bounded_collections::bounded_vec::BoundedVec<_2>,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct Timepoint<_0> {
				pub height: _0,
				pub index: ::core::primitive::u32,
			}
		}
		pub mod pallet_parachain_staking {
			use super::runtime_types;
			pub mod auto_compound {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct AutoCompoundConfig<_0> {
					pub delegator: _0,
					pub value: runtime_types::sp_arithmetic::per_things::Percent,
				}
			}
			pub mod delegation_requests {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct CancelledScheduledRequest<_0> {
                    pub when_executable: ::core::primitive::u32,
                    pub action: runtime_types::pallet_parachain_staking::delegation_requests::DelegationAction<
                        _0,
                    >,
                }
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum DelegationAction<_0> {
					#[codec(index = 0)]
					Revoke(_0),
					#[codec(index = 1)]
					Decrease(_0),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct ScheduledRequest<_0, _1> {
                    pub delegator: _0,
                    pub when_executable: ::core::primitive::u32,
                    pub action: runtime_types::pallet_parachain_staking::delegation_requests::DelegationAction<
                        _1,
                    >,
                }
			}
			pub mod inflation {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct InflationInfo<_0> {
					pub expect: runtime_types::pallet_parachain_staking::inflation::Range<_0>,
					pub annual: runtime_types::pallet_parachain_staking::inflation::Range<
						runtime_types::sp_arithmetic::per_things::Perbill,
					>,
					pub round: runtime_types::pallet_parachain_staking::inflation::Range<
						runtime_types::sp_arithmetic::per_things::Perbill,
					>,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Range<_0> {
					pub min: _0,
					pub ideal: _0,
					pub max: _0,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
                    set_staking_expectations {
                        expectations: runtime_types::pallet_parachain_staking::inflation::Range<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 1)]
                    set_inflation {
                        schedule: runtime_types::pallet_parachain_staking::inflation::Range<
                            runtime_types::sp_arithmetic::per_things::Perbill,
                        >,
                    },
                    #[codec(index = 2)]
                    set_parachain_bond_account { new: ::bp_moonbeam::AccountId },
                    #[codec(index = 3)]
                    set_parachain_bond_reserve_percent {
                        new: runtime_types::sp_arithmetic::per_things::Percent,
                    },
                    #[codec(index = 4)]
                    set_total_selected { new: ::core::primitive::u32 },
                    #[codec(index = 5)]
                    set_collator_commission {
                        new: runtime_types::sp_arithmetic::per_things::Perbill,
                    },
                    #[codec(index = 6)]
                    set_blocks_per_round { new: ::core::primitive::u32 },
                    #[codec(index = 7)]
                    join_candidates {
                        bond: ::core::primitive::u128,
                        candidate_count: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    schedule_leave_candidates {
                        candidate_count: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    execute_leave_candidates {
                        candidate: ::bp_moonbeam::AccountId,
                        candidate_delegation_count: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    cancel_leave_candidates { candidate_count: ::core::primitive::u32 },
                    #[codec(index = 11)]
                    go_offline,
                    #[codec(index = 12)]
                    go_online,
                    #[codec(index = 13)]
                    candidate_bond_more { more: ::core::primitive::u128 },
                    #[codec(index = 14)]
                    schedule_candidate_bond_less { less: ::core::primitive::u128 },
                    #[codec(index = 15)]
                    execute_candidate_bond_less { candidate: ::bp_moonbeam::AccountId },
                    #[codec(index = 16)]
                    cancel_candidate_bond_less,
                    #[codec(index = 18)]
                    delegate_with_auto_compound {
                        candidate: ::bp_moonbeam::AccountId,
                        amount: ::core::primitive::u128,
                        auto_compound: runtime_types::sp_arithmetic::per_things::Percent,
                        candidate_delegation_count: ::core::primitive::u32,
                        candidate_auto_compounding_delegation_count: ::core::primitive::u32,
                        delegation_count: ::core::primitive::u32,
                    },
                    #[codec(index = 22)]
                    schedule_revoke_delegation { collator: ::bp_moonbeam::AccountId },
                    #[codec(index = 23)]
                    delegator_bond_more {
                        candidate: ::bp_moonbeam::AccountId,
                        more: ::core::primitive::u128,
                    },
                    #[codec(index = 24)]
                    schedule_delegator_bond_less {
                        candidate: ::bp_moonbeam::AccountId,
                        less: ::core::primitive::u128,
                    },
                    #[codec(index = 25)]
                    execute_delegation_request {
                        delegator: ::bp_moonbeam::AccountId,
                        candidate: ::bp_moonbeam::AccountId,
                    },
                    #[codec(index = 26)]
                    cancel_delegation_request { candidate: ::bp_moonbeam::AccountId },
                    #[codec(index = 27)]
                    set_auto_compound {
                        candidate: ::bp_moonbeam::AccountId,
                        value: runtime_types::sp_arithmetic::per_things::Percent,
                        candidate_auto_compounding_delegation_count_hint: ::core::primitive::u32,
                        delegation_count_hint: ::core::primitive::u32,
                    },
                    #[codec(index = 28)]
                    hotfix_remove_delegation_requests_exited_candidates {
                        candidates: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            ::bp_moonbeam::AccountId,
                        >,
                    },
                    #[codec(index = 29)]
                    notify_inactive_collator { collator: ::bp_moonbeam::AccountId },
                    #[codec(index = 30)]
                    enable_marking_offline { value: ::core::primitive::bool },
                    #[codec(index = 31)]
                    force_join_candidates {
                        account: ::bp_moonbeam::AccountId,
                        bond: ::core::primitive::u128,
                        candidate_count: ::core::primitive::u32,
                    },
                    #[codec(index = 32)]
                    set_inflation_distribution_config {
                        new: runtime_types::pallet_parachain_staking::types::InflationDistributionConfig<
                            ::bp_moonbeam::AccountId,
                        >,
                    },
                }
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					DelegatorDNE,
					#[codec(index = 1)]
					DelegatorDNEinTopNorBottom,
					#[codec(index = 2)]
					DelegatorDNEInDelegatorSet,
					#[codec(index = 3)]
					CandidateDNE,
					#[codec(index = 4)]
					DelegationDNE,
					#[codec(index = 5)]
					DelegatorExists,
					#[codec(index = 6)]
					CandidateExists,
					#[codec(index = 7)]
					CandidateBondBelowMin,
					#[codec(index = 8)]
					InsufficientBalance,
					#[codec(index = 9)]
					DelegatorBondBelowMin,
					#[codec(index = 10)]
					DelegationBelowMin,
					#[codec(index = 11)]
					AlreadyOffline,
					#[codec(index = 12)]
					AlreadyActive,
					#[codec(index = 13)]
					DelegatorAlreadyLeaving,
					#[codec(index = 14)]
					DelegatorNotLeaving,
					#[codec(index = 15)]
					DelegatorCannotLeaveYet,
					#[codec(index = 16)]
					CannotDelegateIfLeaving,
					#[codec(index = 17)]
					CandidateAlreadyLeaving,
					#[codec(index = 18)]
					CandidateNotLeaving,
					#[codec(index = 19)]
					CandidateCannotLeaveYet,
					#[codec(index = 20)]
					CannotGoOnlineIfLeaving,
					#[codec(index = 21)]
					ExceedMaxDelegationsPerDelegator,
					#[codec(index = 22)]
					AlreadyDelegatedCandidate,
					#[codec(index = 23)]
					InvalidSchedule,
					#[codec(index = 24)]
					CannotSetBelowMin,
					#[codec(index = 25)]
					RoundLengthMustBeGreaterThanTotalSelectedCollators,
					#[codec(index = 26)]
					NoWritingSameValue,
					#[codec(index = 27)]
					TotalInflationDistributionPercentExceeds100,
					#[codec(index = 28)]
					TooLowCandidateCountWeightHintJoinCandidates,
					#[codec(index = 29)]
					TooLowCandidateCountWeightHintCancelLeaveCandidates,
					#[codec(index = 30)]
					TooLowCandidateCountToLeaveCandidates,
					#[codec(index = 31)]
					TooLowDelegationCountToDelegate,
					#[codec(index = 32)]
					TooLowCandidateDelegationCountToDelegate,
					#[codec(index = 33)]
					TooLowCandidateDelegationCountToLeaveCandidates,
					#[codec(index = 34)]
					TooLowDelegationCountToLeaveDelegators,
					#[codec(index = 35)]
					PendingCandidateRequestsDNE,
					#[codec(index = 36)]
					PendingCandidateRequestAlreadyExists,
					#[codec(index = 37)]
					PendingCandidateRequestNotDueYet,
					#[codec(index = 38)]
					PendingDelegationRequestDNE,
					#[codec(index = 39)]
					PendingDelegationRequestAlreadyExists,
					#[codec(index = 40)]
					PendingDelegationRequestNotDueYet,
					#[codec(index = 41)]
					CannotDelegateLessThanOrEqualToLowestBottomWhenFull,
					#[codec(index = 42)]
					PendingDelegationRevoke,
					#[codec(index = 43)]
					TooLowDelegationCountToAutoCompound,
					#[codec(index = 44)]
					TooLowCandidateAutoCompoundingDelegationCountToAutoCompound,
					#[codec(index = 45)]
					TooLowCandidateAutoCompoundingDelegationCountToDelegate,
					#[codec(index = 46)]
					TooLowCollatorCountToNotifyAsInactive,
					#[codec(index = 47)]
					CannotBeNotifiedAsInactive,
					#[codec(index = 48)]
					TooLowCandidateAutoCompoundingDelegationCountToLeaveCandidates,
					#[codec(index = 49)]
					TooLowCandidateCountWeightHint,
					#[codec(index = 50)]
					TooLowCandidateCountWeightHintGoOffline,
					#[codec(index = 51)]
					CandidateLimitReached,
					#[codec(index = 52)]
					CannotSetAboveMaxCandidates,
					#[codec(index = 53)]
					MarkingOfflineNotEnabled,
					#[codec(index = 54)]
					CurrentRoundTooLow,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
                    NewRound {
                        starting_block: ::core::primitive::u32,
                        round: ::core::primitive::u32,
                        selected_collators_number: ::core::primitive::u32,
                        total_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    JoinedCollatorCandidates {
                        account: ::bp_moonbeam::AccountId,
                        amount_locked: ::core::primitive::u128,
                        new_total_amt_locked: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    CollatorChosen {
                        round: ::core::primitive::u32,
                        collator_account: ::bp_moonbeam::AccountId,
                        total_exposed_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    CandidateBondLessRequested {
                        candidate: ::bp_moonbeam::AccountId,
                        amount_to_decrease: ::core::primitive::u128,
                        execute_round: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    CandidateBondedMore {
                        candidate: ::bp_moonbeam::AccountId,
                        amount: ::core::primitive::u128,
                        new_total_bond: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    CandidateBondedLess {
                        candidate: ::bp_moonbeam::AccountId,
                        amount: ::core::primitive::u128,
                        new_bond: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    CandidateWentOffline { candidate: ::bp_moonbeam::AccountId },
                    #[codec(index = 7)]
                    CandidateBackOnline { candidate: ::bp_moonbeam::AccountId },
                    #[codec(index = 8)]
                    CandidateScheduledExit {
                        exit_allowed_round: ::core::primitive::u32,
                        candidate: ::bp_moonbeam::AccountId,
                        scheduled_exit: ::core::primitive::u32,
                    },
                    #[codec(index = 9)]
                    CancelledCandidateExit { candidate: ::bp_moonbeam::AccountId },
                    #[codec(index = 10)]
                    CancelledCandidateBondLess {
                        candidate: ::bp_moonbeam::AccountId,
                        amount: ::core::primitive::u128,
                        execute_round: ::core::primitive::u32,
                    },
                    #[codec(index = 11)]
                    CandidateLeft {
                        ex_candidate: ::bp_moonbeam::AccountId,
                        unlocked_amount: ::core::primitive::u128,
                        new_total_amt_locked: ::core::primitive::u128,
                    },
                    #[codec(index = 12)]
                    DelegationDecreaseScheduled {
                        delegator: ::bp_moonbeam::AccountId,
                        candidate: ::bp_moonbeam::AccountId,
                        amount_to_decrease: ::core::primitive::u128,
                        execute_round: ::core::primitive::u32,
                    },
                    #[codec(index = 13)]
                    DelegationIncreased {
                        delegator: ::bp_moonbeam::AccountId,
                        candidate: ::bp_moonbeam::AccountId,
                        amount: ::core::primitive::u128,
                        in_top: ::core::primitive::bool,
                    },
                    #[codec(index = 14)]
                    DelegationDecreased {
                        delegator: ::bp_moonbeam::AccountId,
                        candidate: ::bp_moonbeam::AccountId,
                        amount: ::core::primitive::u128,
                        in_top: ::core::primitive::bool,
                    },
                    #[codec(index = 15)]
                    DelegatorExitScheduled {
                        round: ::core::primitive::u32,
                        delegator: ::bp_moonbeam::AccountId,
                        scheduled_exit: ::core::primitive::u32,
                    },
                    #[codec(index = 16)]
                    DelegationRevocationScheduled {
                        round: ::core::primitive::u32,
                        delegator: ::bp_moonbeam::AccountId,
                        candidate: ::bp_moonbeam::AccountId,
                        scheduled_exit: ::core::primitive::u32,
                    },
                    #[codec(index = 17)]
                    DelegatorLeft {
                        delegator: ::bp_moonbeam::AccountId,
                        unstaked_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 18)]
                    DelegationRevoked {
                        delegator: ::bp_moonbeam::AccountId,
                        candidate: ::bp_moonbeam::AccountId,
                        unstaked_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 19)]
                    DelegationKicked {
                        delegator: ::bp_moonbeam::AccountId,
                        candidate: ::bp_moonbeam::AccountId,
                        unstaked_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 20)]
                    DelegatorExitCancelled { delegator: ::bp_moonbeam::AccountId },
                    #[codec(index = 21)]
                    CancelledDelegationRequest {
                        delegator: ::bp_moonbeam::AccountId,
                        cancelled_request: runtime_types::pallet_parachain_staking::delegation_requests::CancelledScheduledRequest<
                            ::core::primitive::u128,
                        >,
                        collator: ::bp_moonbeam::AccountId,
                    },
                    #[codec(index = 22)]
                    Delegation {
                        delegator: ::bp_moonbeam::AccountId,
                        locked_amount: ::core::primitive::u128,
                        candidate: ::bp_moonbeam::AccountId,
                        delegator_position: runtime_types::pallet_parachain_staking::types::DelegatorAdded<
                            ::core::primitive::u128,
                        >,
                        auto_compound: runtime_types::sp_arithmetic::per_things::Percent,
                    },
                    #[codec(index = 23)]
                    DelegatorLeftCandidate {
                        delegator: ::bp_moonbeam::AccountId,
                        candidate: ::bp_moonbeam::AccountId,
                        unstaked_amount: ::core::primitive::u128,
                        total_candidate_staked: ::core::primitive::u128,
                    },
                    #[codec(index = 24)]
                    Rewarded {
                        account: ::bp_moonbeam::AccountId,
                        rewards: ::core::primitive::u128,
                    },
                    #[codec(index = 25)]
                    InflationDistributed {
                        index: ::core::primitive::u32,
                        account: ::bp_moonbeam::AccountId,
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 26)]
                    InflationDistributionConfigUpdated {
                        old: runtime_types::pallet_parachain_staking::types::InflationDistributionConfig<
                            ::bp_moonbeam::AccountId,
                        >,
                        new: runtime_types::pallet_parachain_staking::types::InflationDistributionConfig<
                            ::bp_moonbeam::AccountId,
                        >,
                    },
                    #[codec(index = 27)]
                    InflationSet {
                        annual_min: runtime_types::sp_arithmetic::per_things::Perbill,
                        annual_ideal: runtime_types::sp_arithmetic::per_things::Perbill,
                        annual_max: runtime_types::sp_arithmetic::per_things::Perbill,
                        round_min: runtime_types::sp_arithmetic::per_things::Perbill,
                        round_ideal: runtime_types::sp_arithmetic::per_things::Perbill,
                        round_max: runtime_types::sp_arithmetic::per_things::Perbill,
                    },
                    #[codec(index = 28)]
                    StakeExpectationsSet {
                        expect_min: ::core::primitive::u128,
                        expect_ideal: ::core::primitive::u128,
                        expect_max: ::core::primitive::u128,
                    },
                    #[codec(index = 29)]
                    TotalSelectedSet {
                        old: ::core::primitive::u32,
                        new: ::core::primitive::u32,
                    },
                    #[codec(index = 30)]
                    CollatorCommissionSet {
                        old: runtime_types::sp_arithmetic::per_things::Perbill,
                        new: runtime_types::sp_arithmetic::per_things::Perbill,
                    },
                    #[codec(index = 31)]
                    BlocksPerRoundSet {
                        current_round: ::core::primitive::u32,
                        first_block: ::core::primitive::u32,
                        old: ::core::primitive::u32,
                        new: ::core::primitive::u32,
                        new_per_round_inflation_min: runtime_types::sp_arithmetic::per_things::Perbill,
                        new_per_round_inflation_ideal: runtime_types::sp_arithmetic::per_things::Perbill,
                        new_per_round_inflation_max: runtime_types::sp_arithmetic::per_things::Perbill,
                    },
                    #[codec(index = 32)]
                    AutoCompoundSet {
                        candidate: ::bp_moonbeam::AccountId,
                        delegator: ::bp_moonbeam::AccountId,
                        value: runtime_types::sp_arithmetic::per_things::Percent,
                    },
                    #[codec(index = 33)]
                    Compounded {
                        candidate: ::bp_moonbeam::AccountId,
                        delegator: ::bp_moonbeam::AccountId,
                        amount: ::core::primitive::u128,
                    },
                }
			}
			pub mod set {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct BoundedOrderedSet<_0>(
					pub runtime_types::bounded_collections::bounded_vec::BoundedVec<_0>,
				);
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct OrderedSet<_0>(pub ::subxt::ext::subxt_core::alloc::vec::Vec<_0>);
			}
			pub mod types {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Bond<_0, _1> {
					pub owner: _0,
					pub amount: _1,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct BondWithAutoCompound<_0, _1> {
					pub owner: _0,
					pub amount: _1,
					pub auto_compound: runtime_types::sp_arithmetic::per_things::Percent,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct CandidateBondLessRequest<_0> {
					pub amount: _0,
					pub when_executable: ::core::primitive::u32,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct CandidateMetadata<_0> {
					pub bond: _0,
					pub delegation_count: ::core::primitive::u32,
					pub total_counted: _0,
					pub lowest_top_delegation_amount: _0,
					pub highest_bottom_delegation_amount: _0,
					pub lowest_bottom_delegation_amount: _0,
					pub top_capacity:
						runtime_types::pallet_parachain_staking::types::CapacityStatus,
					pub bottom_capacity:
						runtime_types::pallet_parachain_staking::types::CapacityStatus,
					pub request: ::core::option::Option<
						runtime_types::pallet_parachain_staking::types::CandidateBondLessRequest<
							_0,
						>,
					>,
					pub status: runtime_types::pallet_parachain_staking::types::CollatorStatus,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum CapacityStatus {
					#[codec(index = 0)]
					Full,
					#[codec(index = 1)]
					Empty,
					#[codec(index = 2)]
					Partial,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct CollatorSnapshot<_0, _1> {
					pub bond: _1,
					pub delegations: ::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::pallet_parachain_staking::types::BondWithAutoCompound<
							_0,
							_1,
						>,
					>,
					pub total: _1,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum CollatorStatus {
					#[codec(index = 0)]
					Active,
					#[codec(index = 1)]
					Idle,
					#[codec(index = 2)]
					Leaving(::core::primitive::u32),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct DelayedPayout<_0> {
					pub round_issuance: _0,
					pub total_staking_reward: _0,
					pub collator_commission: runtime_types::sp_arithmetic::per_things::Perbill,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Delegations<_0, _1> {
					pub delegations: ::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::pallet_parachain_staking::types::Bond<_0, _1>,
					>,
					pub total: _1,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Delegator<_0, _1> {
					pub id: _0,
					pub delegations: runtime_types::pallet_parachain_staking::set::OrderedSet<
						runtime_types::pallet_parachain_staking::types::Bond<_0, _1>,
					>,
					pub total: _1,
					pub less_total: _1,
					pub status: runtime_types::pallet_parachain_staking::types::DelegatorStatus,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum DelegatorAdded<_0> {
					#[codec(index = 0)]
					AddedToTop { new_total: _0 },
					#[codec(index = 1)]
					AddedToBottom,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum DelegatorStatus {
					#[codec(index = 0)]
					Active,
					#[codec(index = 1)]
					Leaving(::core::primitive::u32),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct InflationDistributionAccount<_0> {
					pub account: _0,
					pub percent: runtime_types::sp_arithmetic::per_things::Percent,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct InflationDistributionConfig<_0>(
                    pub [runtime_types::pallet_parachain_staking::types::InflationDistributionAccount<
                        _0,
                    >; 2usize],
                );
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct RoundInfo<_0> {
					pub current: ::core::primitive::u32,
					pub first: _0,
					pub length: ::core::primitive::u32,
					pub first_slot: ::core::primitive::u64,
				}
			}
		}
		pub mod pallet_parameters {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					set_parameter {
						key_value:
							runtime_types::moonriver_runtime::runtime_params::RuntimeParameters,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
                    Updated {
                        key: runtime_types::moonriver_runtime::runtime_params::RuntimeParametersKey,
                        old_value: ::core::option::Option<
                            runtime_types::moonriver_runtime::runtime_params::RuntimeParametersValue,
                        >,
                        new_value: ::core::option::Option<
                            runtime_types::moonriver_runtime::runtime_params::RuntimeParametersValue,
                        >,
                    },
                }
			}
		}
		pub mod pallet_precompile_benchmarks {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					BenchmarkError,
				}
			}
		}
		pub mod pallet_preimage {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					note_preimage {
						bytes: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					},
					#[codec(index = 1)]
					unnote_preimage { hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 2)]
					request_preimage { hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 3)]
					unrequest_preimage { hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 4)]
					ensure_updated {
						hashes: ::subxt::ext::subxt_core::alloc::vec::Vec<
							::subxt::ext::subxt_core::utils::H256,
						>,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					TooBig,
					#[codec(index = 1)]
					AlreadyNoted,
					#[codec(index = 2)]
					NotAuthorized,
					#[codec(index = 3)]
					NotNoted,
					#[codec(index = 4)]
					Requested,
					#[codec(index = 5)]
					NotRequested,
					#[codec(index = 6)]
					TooMany,
					#[codec(index = 7)]
					TooFew,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Noted { hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 1)]
					Requested { hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 2)]
					Cleared { hash: ::subxt::ext::subxt_core::utils::H256 },
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum HoldReason {
					#[codec(index = 0)]
					Preimage,
				}
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum OldRequestStatus<_0, _1> {
				#[codec(index = 0)]
				Unrequested { deposit: (_0, _1), len: ::core::primitive::u32 },
				#[codec(index = 1)]
				Requested {
					deposit: ::core::option::Option<(_0, _1)>,
					count: ::core::primitive::u32,
					len: ::core::option::Option<::core::primitive::u32>,
				},
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum RequestStatus<_0, _1> {
				#[codec(index = 0)]
				Unrequested { ticket: (_0, _1), len: ::core::primitive::u32 },
				#[codec(index = 1)]
				Requested {
					maybe_ticket: ::core::option::Option<(_0, _1)>,
					count: ::core::primitive::u32,
					maybe_len: ::core::option::Option<::core::primitive::u32>,
				},
			}
		}
		pub mod pallet_proxy {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					proxy {
						real: ::bp_moonbeam::AccountId,
						force_proxy_type:
							::core::option::Option<runtime_types::moonriver_runtime::ProxyType>,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::moonriver_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 1)]
					add_proxy {
						delegate: ::bp_moonbeam::AccountId,
						proxy_type: runtime_types::moonriver_runtime::ProxyType,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					remove_proxy {
						delegate: ::bp_moonbeam::AccountId,
						proxy_type: runtime_types::moonriver_runtime::ProxyType,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					remove_proxies,
					#[codec(index = 4)]
					create_pure {
						proxy_type: runtime_types::moonriver_runtime::ProxyType,
						delay: ::core::primitive::u32,
						index: ::core::primitive::u16,
					},
					#[codec(index = 5)]
					kill_pure {
						spawner: ::bp_moonbeam::AccountId,
						proxy_type: runtime_types::moonriver_runtime::ProxyType,
						index: ::core::primitive::u16,
						#[codec(compact)]
						height: ::core::primitive::u32,
						#[codec(compact)]
						ext_index: ::core::primitive::u32,
					},
					#[codec(index = 6)]
					announce {
						real: ::bp_moonbeam::AccountId,
						call_hash: ::subxt::ext::subxt_core::utils::H256,
					},
					#[codec(index = 7)]
					remove_announcement {
						real: ::bp_moonbeam::AccountId,
						call_hash: ::subxt::ext::subxt_core::utils::H256,
					},
					#[codec(index = 8)]
					reject_announcement {
						delegate: ::bp_moonbeam::AccountId,
						call_hash: ::subxt::ext::subxt_core::utils::H256,
					},
					#[codec(index = 9)]
					proxy_announced {
						delegate: ::bp_moonbeam::AccountId,
						real: ::bp_moonbeam::AccountId,
						force_proxy_type:
							::core::option::Option<runtime_types::moonriver_runtime::ProxyType>,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::moonriver_runtime::RuntimeCall,
						>,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					TooMany,
					#[codec(index = 1)]
					NotFound,
					#[codec(index = 2)]
					NotProxy,
					#[codec(index = 3)]
					Unproxyable,
					#[codec(index = 4)]
					Duplicate,
					#[codec(index = 5)]
					NoPermission,
					#[codec(index = 6)]
					Unannounced,
					#[codec(index = 7)]
					NoSelfProxy,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					ProxyExecuted {
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 1)]
					PureCreated {
						pure: ::bp_moonbeam::AccountId,
						who: ::bp_moonbeam::AccountId,
						proxy_type: runtime_types::moonriver_runtime::ProxyType,
						disambiguation_index: ::core::primitive::u16,
					},
					#[codec(index = 2)]
					Announced {
						real: ::bp_moonbeam::AccountId,
						proxy: ::bp_moonbeam::AccountId,
						call_hash: ::subxt::ext::subxt_core::utils::H256,
					},
					#[codec(index = 3)]
					ProxyAdded {
						delegator: ::bp_moonbeam::AccountId,
						delegatee: ::bp_moonbeam::AccountId,
						proxy_type: runtime_types::moonriver_runtime::ProxyType,
						delay: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					ProxyRemoved {
						delegator: ::bp_moonbeam::AccountId,
						delegatee: ::bp_moonbeam::AccountId,
						proxy_type: runtime_types::moonriver_runtime::ProxyType,
						delay: ::core::primitive::u32,
					},
				}
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct Announcement<_0, _1, _2> {
				pub real: _0,
				pub call_hash: _1,
				pub height: _2,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct ProxyDefinition<_0, _1, _2> {
				pub delegate: _0,
				pub proxy_type: _1,
				pub delay: _2,
			}
		}
		pub mod pallet_randomness {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					set_babe_randomness_results,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					RequestCounterOverflowed,
					#[codec(index = 1)]
					RequestFeeOverflowed,
					#[codec(index = 2)]
					MustRequestAtLeastOneWord,
					#[codec(index = 3)]
					CannotRequestMoreWordsThanMax,
					#[codec(index = 4)]
					CannotRequestRandomnessAfterMaxDelay,
					#[codec(index = 5)]
					CannotRequestRandomnessBeforeMinDelay,
					#[codec(index = 6)]
					RequestDNE,
					#[codec(index = 7)]
					RequestCannotYetBeFulfilled,
					#[codec(index = 8)]
					OnlyRequesterCanIncreaseFee,
					#[codec(index = 9)]
					RequestHasNotExpired,
					#[codec(index = 10)]
					RandomnessResultDNE,
					#[codec(index = 11)]
					RandomnessResultNotFilled,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					RandomnessRequestedBabeEpoch {
						id: ::core::primitive::u64,
						refund_address: ::subxt::ext::subxt_core::utils::H160,
						contract_address: ::subxt::ext::subxt_core::utils::H160,
						fee: ::core::primitive::u128,
						gas_limit: ::core::primitive::u64,
						num_words: ::core::primitive::u8,
						salt: ::subxt::ext::subxt_core::utils::H256,
						earliest_epoch: ::core::primitive::u64,
					},
					#[codec(index = 1)]
					RandomnessRequestedLocal {
						id: ::core::primitive::u64,
						refund_address: ::subxt::ext::subxt_core::utils::H160,
						contract_address: ::subxt::ext::subxt_core::utils::H160,
						fee: ::core::primitive::u128,
						gas_limit: ::core::primitive::u64,
						num_words: ::core::primitive::u8,
						salt: ::subxt::ext::subxt_core::utils::H256,
						earliest_block: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					RequestFulfilled { id: ::core::primitive::u64 },
					#[codec(index = 3)]
					RequestFeeIncreased {
						id: ::core::primitive::u64,
						new_fee: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					RequestExpirationExecuted { id: ::core::primitive::u64 },
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct RandomnessResult<_0> {
					pub randomness: ::core::option::Option<_0>,
					pub request_count: ::core::primitive::u64,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Request<_0, _1> {
					pub refund_address: ::subxt::ext::subxt_core::utils::H160,
					pub contract_address: ::subxt::ext::subxt_core::utils::H160,
					pub fee: _0,
					pub gas_limit: ::core::primitive::u64,
					pub num_words: ::core::primitive::u8,
					pub salt: ::subxt::ext::subxt_core::utils::H256,
					pub info: _1,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum RequestInfo {
					#[codec(index = 0)]
					BabeEpoch(::core::primitive::u64, ::core::primitive::u64),
					#[codec(index = 1)]
					Local(::core::primitive::u32, ::core::primitive::u32),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct RequestState {
					pub request: runtime_types::pallet_randomness::types::Request<
						::core::primitive::u128,
						runtime_types::pallet_randomness::types::RequestInfo,
					>,
					pub deposit: ::core::primitive::u128,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum RequestType {
					#[codec(index = 0)]
					BabeEpoch(::core::primitive::u64),
					#[codec(index = 1)]
					Local(::core::primitive::u32),
				}
			}
		}
		pub mod pallet_referenda {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					submit {
						proposal_origin: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::moonriver_runtime::OriginCaller,
						>,
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::moonriver_runtime::RuntimeCall,
							::sp_runtime::traits::BlakeTwo256,
						>,
						enactment_moment:
							runtime_types::frame_support::traits::schedule::DispatchTime<
								::core::primitive::u32,
							>,
					},
					#[codec(index = 1)]
					place_decision_deposit { index: ::core::primitive::u32 },
					#[codec(index = 2)]
					refund_decision_deposit { index: ::core::primitive::u32 },
					#[codec(index = 3)]
					cancel { index: ::core::primitive::u32 },
					#[codec(index = 4)]
					kill { index: ::core::primitive::u32 },
					#[codec(index = 5)]
					nudge_referendum { index: ::core::primitive::u32 },
					#[codec(index = 6)]
					one_fewer_deciding { track: ::core::primitive::u16 },
					#[codec(index = 7)]
					refund_submission_deposit { index: ::core::primitive::u32 },
					#[codec(index = 8)]
					set_metadata {
						index: ::core::primitive::u32,
						maybe_hash: ::core::option::Option<::subxt::ext::subxt_core::utils::H256>,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					NotOngoing,
					#[codec(index = 1)]
					HasDeposit,
					#[codec(index = 2)]
					BadTrack,
					#[codec(index = 3)]
					Full,
					#[codec(index = 4)]
					QueueEmpty,
					#[codec(index = 5)]
					BadReferendum,
					#[codec(index = 6)]
					NothingToDo,
					#[codec(index = 7)]
					NoTrack,
					#[codec(index = 8)]
					Unfinished,
					#[codec(index = 9)]
					NoPermission,
					#[codec(index = 10)]
					NoDeposit,
					#[codec(index = 11)]
					BadStatus,
					#[codec(index = 12)]
					PreimageNotExist,
					#[codec(index = 13)]
					PreimageStoredWithDifferentLength,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Submitted {
						index: ::core::primitive::u32,
						track: ::core::primitive::u16,
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::moonriver_runtime::RuntimeCall,
							::sp_runtime::traits::BlakeTwo256,
						>,
					},
					#[codec(index = 1)]
					DecisionDepositPlaced {
						index: ::core::primitive::u32,
						who: ::bp_moonbeam::AccountId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					DecisionDepositRefunded {
						index: ::core::primitive::u32,
						who: ::bp_moonbeam::AccountId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 3)]
					DepositSlashed {
						who: ::bp_moonbeam::AccountId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 4)]
					DecisionStarted {
						index: ::core::primitive::u32,
						track: ::core::primitive::u16,
						proposal: runtime_types::frame_support::traits::preimages::Bounded<
							runtime_types::moonriver_runtime::RuntimeCall,
							::sp_runtime::traits::BlakeTwo256,
						>,
						tally: runtime_types::pallet_conviction_voting::types::Tally<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 5)]
					ConfirmStarted { index: ::core::primitive::u32 },
					#[codec(index = 6)]
					ConfirmAborted { index: ::core::primitive::u32 },
					#[codec(index = 7)]
					Confirmed {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_conviction_voting::types::Tally<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 8)]
					Approved { index: ::core::primitive::u32 },
					#[codec(index = 9)]
					Rejected {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_conviction_voting::types::Tally<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 10)]
					TimedOut {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_conviction_voting::types::Tally<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 11)]
					Cancelled {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_conviction_voting::types::Tally<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 12)]
					Killed {
						index: ::core::primitive::u32,
						tally: runtime_types::pallet_conviction_voting::types::Tally<
							::core::primitive::u128,
						>,
					},
					#[codec(index = 13)]
					SubmissionDepositRefunded {
						index: ::core::primitive::u32,
						who: ::bp_moonbeam::AccountId,
						amount: ::core::primitive::u128,
					},
					#[codec(index = 14)]
					MetadataSet {
						index: ::core::primitive::u32,
						hash: ::subxt::ext::subxt_core::utils::H256,
					},
					#[codec(index = 15)]
					MetadataCleared {
						index: ::core::primitive::u32,
						hash: ::subxt::ext::subxt_core::utils::H256,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Curve {
					#[codec(index = 0)]
					LinearDecreasing {
						length: runtime_types::sp_arithmetic::per_things::Perbill,
						floor: runtime_types::sp_arithmetic::per_things::Perbill,
						ceil: runtime_types::sp_arithmetic::per_things::Perbill,
					},
					#[codec(index = 1)]
					SteppedDecreasing {
						begin: runtime_types::sp_arithmetic::per_things::Perbill,
						end: runtime_types::sp_arithmetic::per_things::Perbill,
						step: runtime_types::sp_arithmetic::per_things::Perbill,
						period: runtime_types::sp_arithmetic::per_things::Perbill,
					},
					#[codec(index = 2)]
					Reciprocal {
						factor: runtime_types::sp_arithmetic::fixed_point::FixedI64,
						x_offset: runtime_types::sp_arithmetic::fixed_point::FixedI64,
						y_offset: runtime_types::sp_arithmetic::fixed_point::FixedI64,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct DecidingStatus<_0> {
					pub since: _0,
					pub confirming: ::core::option::Option<_0>,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Deposit<_0, _1> {
					pub who: _0,
					pub amount: _1,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum ReferendumInfo<_0, _1, _2, _3, _4, _5, _6, _7> {
					#[codec(index = 0)]
					Ongoing(
						runtime_types::pallet_referenda::types::ReferendumStatus<
							_0,
							_1,
							_2,
							_3,
							_4,
							_5,
							_6,
							_7,
						>,
					),
					#[codec(index = 1)]
					Approved(
						_2,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
					),
					#[codec(index = 2)]
					Rejected(
						_2,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
					),
					#[codec(index = 3)]
					Cancelled(
						_2,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
					),
					#[codec(index = 4)]
					TimedOut(
						_2,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
						::core::option::Option<
							runtime_types::pallet_referenda::types::Deposit<_6, _4>,
						>,
					),
					#[codec(index = 5)]
					Killed(_2),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct ReferendumStatus<_0, _1, _2, _3, _4, _5, _6, _7> {
					pub track: _0,
					pub origin: _1,
					pub proposal: _3,
					pub enactment: runtime_types::frame_support::traits::schedule::DispatchTime<_2>,
					pub submitted: _2,
					pub submission_deposit: runtime_types::pallet_referenda::types::Deposit<_6, _4>,
					pub decision_deposit: ::core::option::Option<
						runtime_types::pallet_referenda::types::Deposit<_6, _4>,
					>,
					pub deciding: ::core::option::Option<
						runtime_types::pallet_referenda::types::DecidingStatus<_2>,
					>,
					pub tally: _5,
					pub in_queue: ::core::primitive::bool,
					pub alarm: ::core::option::Option<(_2, _7)>,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct TrackInfo<_0, _1> {
					pub name: ::subxt::ext::subxt_core::alloc::string::String,
					pub max_deciding: ::core::primitive::u32,
					pub decision_deposit: _0,
					pub prepare_period: _1,
					pub decision_period: _1,
					pub confirm_period: _1,
					pub min_enactment_period: _1,
					pub min_approval: runtime_types::pallet_referenda::types::Curve,
					pub min_support: runtime_types::pallet_referenda::types::Curve,
				}
			}
		}
		pub mod pallet_root_testing {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					fill_block { ratio: runtime_types::sp_arithmetic::per_things::Perbill },
					#[codec(index = 1)]
					trigger_defensive,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					DefensiveTestCall,
				}
			}
		}
		pub mod pallet_scheduler {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					schedule {
						when: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::moonriver_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 1)]
					cancel { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 2)]
					schedule_named {
						id: [::core::primitive::u8; 32usize],
						when: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::moonriver_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 3)]
					cancel_named { id: [::core::primitive::u8; 32usize] },
					#[codec(index = 4)]
					schedule_after {
						after: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::moonriver_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 5)]
					schedule_named_after {
						id: [::core::primitive::u8; 32usize],
						after: ::core::primitive::u32,
						maybe_periodic: ::core::option::Option<(
							::core::primitive::u32,
							::core::primitive::u32,
						)>,
						priority: ::core::primitive::u8,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::moonriver_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 6)]
					set_retry {
						task: (::core::primitive::u32, ::core::primitive::u32),
						retries: ::core::primitive::u8,
						period: ::core::primitive::u32,
					},
					#[codec(index = 7)]
					set_retry_named {
						id: [::core::primitive::u8; 32usize],
						retries: ::core::primitive::u8,
						period: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					cancel_retry { task: (::core::primitive::u32, ::core::primitive::u32) },
					#[codec(index = 9)]
					cancel_retry_named { id: [::core::primitive::u8; 32usize] },
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					FailedToSchedule,
					#[codec(index = 1)]
					NotFound,
					#[codec(index = 2)]
					TargetBlockNumberInPast,
					#[codec(index = 3)]
					RescheduleNoChange,
					#[codec(index = 4)]
					Named,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Scheduled { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 1)]
					Canceled { when: ::core::primitive::u32, index: ::core::primitive::u32 },
					#[codec(index = 2)]
					Dispatched {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
					#[codec(index = 3)]
					RetrySet {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
						period: ::core::primitive::u32,
						retries: ::core::primitive::u8,
					},
					#[codec(index = 4)]
					RetryCancelled {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
					#[codec(index = 5)]
					CallUnavailable {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
					#[codec(index = 6)]
					PeriodicFailed {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
					#[codec(index = 7)]
					RetryFailed {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
					#[codec(index = 8)]
					PermanentlyOverweight {
						task: (::core::primitive::u32, ::core::primitive::u32),
						id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
					},
				}
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct RetryConfig<_0> {
				pub total_retries: ::core::primitive::u8,
				pub remaining: ::core::primitive::u8,
				pub period: _0,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct Scheduled<_0, _1, _2, _3, _4> {
				pub maybe_id: ::core::option::Option<_0>,
				pub priority: ::core::primitive::u8,
				pub call: _1,
				pub maybe_periodic: ::core::option::Option<(_2, _2)>,
				pub origin: _3,
				#[codec(skip)]
				pub __ignore: ::core::marker::PhantomData<_4>,
			}
		}
		pub mod pallet_timestamp {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					set {
						#[codec(compact)]
						now: ::core::primitive::u64,
					},
				}
			}
		}
		pub mod pallet_transaction_payment {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					TransactionFeePaid {
						who: ::bp_moonbeam::AccountId,
						actual_fee: ::core::primitive::u128,
						tip: ::core::primitive::u128,
					},
				}
			}
			pub mod types {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct FeeDetails<_0> {
					pub inclusion_fee: ::core::option::Option<
						runtime_types::pallet_transaction_payment::types::InclusionFee<_0>,
					>,
					pub tip: _0,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct InclusionFee<_0> {
					pub base_fee: _0,
					pub len_fee: _0,
					pub adjusted_weight_fee: _0,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct RuntimeDispatchInfo<_0, _1> {
					pub weight: _1,
					pub class: runtime_types::frame_support::dispatch::DispatchClass,
					pub partial_fee: _0,
				}
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct ChargeTransactionPayment(#[codec(compact)] pub ::core::primitive::u128);
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum Releases {
				#[codec(index = 0)]
				V1Ancient,
				#[codec(index = 1)]
				V2,
			}
		}
		pub mod pallet_treasury {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 3)]
					spend_local {
						#[codec(compact)]
						amount: ::core::primitive::u128,
						beneficiary: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 4)]
					remove_approval {
						#[codec(compact)]
						proposal_id: ::core::primitive::u32,
					},
					#[codec(index = 5)]
					spend {
						asset_kind: ::subxt::ext::subxt_core::alloc::boxed::Box<()>,
						#[codec(compact)]
						amount: ::core::primitive::u128,
						beneficiary:
							::subxt::ext::subxt_core::alloc::boxed::Box<::bp_moonbeam::AccountId>,
						valid_from: ::core::option::Option<::core::primitive::u32>,
					},
					#[codec(index = 6)]
					payout { index: ::core::primitive::u32 },
					#[codec(index = 7)]
					check_status { index: ::core::primitive::u32 },
					#[codec(index = 8)]
					void_spend { index: ::core::primitive::u32 },
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					InvalidIndex,
					#[codec(index = 1)]
					TooManyApprovals,
					#[codec(index = 2)]
					InsufficientPermission,
					#[codec(index = 3)]
					ProposalNotApproved,
					#[codec(index = 4)]
					FailedToConvertBalance,
					#[codec(index = 5)]
					SpendExpired,
					#[codec(index = 6)]
					EarlyPayout,
					#[codec(index = 7)]
					AlreadyAttempted,
					#[codec(index = 8)]
					PayoutError,
					#[codec(index = 9)]
					NotAttempted,
					#[codec(index = 10)]
					Inconclusive,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Spending { budget_remaining: ::core::primitive::u128 },
					#[codec(index = 1)]
					Awarded {
						proposal_index: ::core::primitive::u32,
						award: ::core::primitive::u128,
						account: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 2)]
					Burnt { burnt_funds: ::core::primitive::u128 },
					#[codec(index = 3)]
					Rollover { rollover_balance: ::core::primitive::u128 },
					#[codec(index = 4)]
					Deposit { value: ::core::primitive::u128 },
					#[codec(index = 5)]
					SpendApproved {
						proposal_index: ::core::primitive::u32,
						amount: ::core::primitive::u128,
						beneficiary: ::bp_moonbeam::AccountId,
					},
					#[codec(index = 6)]
					UpdatedInactive {
						reactivated: ::core::primitive::u128,
						deactivated: ::core::primitive::u128,
					},
					#[codec(index = 7)]
					AssetSpendApproved {
						index: ::core::primitive::u32,
						asset_kind: (),
						amount: ::core::primitive::u128,
						beneficiary: ::bp_moonbeam::AccountId,
						valid_from: ::core::primitive::u32,
						expire_at: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					AssetSpendVoided { index: ::core::primitive::u32 },
					#[codec(index = 9)]
					Paid { index: ::core::primitive::u32, payment_id: () },
					#[codec(index = 10)]
					PaymentFailed { index: ::core::primitive::u32, payment_id: () },
					#[codec(index = 11)]
					SpendProcessed { index: ::core::primitive::u32 },
				}
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum PaymentState<_0> {
				#[codec(index = 0)]
				Pending,
				#[codec(index = 1)]
				Attempted { id: _0 },
				#[codec(index = 2)]
				Failed,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct Proposal<_0, _1> {
				pub proposer: _0,
				pub value: _1,
				pub beneficiary: _0,
				pub bond: _1,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct SpendStatus<_0, _1, _2, _3, _4> {
				pub asset_kind: _0,
				pub amount: _1,
				pub beneficiary: _2,
				pub valid_from: _3,
				pub expire_at: _3,
				pub status: runtime_types::pallet_treasury::PaymentState<_0>,
				#[codec(skip)]
				pub __ignore: ::core::marker::PhantomData<_4>,
			}
		}
		pub mod pallet_utility {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					batch {
						calls: ::subxt::ext::subxt_core::alloc::vec::Vec<
							runtime_types::moonriver_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 1)]
					as_derivative {
						index: ::core::primitive::u16,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::moonriver_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 2)]
					batch_all {
						calls: ::subxt::ext::subxt_core::alloc::vec::Vec<
							runtime_types::moonriver_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 3)]
					dispatch_as {
						as_origin: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::moonriver_runtime::OriginCaller,
						>,
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::moonriver_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 4)]
					force_batch {
						calls: ::subxt::ext::subxt_core::alloc::vec::Vec<
							runtime_types::moonriver_runtime::RuntimeCall,
						>,
					},
					#[codec(index = 5)]
					with_weight {
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::moonriver_runtime::RuntimeCall,
						>,
						weight: ::sp_weights::Weight,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					TooManyCalls,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					BatchInterrupted {
						index: ::core::primitive::u32,
						error: runtime_types::sp_runtime::DispatchError,
					},
					#[codec(index = 1)]
					BatchCompleted,
					#[codec(index = 2)]
					BatchCompletedWithErrors,
					#[codec(index = 3)]
					ItemCompleted,
					#[codec(index = 4)]
					ItemFailed { error: runtime_types::sp_runtime::DispatchError },
					#[codec(index = 5)]
					DispatchedAs {
						result:
							::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
					},
				}
			}
		}
		pub mod pallet_whitelist {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					whitelist_call { call_hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 1)]
					remove_whitelisted_call { call_hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 2)]
					dispatch_whitelisted_call {
						call_hash: ::subxt::ext::subxt_core::utils::H256,
						call_encoded_len: ::core::primitive::u32,
						call_weight_witness: ::sp_weights::Weight,
					},
					#[codec(index = 3)]
					dispatch_whitelisted_call_with_preimage {
						call: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::moonriver_runtime::RuntimeCall,
						>,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					UnavailablePreImage,
					#[codec(index = 1)]
					UndecodableCall,
					#[codec(index = 2)]
					InvalidCallWeightWitness,
					#[codec(index = 3)]
					CallIsNotWhitelisted,
					#[codec(index = 4)]
					CallAlreadyWhitelisted,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					CallWhitelisted { call_hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 1)]
					WhitelistedCallRemoved { call_hash: ::subxt::ext::subxt_core::utils::H256 },
					#[codec(index = 2)]
					WhitelistedCallDispatched {
						call_hash: ::subxt::ext::subxt_core::utils::H256,
						result: ::core::result::Result<
							runtime_types::frame_support::dispatch::PostDispatchInfo,
							runtime_types::sp_runtime::DispatchErrorWithPostInfo<
								runtime_types::frame_support::dispatch::PostDispatchInfo,
							>,
						>,
					},
				}
			}
		}
		pub mod pallet_xcm {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
                    send {
                        dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedLocation,
                        >,
                        message: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedXcm,
                        >,
                    },
                    #[codec(index = 1)]
                    teleport_assets {
                        dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedLocation,
                        >,
                        beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedLocation,
                        >,
                        assets: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedAssets,
                        >,
                        fee_asset_item: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    reserve_transfer_assets {
                        dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedLocation,
                        >,
                        beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedLocation,
                        >,
                        assets: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedAssets,
                        >,
                        fee_asset_item: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    execute {
                        message: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedXcm,
                        >,
                        max_weight: ::sp_weights::Weight,
                    },
                    #[codec(index = 4)]
                    force_xcm_version {
                        location: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::staging_xcm::v4::location::Location,
                        >,
                        version: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    force_default_xcm_version {
                        maybe_xcm_version: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 6)]
                    force_subscribe_version_notify {
                        location: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedLocation,
                        >,
                    },
                    #[codec(index = 7)]
                    force_unsubscribe_version_notify {
                        location: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedLocation,
                        >,
                    },
                    #[codec(index = 8)]
                    limited_reserve_transfer_assets {
                        dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedLocation,
                        >,
                        beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedLocation,
                        >,
                        assets: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedAssets,
                        >,
                        fee_asset_item: ::core::primitive::u32,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 9)]
                    limited_teleport_assets {
                        dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedLocation,
                        >,
                        beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedLocation,
                        >,
                        assets: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedAssets,
                        >,
                        fee_asset_item: ::core::primitive::u32,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 10)]
                    force_suspension { suspended: ::core::primitive::bool },
                    #[codec(index = 11)]
                    transfer_assets {
                        dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedLocation,
                        >,
                        beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedLocation,
                        >,
                        assets: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedAssets,
                        >,
                        fee_asset_item: ::core::primitive::u32,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                    #[codec(index = 12)]
                    claim_assets {
                        assets: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedAssets,
                        >,
                        beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedLocation,
                        >,
                    },
                    #[codec(index = 13)]
                    transfer_assets_using_type_and_then {
                        dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedLocation,
                        >,
                        assets: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedAssets,
                        >,
                        assets_transfer_type: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::staging_xcm_executor::traits::asset_transfer::TransferType,
                        >,
                        remote_fees_id: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedAssetId,
                        >,
                        fees_transfer_type: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::staging_xcm_executor::traits::asset_transfer::TransferType,
                        >,
                        custom_xcm_on_dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::xcm::VersionedXcm,
                        >,
                        weight_limit: runtime_types::xcm::v3::WeightLimit,
                    },
                }
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					Unreachable,
					#[codec(index = 1)]
					SendFailure,
					#[codec(index = 2)]
					Filtered,
					#[codec(index = 3)]
					UnweighableMessage,
					#[codec(index = 4)]
					DestinationNotInvertible,
					#[codec(index = 5)]
					Empty,
					#[codec(index = 6)]
					CannotReanchor,
					#[codec(index = 7)]
					TooManyAssets,
					#[codec(index = 8)]
					InvalidOrigin,
					#[codec(index = 9)]
					BadVersion,
					#[codec(index = 10)]
					BadLocation,
					#[codec(index = 11)]
					NoSubscription,
					#[codec(index = 12)]
					AlreadySubscribed,
					#[codec(index = 13)]
					CannotCheckOutTeleport,
					#[codec(index = 14)]
					LowBalance,
					#[codec(index = 15)]
					TooManyLocks,
					#[codec(index = 16)]
					AccountNotSovereign,
					#[codec(index = 17)]
					FeesNotMet,
					#[codec(index = 18)]
					LockNotFound,
					#[codec(index = 19)]
					InUse,
					#[codec(index = 21)]
					InvalidAssetUnknownReserve,
					#[codec(index = 22)]
					InvalidAssetUnsupportedReserve,
					#[codec(index = 23)]
					TooManyReserves,
					#[codec(index = 24)]
					LocalExecutionIncomplete,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					Attempted { outcome: runtime_types::staging_xcm::v4::traits::Outcome },
					#[codec(index = 1)]
					Sent {
						origin: runtime_types::staging_xcm::v4::location::Location,
						destination: runtime_types::staging_xcm::v4::location::Location,
						message: runtime_types::staging_xcm::v4::Xcm,
						message_id: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 2)]
					UnexpectedResponse {
						origin: runtime_types::staging_xcm::v4::location::Location,
						query_id: ::core::primitive::u64,
					},
					#[codec(index = 3)]
					ResponseReady {
						query_id: ::core::primitive::u64,
						response: runtime_types::staging_xcm::v4::Response,
					},
					#[codec(index = 4)]
					Notified {
						query_id: ::core::primitive::u64,
						pallet_index: ::core::primitive::u8,
						call_index: ::core::primitive::u8,
					},
					#[codec(index = 5)]
					NotifyOverweight {
						query_id: ::core::primitive::u64,
						pallet_index: ::core::primitive::u8,
						call_index: ::core::primitive::u8,
						actual_weight: ::sp_weights::Weight,
						max_budgeted_weight: ::sp_weights::Weight,
					},
					#[codec(index = 6)]
					NotifyDispatchError {
						query_id: ::core::primitive::u64,
						pallet_index: ::core::primitive::u8,
						call_index: ::core::primitive::u8,
					},
					#[codec(index = 7)]
					NotifyDecodeFailed {
						query_id: ::core::primitive::u64,
						pallet_index: ::core::primitive::u8,
						call_index: ::core::primitive::u8,
					},
					#[codec(index = 8)]
					InvalidResponder {
						origin: runtime_types::staging_xcm::v4::location::Location,
						query_id: ::core::primitive::u64,
						expected_location: ::core::option::Option<
							runtime_types::staging_xcm::v4::location::Location,
						>,
					},
					#[codec(index = 9)]
					InvalidResponderVersion {
						origin: runtime_types::staging_xcm::v4::location::Location,
						query_id: ::core::primitive::u64,
					},
					#[codec(index = 10)]
					ResponseTaken { query_id: ::core::primitive::u64 },
					#[codec(index = 11)]
					AssetsTrapped {
						hash: ::subxt::ext::subxt_core::utils::H256,
						origin: runtime_types::staging_xcm::v4::location::Location,
						assets: runtime_types::xcm::VersionedAssets,
					},
					#[codec(index = 12)]
					VersionChangeNotified {
						destination: runtime_types::staging_xcm::v4::location::Location,
						result: ::core::primitive::u32,
						cost: runtime_types::staging_xcm::v4::asset::Assets,
						message_id: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 13)]
					SupportedVersionChanged {
						location: runtime_types::staging_xcm::v4::location::Location,
						version: ::core::primitive::u32,
					},
					#[codec(index = 14)]
					NotifyTargetSendFail {
						location: runtime_types::staging_xcm::v4::location::Location,
						query_id: ::core::primitive::u64,
						error: runtime_types::xcm::v3::traits::Error,
					},
					#[codec(index = 15)]
					NotifyTargetMigrationFail {
						location: runtime_types::xcm::VersionedLocation,
						query_id: ::core::primitive::u64,
					},
					#[codec(index = 16)]
					InvalidQuerierVersion {
						origin: runtime_types::staging_xcm::v4::location::Location,
						query_id: ::core::primitive::u64,
					},
					#[codec(index = 17)]
					InvalidQuerier {
						origin: runtime_types::staging_xcm::v4::location::Location,
						query_id: ::core::primitive::u64,
						expected_querier: runtime_types::staging_xcm::v4::location::Location,
						maybe_actual_querier: ::core::option::Option<
							runtime_types::staging_xcm::v4::location::Location,
						>,
					},
					#[codec(index = 18)]
					VersionNotifyStarted {
						destination: runtime_types::staging_xcm::v4::location::Location,
						cost: runtime_types::staging_xcm::v4::asset::Assets,
						message_id: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 19)]
					VersionNotifyRequested {
						destination: runtime_types::staging_xcm::v4::location::Location,
						cost: runtime_types::staging_xcm::v4::asset::Assets,
						message_id: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 20)]
					VersionNotifyUnrequested {
						destination: runtime_types::staging_xcm::v4::location::Location,
						cost: runtime_types::staging_xcm::v4::asset::Assets,
						message_id: [::core::primitive::u8; 32usize],
					},
					#[codec(index = 21)]
					FeesPaid {
						paying: runtime_types::staging_xcm::v4::location::Location,
						fees: runtime_types::staging_xcm::v4::asset::Assets,
					},
					#[codec(index = 22)]
					AssetsClaimed {
						hash: ::subxt::ext::subxt_core::utils::H256,
						origin: runtime_types::staging_xcm::v4::location::Location,
						assets: runtime_types::xcm::VersionedAssets,
					},
					#[codec(index = 23)]
					VersionMigrationFinished { version: ::core::primitive::u32 },
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Origin {
					#[codec(index = 0)]
					Xcm(runtime_types::staging_xcm::v4::location::Location),
					#[codec(index = 1)]
					Response(runtime_types::staging_xcm::v4::location::Location),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum QueryStatus<_0> {
					#[codec(index = 0)]
					Pending {
						responder: runtime_types::xcm::VersionedLocation,
						maybe_match_querier:
							::core::option::Option<runtime_types::xcm::VersionedLocation>,
						maybe_notify:
							::core::option::Option<(::core::primitive::u8, ::core::primitive::u8)>,
						timeout: _0,
					},
					#[codec(index = 1)]
					VersionNotifier {
						origin: runtime_types::xcm::VersionedLocation,
						is_active: ::core::primitive::bool,
					},
					#[codec(index = 2)]
					Ready { response: runtime_types::xcm::VersionedResponse, at: _0 },
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct RemoteLockedFungibleRecord<_0> {
					pub amount: ::core::primitive::u128,
					pub owner: runtime_types::xcm::VersionedLocation,
					pub locker: runtime_types::xcm::VersionedLocation,
					pub consumers: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
						_0,
						::core::primitive::u128,
					)>,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum VersionMigrationStage {
					#[codec(index = 0)]
					MigrateSupportedVersion,
					#[codec(index = 1)]
					MigrateVersionNotifiers,
					#[codec(index = 2)]
					NotifyCurrentTargets(
						::core::option::Option<
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						>,
					),
					#[codec(index = 3)]
					MigrateAndNotifyOldTargets,
				}
			}
		}
		pub mod pallet_xcm_bridge {
			use super::runtime_types;
			pub mod dispatcher {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum XcmBlobMessageDispatchResult {
					#[codec(index = 0)]
					InvalidPayload,
					#[codec(index = 1)]
					Dispatched,
					#[codec(index = 2)]
					NotDispatched,
				}
			}
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					open_bridge {
						bridge_destination_universal_location:
							::subxt::ext::subxt_core::alloc::boxed::Box<
								runtime_types::xcm::VersionedInteriorLocation,
							>,
						maybe_notify:
							::core::option::Option<runtime_types::bp_xcm_bridge::Receiver>,
					},
					#[codec(index = 1)]
					close_bridge {
						bridge_destination_universal_location:
							::subxt::ext::subxt_core::alloc::boxed::Box<
								runtime_types::xcm::VersionedInteriorLocation,
							>,
						may_prune_messages: ::core::primitive::u64,
					},
					#[codec(index = 2)]
					update_notification_receiver {
						bridge_destination_universal_location:
							::subxt::ext::subxt_core::alloc::boxed::Box<
								runtime_types::xcm::VersionedInteriorLocation,
							>,
						maybe_notify:
							::core::option::Option<runtime_types::bp_xcm_bridge::Receiver>,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					BridgeLocations(runtime_types::bp_xcm_bridge::BridgeLocationsError),
					#[codec(index = 1)]
					InvalidBridgeOriginAccount,
					#[codec(index = 2)]
					BridgeAlreadyExists,
					#[codec(index = 3)]
					TooManyBridgesForLocalOrigin,
					#[codec(index = 4)]
					BridgeAlreadyClosed,
					#[codec(index = 5)]
					LanesManager(
						runtime_types::pallet_bridge_messages::lanes_manager::LanesManagerError,
					),
					#[codec(index = 6)]
					UnknownBridge,
					#[codec(index = 7)]
					FailedToReserveBridgeDeposit,
					#[codec(index = 8)]
					UnsupportedXcmVersion,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					BridgeOpened {
						bridge_id: runtime_types::bp_xcm_bridge::BridgeId,
						bridge_deposit: ::core::option::Option<
							runtime_types::bp_xcm_bridge::Deposit<
								::bp_moonbeam::AccountId,
								::core::primitive::u128,
							>,
						>,
						local_endpoint: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::staging_xcm::v4::junctions::Junctions,
						>,
						remote_endpoint: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::staging_xcm::v4::junctions::Junctions,
						>,
						lane_id: ::bp_messages::LegacyLaneId,
					},
					#[codec(index = 1)]
					ClosingBridge {
						bridge_id: runtime_types::bp_xcm_bridge::BridgeId,
						lane_id: ::bp_messages::LegacyLaneId,
						pruned_messages: ::core::primitive::u64,
						enqueued_messages: ::core::primitive::u64,
					},
					#[codec(index = 2)]
					BridgePruned {
						bridge_id: runtime_types::bp_xcm_bridge::BridgeId,
						lane_id: ::bp_messages::LegacyLaneId,
						bridge_deposit: ::core::option::Option<
							runtime_types::bp_xcm_bridge::Deposit<
								::bp_moonbeam::AccountId,
								::core::primitive::u128,
							>,
						>,
						pruned_messages: ::core::primitive::u64,
					},
					#[codec(index = 3)]
					NotificationReceiverUpdated {
						bridge_id: runtime_types::bp_xcm_bridge::BridgeId,
						maybe_notify:
							::core::option::Option<runtime_types::bp_xcm_bridge::Receiver>,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum HoldReason {
					#[codec(index = 0)]
					BridgeDeposit,
				}
			}
		}
		pub mod pallet_xcm_bridge_router {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					update_bridge_status {
						bridge_id: runtime_types::bp_xcm_bridge::BridgeId,
						is_congested: ::core::primitive::bool,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					DeliveryFeeFactorDecreased {
						previous_value: runtime_types::sp_arithmetic::fixed_point::FixedU128,
						new_value: runtime_types::sp_arithmetic::fixed_point::FixedU128,
						bridge_id: runtime_types::bp_xcm_bridge::BridgeId,
					},
					#[codec(index = 1)]
					DeliveryFeeFactorIncreased {
						previous_value: runtime_types::sp_arithmetic::fixed_point::FixedU128,
						new_value: runtime_types::sp_arithmetic::fixed_point::FixedU128,
						bridge_id: runtime_types::bp_xcm_bridge::BridgeId,
					},
				}
			}
		}
		pub mod pallet_xcm_transactor {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					register { who: ::bp_moonbeam::AccountId, index: ::core::primitive::u16 },
					#[codec(index = 1)]
					deregister { index: ::core::primitive::u16 },
					#[codec(index = 2)]
					transact_through_derivative {
						dest: runtime_types::moonriver_runtime::xcm_config::Transactors,
						index: ::core::primitive::u16,
						fee: runtime_types::pallet_xcm_transactor::pallet::CurrencyPayment<
							runtime_types::moonriver_runtime::xcm_config::CurrencyId,
						>,
						inner_call:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						weight_info: runtime_types::pallet_xcm_transactor::pallet::TransactWeights,
						refund: ::core::primitive::bool,
					},
					#[codec(index = 3)]
					transact_through_sovereign {
						dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedLocation,
						>,
						fee_payer: ::core::option::Option<::bp_moonbeam::AccountId>,
						fee: runtime_types::pallet_xcm_transactor::pallet::CurrencyPayment<
							runtime_types::moonriver_runtime::xcm_config::CurrencyId,
						>,
						call: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						origin_kind: runtime_types::xcm::v3::OriginKind,
						weight_info: runtime_types::pallet_xcm_transactor::pallet::TransactWeights,
						refund: ::core::primitive::bool,
					},
					#[codec(index = 4)]
					set_transact_info {
						location: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedLocation,
						>,
						transact_extra_weight: ::sp_weights::Weight,
						max_weight: ::sp_weights::Weight,
						transact_extra_weight_signed: ::core::option::Option<::sp_weights::Weight>,
					},
					#[codec(index = 5)]
					remove_transact_info {
						location: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedLocation,
						>,
					},
					#[codec(index = 6)]
					transact_through_signed {
						dest: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedLocation,
						>,
						fee: runtime_types::pallet_xcm_transactor::pallet::CurrencyPayment<
							runtime_types::moonriver_runtime::xcm_config::CurrencyId,
						>,
						call: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						weight_info: runtime_types::pallet_xcm_transactor::pallet::TransactWeights,
						refund: ::core::primitive::bool,
					},
					#[codec(index = 7)]
					set_fee_per_second {
						asset_location: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedLocation,
						>,
						fee_per_second: ::core::primitive::u128,
					},
					#[codec(index = 8)]
					remove_fee_per_second {
						asset_location: ::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedLocation,
						>,
					},
					#[codec(index = 9)]
					hrmp_manage {
						action: runtime_types::pallet_xcm_transactor::pallet::HrmpOperation,
						fee: runtime_types::pallet_xcm_transactor::pallet::CurrencyPayment<
							runtime_types::moonriver_runtime::xcm_config::CurrencyId,
						>,
						weight_info: runtime_types::pallet_xcm_transactor::pallet::TransactWeights,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Currency<_0> {
					#[codec(index = 0)]
					AsCurrencyId(_0),
					#[codec(index = 1)]
					AsMultiLocation(
						::subxt::ext::subxt_core::alloc::boxed::Box<
							runtime_types::xcm::VersionedLocation,
						>,
					),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct CurrencyPayment<_0> {
					pub currency: runtime_types::pallet_xcm_transactor::pallet::Currency<_0>,
					pub fee_amount: ::core::option::Option<::core::primitive::u128>,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					IndexAlreadyClaimed,
					#[codec(index = 1)]
					UnclaimedIndex,
					#[codec(index = 2)]
					NotOwner,
					#[codec(index = 3)]
					UnweighableMessage,
					#[codec(index = 4)]
					CannotReanchor,
					#[codec(index = 5)]
					AssetHasNoReserve,
					#[codec(index = 6)]
					InvalidDest,
					#[codec(index = 7)]
					NotCrossChainTransfer,
					#[codec(index = 8)]
					AssetIsNotReserveInDestination,
					#[codec(index = 9)]
					DestinationNotInvertible,
					#[codec(index = 10)]
					ErrorDelivering,
					#[codec(index = 11)]
					DispatchWeightBiggerThanTotalWeight,
					#[codec(index = 12)]
					WeightOverflow,
					#[codec(index = 13)]
					AmountOverflow,
					#[codec(index = 14)]
					TransactorInfoNotSet,
					#[codec(index = 15)]
					NotCrossChainTransferableCurrency,
					#[codec(index = 16)]
					XcmExecuteError,
					#[codec(index = 17)]
					BadVersion,
					#[codec(index = 18)]
					MaxWeightTransactReached,
					#[codec(index = 19)]
					UnableToWithdrawAsset,
					#[codec(index = 20)]
					FeePerSecondNotSet,
					#[codec(index = 21)]
					SignedTransactNotAllowedForDestination,
					#[codec(index = 22)]
					FailedMultiLocationToJunction,
					#[codec(index = 23)]
					HrmpHandlerNotImplemented,
					#[codec(index = 24)]
					TooMuchFeeUsed,
					#[codec(index = 25)]
					ErrorValidating,
					#[codec(index = 26)]
					RefundNotSupportedWithTransactInfo,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
                    TransactedDerivative {
                        account_id: ::bp_moonbeam::AccountId,
                        dest: runtime_types::staging_xcm::v4::location::Location,
                        call: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            ::core::primitive::u8,
                        >,
                        index: ::core::primitive::u16,
                    },
                    #[codec(index = 1)]
                    TransactedSovereign {
                        fee_payer: ::core::option::Option<::bp_moonbeam::AccountId>,
                        dest: runtime_types::staging_xcm::v4::location::Location,
                        call: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 2)]
                    TransactedSigned {
                        fee_payer: ::bp_moonbeam::AccountId,
                        dest: runtime_types::staging_xcm::v4::location::Location,
                        call: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 3)]
                    RegisteredDerivative {
                        account_id: ::bp_moonbeam::AccountId,
                        index: ::core::primitive::u16,
                    },
                    #[codec(index = 4)]
                    DeRegisteredDerivative { index: ::core::primitive::u16 },
                    #[codec(index = 5)]
                    TransactFailed { error: runtime_types::xcm::v3::traits::Error },
                    #[codec(index = 6)]
                    TransactInfoChanged {
                        location: runtime_types::staging_xcm::v4::location::Location,
                        remote_info: runtime_types::pallet_xcm_transactor::pallet::RemoteTransactInfoWithMaxWeight,
                    },
                    #[codec(index = 7)]
                    TransactInfoRemoved {
                        location: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 8)]
                    DestFeePerSecondChanged {
                        location: runtime_types::staging_xcm::v4::location::Location,
                        fee_per_second: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    DestFeePerSecondRemoved {
                        location: runtime_types::staging_xcm::v4::location::Location,
                    },
                    #[codec(index = 10)]
                    HrmpManagementSent {
                        action: runtime_types::pallet_xcm_transactor::pallet::HrmpOperation,
                    },
                }
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct HrmpInitParams {
					pub para_id: runtime_types::polkadot_parachain_primitives::primitives::Id,
					pub proposed_max_capacity: ::core::primitive::u32,
					pub proposed_max_message_size: ::core::primitive::u32,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum HrmpOperation {
					#[codec(index = 0)]
					InitOpen(runtime_types::pallet_xcm_transactor::pallet::HrmpInitParams),
					#[codec(index = 1)]
					Accept { para_id: runtime_types::polkadot_parachain_primitives::primitives::Id },
					#[codec(index = 2)]
					Close(runtime_types::polkadot_parachain_primitives::primitives::HrmpChannelId),
					#[codec(index = 3)]
					Cancel {
						channel_id:
							runtime_types::polkadot_parachain_primitives::primitives::HrmpChannelId,
						open_requests: ::core::primitive::u32,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct RemoteTransactInfoWithMaxWeight {
					pub transact_extra_weight: ::sp_weights::Weight,
					pub max_weight: ::sp_weights::Weight,
					pub transact_extra_weight_signed: ::core::option::Option<::sp_weights::Weight>,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct TransactWeights {
					pub transact_required_weight_at_most: ::sp_weights::Weight,
					pub overall_weight: ::core::option::Option<runtime_types::xcm::v3::WeightLimit>,
				}
			}
			pub mod relay_indices {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct RelayChainIndices {
					pub staking: ::core::primitive::u8,
					pub utility: ::core::primitive::u8,
					pub hrmp: ::core::primitive::u8,
					pub bond: ::core::primitive::u8,
					pub bond_extra: ::core::primitive::u8,
					pub unbond: ::core::primitive::u8,
					pub withdraw_unbonded: ::core::primitive::u8,
					pub validate: ::core::primitive::u8,
					pub nominate: ::core::primitive::u8,
					pub chill: ::core::primitive::u8,
					pub set_payee: ::core::primitive::u8,
					pub set_controller: ::core::primitive::u8,
					pub rebond: ::core::primitive::u8,
					pub as_derivative: ::core::primitive::u8,
					pub init_open_channel: ::core::primitive::u8,
					pub accept_open_channel: ::core::primitive::u8,
					pub close_channel: ::core::primitive::u8,
					pub cancel_open_request: ::core::primitive::u8,
				}
			}
		}
		pub mod pallet_xcm_weight_trader {
			use super::runtime_types;
			pub mod pallet {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Call {
					#[codec(index = 0)]
					add_asset {
						location: runtime_types::staging_xcm::v4::location::Location,
						relative_price: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					edit_asset {
						location: runtime_types::staging_xcm::v4::location::Location,
						relative_price: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					pause_asset_support {
						location: runtime_types::staging_xcm::v4::location::Location,
					},
					#[codec(index = 3)]
					resume_asset_support {
						location: runtime_types::staging_xcm::v4::location::Location,
					},
					#[codec(index = 4)]
					remove_asset { location: runtime_types::staging_xcm::v4::location::Location },
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					AssetAlreadyAdded,
					#[codec(index = 1)]
					AssetAlreadyPaused,
					#[codec(index = 2)]
					AssetNotFound,
					#[codec(index = 3)]
					AssetNotPaused,
					#[codec(index = 4)]
					XcmLocationFiltered,
					#[codec(index = 5)]
					PriceCannotBeZero,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Event {
					#[codec(index = 0)]
					SupportedAssetAdded {
						location: runtime_types::staging_xcm::v4::location::Location,
						relative_price: ::core::primitive::u128,
					},
					#[codec(index = 1)]
					SupportedAssetEdited {
						location: runtime_types::staging_xcm::v4::location::Location,
						relative_price: ::core::primitive::u128,
					},
					#[codec(index = 2)]
					PauseAssetSupport {
						location: runtime_types::staging_xcm::v4::location::Location,
					},
					#[codec(index = 3)]
					ResumeAssetSupport {
						location: runtime_types::staging_xcm::v4::location::Location,
					},
					#[codec(index = 4)]
					SupportedAssetRemoved {
						location: runtime_types::staging_xcm::v4::location::Location,
					},
				}
			}
		}
		pub mod polkadot_core_primitives {
			use super::runtime_types;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct InboundDownwardMessage<_0> {
				pub sent_at: _0,
				pub msg: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct InboundHrmpMessage<_0> {
				pub sent_at: _0,
				pub data: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct OutboundHrmpMessage<_0> {
				pub recipient: _0,
				pub data: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
			}
		}
		pub mod polkadot_parachain_primitives {
			use super::runtime_types;
			pub mod primitives {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct HeadData(
					pub ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
				);
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct HrmpChannelId {
					pub sender: runtime_types::polkadot_parachain_primitives::primitives::Id,
					pub recipient: runtime_types::polkadot_parachain_primitives::primitives::Id,
				}
				#[derive(
					::codec::Decode,
					::codec::Encode,
					::subxt::ext::subxt_core::ext::codec::CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct Id(pub ::core::primitive::u32);
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct ValidationCode(
					pub ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
				);
			}
		}
		pub mod polkadot_primitives {
			use super::runtime_types;
			pub mod v8 {
				use super::runtime_types;
				pub mod async_backing {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub struct AsyncBackingParams {
						pub max_candidate_depth: ::core::primitive::u32,
						pub allowed_ancestry_len: ::core::primitive::u32,
					}
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct AbridgedHostConfiguration {
					pub max_code_size: ::core::primitive::u32,
					pub max_head_data_size: ::core::primitive::u32,
					pub max_upward_queue_count: ::core::primitive::u32,
					pub max_upward_queue_size: ::core::primitive::u32,
					pub max_upward_message_size: ::core::primitive::u32,
					pub max_upward_message_num_per_candidate: ::core::primitive::u32,
					pub hrmp_max_message_num_per_candidate: ::core::primitive::u32,
					pub validation_upgrade_cooldown: ::core::primitive::u32,
					pub validation_upgrade_delay: ::core::primitive::u32,
					pub async_backing_params:
						runtime_types::polkadot_primitives::v8::async_backing::AsyncBackingParams,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct AbridgedHrmpChannel {
					pub max_capacity: ::core::primitive::u32,
					pub max_total_size: ::core::primitive::u32,
					pub max_message_size: ::core::primitive::u32,
					pub msg_count: ::core::primitive::u32,
					pub total_size: ::core::primitive::u32,
					pub mqc_head: ::core::option::Option<::subxt::ext::subxt_core::utils::H256>,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct PersistedValidationData<_0, _1> {
					pub parent_head:
						runtime_types::polkadot_parachain_primitives::primitives::HeadData,
					pub relay_parent_number: _1,
					pub relay_parent_storage_root: _0,
					pub max_pov_size: ::core::primitive::u32,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum UpgradeGoAhead {
					#[codec(index = 0)]
					Abort,
					#[codec(index = 1)]
					GoAhead,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum UpgradeRestriction {
					#[codec(index = 0)]
					Present,
				}
			}
		}
		pub mod primitive_types {
			use super::runtime_types;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct U256(pub [::core::primitive::u64; 4usize]);
		}
		pub mod session_keys_primitives {
			use super::runtime_types;
			pub mod vrf {
				use super::runtime_types;
				pub mod vrf_crypto {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub struct Public(pub [::core::primitive::u8; 32usize]);
				}
			}
		}
		pub mod sp_arithmetic {
			use super::runtime_types;
			pub mod fixed_point {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct FixedI64(pub ::core::primitive::i64);
				#[derive(
					::codec::Decode,
					::codec::Encode,
					::subxt::ext::subxt_core::ext::codec::CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct FixedU128(pub ::core::primitive::u128);
			}
			pub mod per_things {
				use super::runtime_types;
				#[derive(
					::codec::Decode,
					::codec::Encode,
					::subxt::ext::subxt_core::ext::codec::CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct Perbill(pub ::core::primitive::u32);
				#[derive(
					::codec::Decode,
					::codec::Encode,
					::subxt::ext::subxt_core::ext::codec::CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct Percent(pub ::core::primitive::u8);
				#[derive(
					::codec::Decode,
					::codec::Encode,
					::subxt::ext::subxt_core::ext::codec::CompactAs,
					Clone,
					Debug,
					PartialEq,
				)]
				pub struct Permill(pub ::core::primitive::u32);
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum ArithmeticError {
				#[codec(index = 0)]
				Underflow,
				#[codec(index = 1)]
				Overflow,
				#[codec(index = 2)]
				DivisionByZero,
			}
		}
		pub mod sp_consensus_grandpa {
			use super::runtime_types;
			pub mod app {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Public(pub [::core::primitive::u8; 32usize]);
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Signature(pub [::core::primitive::u8; 64usize]);
			}
		}
		pub mod sp_consensus_slots {
			use super::runtime_types;
			#[derive(
				::codec::Decode,
				::codec::Encode,
				::subxt::ext::subxt_core::ext::codec::CompactAs,
				Clone,
				Debug,
				PartialEq,
			)]
			pub struct Slot(pub ::core::primitive::u64);
		}
		pub mod sp_core {
			use super::runtime_types;
			pub mod crypto {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct KeyTypeId(pub [::core::primitive::u8; 4usize]);
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct OpaqueMetadata(
				pub ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
			);
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum Void {}
		}
		pub mod sp_inherents {
			use super::runtime_types;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct CheckInherentsResult {
				pub okay: ::core::primitive::bool,
				pub fatal_error: ::core::primitive::bool,
				pub errors: runtime_types::sp_inherents::InherentData,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct InherentData {
				pub data: ::subxt::ext::subxt_core::utils::KeyedVec<
					[::core::primitive::u8; 8usize],
					::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
				>,
			}
		}
		pub mod sp_runtime {
			use super::runtime_types;
			pub mod generic {
				use super::runtime_types;
				pub mod block {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub struct Block<_0, _1> {
						pub header: _0,
						pub extrinsics: ::subxt::ext::subxt_core::alloc::vec::Vec<_1>,
					}
				}
				pub mod digest {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum DigestItem {
						#[codec(index = 6)]
						PreRuntime(
							[::core::primitive::u8; 4usize],
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 4)]
						Consensus(
							[::core::primitive::u8; 4usize],
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 5)]
						Seal(
							[::core::primitive::u8; 4usize],
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						),
						#[codec(index = 0)]
						Other(::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>),
						#[codec(index = 8)]
						RuntimeEnvironmentUpdated,
					}
				}
			}
			pub mod transaction_validity {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum InvalidTransaction {
					#[codec(index = 0)]
					Call,
					#[codec(index = 1)]
					Payment,
					#[codec(index = 2)]
					Future,
					#[codec(index = 3)]
					Stale,
					#[codec(index = 4)]
					BadProof,
					#[codec(index = 5)]
					AncientBirthBlock,
					#[codec(index = 6)]
					ExhaustsResources,
					#[codec(index = 7)]
					Custom(::core::primitive::u8),
					#[codec(index = 8)]
					BadMandatory,
					#[codec(index = 9)]
					MandatoryValidation,
					#[codec(index = 10)]
					BadSigner,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum TransactionSource {
					#[codec(index = 0)]
					InBlock,
					#[codec(index = 1)]
					Local,
					#[codec(index = 2)]
					External,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum TransactionValidityError {
					#[codec(index = 0)]
					Invalid(runtime_types::sp_runtime::transaction_validity::InvalidTransaction),
					#[codec(index = 1)]
					Unknown(runtime_types::sp_runtime::transaction_validity::UnknownTransaction),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum UnknownTransaction {
					#[codec(index = 0)]
					CannotLookup,
					#[codec(index = 1)]
					NoUnsignedValidator,
					#[codec(index = 2)]
					Custom(::core::primitive::u8),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct ValidTransaction {
					pub priority: ::core::primitive::u64,
					pub requires: ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					>,
					pub provides: ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					>,
					pub longevity: ::core::primitive::u64,
					pub propagate: ::core::primitive::bool,
				}
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum DispatchError {
				#[codec(index = 0)]
				Other,
				#[codec(index = 1)]
				CannotLookup,
				#[codec(index = 2)]
				BadOrigin,
				#[codec(index = 3)]
				Module(runtime_types::sp_runtime::ModuleError),
				#[codec(index = 4)]
				ConsumerRemaining,
				#[codec(index = 5)]
				NoProviders,
				#[codec(index = 6)]
				TooManyConsumers,
				#[codec(index = 7)]
				Token(runtime_types::sp_runtime::TokenError),
				#[codec(index = 8)]
				Arithmetic(runtime_types::sp_arithmetic::ArithmeticError),
				#[codec(index = 9)]
				Transactional(runtime_types::sp_runtime::TransactionalError),
				#[codec(index = 10)]
				Exhausted,
				#[codec(index = 11)]
				Corruption,
				#[codec(index = 12)]
				Unavailable,
				#[codec(index = 13)]
				RootNotAllowed,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct DispatchErrorWithPostInfo<_0> {
				pub post_info: _0,
				pub error: runtime_types::sp_runtime::DispatchError,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum ExtrinsicInclusionMode {
				#[codec(index = 0)]
				AllExtrinsics,
				#[codec(index = 1)]
				OnlyInherents,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct ModuleError {
				pub index: ::core::primitive::u8,
				pub error: [::core::primitive::u8; 4usize],
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum MultiSignature {
				#[codec(index = 0)]
				Ed25519([::core::primitive::u8; 64usize]),
				#[codec(index = 1)]
				Sr25519([::core::primitive::u8; 64usize]),
				#[codec(index = 2)]
				Ecdsa([::core::primitive::u8; 65usize]),
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum TokenError {
				#[codec(index = 0)]
				FundsUnavailable,
				#[codec(index = 1)]
				OnlyProvider,
				#[codec(index = 2)]
				BelowMinimum,
				#[codec(index = 3)]
				CannotCreate,
				#[codec(index = 4)]
				UnknownAsset,
				#[codec(index = 5)]
				Frozen,
				#[codec(index = 6)]
				Unsupported,
				#[codec(index = 7)]
				CannotCreateHold,
				#[codec(index = 8)]
				NotExpendable,
				#[codec(index = 9)]
				Blocked,
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum TransactionalError {
				#[codec(index = 0)]
				LimitReached,
				#[codec(index = 1)]
				NoLayer,
			}
		}
		pub mod sp_trie {
			use super::runtime_types;
			pub mod storage_proof {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct StorageProof {
					pub trie_nodes: ::subxt::ext::subxt_core::alloc::vec::Vec<
						::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
					>,
				}
			}
		}
		pub mod sp_version {
			use super::runtime_types;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct RuntimeVersion {
				pub spec_name: ::subxt::ext::subxt_core::alloc::string::String,
				pub impl_name: ::subxt::ext::subxt_core::alloc::string::String,
				pub authoring_version: ::core::primitive::u32,
				pub spec_version: ::core::primitive::u32,
				pub impl_version: ::core::primitive::u32,
				pub apis: ::subxt::ext::subxt_core::alloc::vec::Vec<(
					[::core::primitive::u8; 8usize],
					::core::primitive::u32,
				)>,
				pub transaction_version: ::core::primitive::u32,
				pub state_version: ::core::primitive::u8,
			}
		}
		pub mod sp_weights {
			use super::runtime_types;
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub struct RuntimeDbWeight {
				pub read: ::core::primitive::u64,
				pub write: ::core::primitive::u64,
			}
		}
		pub mod staging_xcm {
			use super::runtime_types;
			pub mod v3 {
				use super::runtime_types;
				pub mod multilocation {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub struct MultiLocation {
						pub parents: ::core::primitive::u8,
						pub interior: runtime_types::xcm::v3::junctions::Junctions,
					}
				}
			}
			pub mod v4 {
				use super::runtime_types;
				pub mod asset {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub struct Asset {
						pub id: runtime_types::staging_xcm::v4::asset::AssetId,
						pub fun: runtime_types::staging_xcm::v4::asset::Fungibility,
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum AssetFilter {
						#[codec(index = 0)]
						Definite(runtime_types::staging_xcm::v4::asset::Assets),
						#[codec(index = 1)]
						Wild(runtime_types::staging_xcm::v4::asset::WildAsset),
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub struct AssetId(pub runtime_types::staging_xcm::v4::location::Location);
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum AssetInstance {
						#[codec(index = 0)]
						Undefined,
						#[codec(index = 1)]
						Index(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 2)]
						Array4([::core::primitive::u8; 4usize]),
						#[codec(index = 3)]
						Array8([::core::primitive::u8; 8usize]),
						#[codec(index = 4)]
						Array16([::core::primitive::u8; 16usize]),
						#[codec(index = 5)]
						Array32([::core::primitive::u8; 32usize]),
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub struct Assets(
						pub  ::subxt::ext::subxt_core::alloc::vec::Vec<
							runtime_types::staging_xcm::v4::asset::Asset,
						>,
					);
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum Fungibility {
						#[codec(index = 0)]
						Fungible(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 1)]
						NonFungible(runtime_types::staging_xcm::v4::asset::AssetInstance),
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum WildAsset {
						#[codec(index = 0)]
						All,
						#[codec(index = 1)]
						AllOf {
							id: runtime_types::staging_xcm::v4::asset::AssetId,
							fun: runtime_types::staging_xcm::v4::asset::WildFungibility,
						},
						#[codec(index = 2)]
						AllCounted(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 3)]
						AllOfCounted {
							id: runtime_types::staging_xcm::v4::asset::AssetId,
							fun: runtime_types::staging_xcm::v4::asset::WildFungibility,
							#[codec(compact)]
							count: ::core::primitive::u32,
						},
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum WildFungibility {
						#[codec(index = 0)]
						Fungible,
						#[codec(index = 1)]
						NonFungible,
					}
				}
				pub mod junction {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum Junction {
						#[codec(index = 0)]
						Parachain(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 1)]
						AccountId32 {
							network: ::core::option::Option<
								runtime_types::staging_xcm::v4::junction::NetworkId,
							>,
							id: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 2)]
						AccountIndex64 {
							network: ::core::option::Option<
								runtime_types::staging_xcm::v4::junction::NetworkId,
							>,
							#[codec(compact)]
							index: ::core::primitive::u64,
						},
						#[codec(index = 3)]
						AccountKey20 {
							network: ::core::option::Option<
								runtime_types::staging_xcm::v4::junction::NetworkId,
							>,
							key: [::core::primitive::u8; 20usize],
						},
						#[codec(index = 4)]
						PalletInstance(::core::primitive::u8),
						#[codec(index = 5)]
						GeneralIndex(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 6)]
						GeneralKey {
							length: ::core::primitive::u8,
							data: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 7)]
						OnlyChild,
						#[codec(index = 8)]
						Plurality {
							id: runtime_types::xcm::v3::junction::BodyId,
							part: runtime_types::xcm::v3::junction::BodyPart,
						},
						#[codec(index = 9)]
						GlobalConsensus(runtime_types::staging_xcm::v4::junction::NetworkId),
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum NetworkId {
						#[codec(index = 0)]
						ByGenesis([::core::primitive::u8; 32usize]),
						#[codec(index = 1)]
						ByFork {
							block_number: ::core::primitive::u64,
							block_hash: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 2)]
						Polkadot,
						#[codec(index = 3)]
						Kusama,
						#[codec(index = 4)]
						Westend,
						#[codec(index = 5)]
						Rococo,
						#[codec(index = 6)]
						Wococo,
						#[codec(index = 7)]
						Ethereum {
							#[codec(compact)]
							chain_id: ::core::primitive::u64,
						},
						#[codec(index = 8)]
						BitcoinCore,
						#[codec(index = 9)]
						BitcoinCash,
						#[codec(index = 10)]
						PolkadotBulletin,
					}
				}
				pub mod junctions {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum Junctions {
						#[codec(index = 0)]
						Here,
						#[codec(index = 1)]
						X1([runtime_types::staging_xcm::v4::junction::Junction; 1usize]),
						#[codec(index = 2)]
						X2([runtime_types::staging_xcm::v4::junction::Junction; 2usize]),
						#[codec(index = 3)]
						X3([runtime_types::staging_xcm::v4::junction::Junction; 3usize]),
						#[codec(index = 4)]
						X4([runtime_types::staging_xcm::v4::junction::Junction; 4usize]),
						#[codec(index = 5)]
						X5([runtime_types::staging_xcm::v4::junction::Junction; 5usize]),
						#[codec(index = 6)]
						X6([runtime_types::staging_xcm::v4::junction::Junction; 6usize]),
						#[codec(index = 7)]
						X7([runtime_types::staging_xcm::v4::junction::Junction; 7usize]),
						#[codec(index = 8)]
						X8([runtime_types::staging_xcm::v4::junction::Junction; 8usize]),
					}
				}
				pub mod location {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub struct Location {
						pub parents: ::core::primitive::u8,
						pub interior: runtime_types::staging_xcm::v4::junctions::Junctions,
					}
				}
				pub mod traits {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum Outcome {
						#[codec(index = 0)]
						Complete { used: ::sp_weights::Weight },
						#[codec(index = 1)]
						Incomplete {
							used: ::sp_weights::Weight,
							error: runtime_types::xcm::v3::traits::Error,
						},
						#[codec(index = 2)]
						Error { error: runtime_types::xcm::v3::traits::Error },
					}
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Instruction {
					#[codec(index = 0)]
					WithdrawAsset(runtime_types::staging_xcm::v4::asset::Assets),
					#[codec(index = 1)]
					ReserveAssetDeposited(runtime_types::staging_xcm::v4::asset::Assets),
					#[codec(index = 2)]
					ReceiveTeleportedAsset(runtime_types::staging_xcm::v4::asset::Assets),
					#[codec(index = 3)]
					QueryResponse {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						response: runtime_types::staging_xcm::v4::Response,
						max_weight: ::sp_weights::Weight,
						querier: ::core::option::Option<
							runtime_types::staging_xcm::v4::location::Location,
						>,
					},
					#[codec(index = 4)]
					TransferAsset {
						assets: runtime_types::staging_xcm::v4::asset::Assets,
						beneficiary: runtime_types::staging_xcm::v4::location::Location,
					},
					#[codec(index = 5)]
					TransferReserveAsset {
						assets: runtime_types::staging_xcm::v4::asset::Assets,
						dest: runtime_types::staging_xcm::v4::location::Location,
						xcm: runtime_types::staging_xcm::v4::Xcm,
					},
					#[codec(index = 6)]
					Transact {
						origin_kind: runtime_types::xcm::v3::OriginKind,
						require_weight_at_most: ::sp_weights::Weight,
						call: runtime_types::xcm::double_encoded::DoubleEncoded,
					},
					#[codec(index = 7)]
					HrmpNewChannelOpenRequest {
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						max_message_size: ::core::primitive::u32,
						#[codec(compact)]
						max_capacity: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					HrmpChannelAccepted {
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					HrmpChannelClosing {
						#[codec(compact)]
						initiator: ::core::primitive::u32,
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					ClearOrigin,
					#[codec(index = 11)]
					DescendOrigin(runtime_types::staging_xcm::v4::junctions::Junctions),
					#[codec(index = 12)]
					ReportError(runtime_types::staging_xcm::v4::QueryResponseInfo),
					#[codec(index = 13)]
					DepositAsset {
						assets: runtime_types::staging_xcm::v4::asset::AssetFilter,
						beneficiary: runtime_types::staging_xcm::v4::location::Location,
					},
					#[codec(index = 14)]
					DepositReserveAsset {
						assets: runtime_types::staging_xcm::v4::asset::AssetFilter,
						dest: runtime_types::staging_xcm::v4::location::Location,
						xcm: runtime_types::staging_xcm::v4::Xcm,
					},
					#[codec(index = 15)]
					ExchangeAsset {
						give: runtime_types::staging_xcm::v4::asset::AssetFilter,
						want: runtime_types::staging_xcm::v4::asset::Assets,
						maximal: ::core::primitive::bool,
					},
					#[codec(index = 16)]
					InitiateReserveWithdraw {
						assets: runtime_types::staging_xcm::v4::asset::AssetFilter,
						reserve: runtime_types::staging_xcm::v4::location::Location,
						xcm: runtime_types::staging_xcm::v4::Xcm,
					},
					#[codec(index = 17)]
					InitiateTeleport {
						assets: runtime_types::staging_xcm::v4::asset::AssetFilter,
						dest: runtime_types::staging_xcm::v4::location::Location,
						xcm: runtime_types::staging_xcm::v4::Xcm,
					},
					#[codec(index = 18)]
					ReportHolding {
						response_info: runtime_types::staging_xcm::v4::QueryResponseInfo,
						assets: runtime_types::staging_xcm::v4::asset::AssetFilter,
					},
					#[codec(index = 19)]
					BuyExecution {
						fees: runtime_types::staging_xcm::v4::asset::Asset,
						weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 20)]
					RefundSurplus,
					#[codec(index = 21)]
					SetErrorHandler(runtime_types::staging_xcm::v4::Xcm),
					#[codec(index = 22)]
					SetAppendix(runtime_types::staging_xcm::v4::Xcm),
					#[codec(index = 23)]
					ClearError,
					#[codec(index = 24)]
					ClaimAsset {
						assets: runtime_types::staging_xcm::v4::asset::Assets,
						ticket: runtime_types::staging_xcm::v4::location::Location,
					},
					#[codec(index = 25)]
					Trap(#[codec(compact)] ::core::primitive::u64),
					#[codec(index = 26)]
					SubscribeVersion {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						max_response_weight: ::sp_weights::Weight,
					},
					#[codec(index = 27)]
					UnsubscribeVersion,
					#[codec(index = 28)]
					BurnAsset(runtime_types::staging_xcm::v4::asset::Assets),
					#[codec(index = 29)]
					ExpectAsset(runtime_types::staging_xcm::v4::asset::Assets),
					#[codec(index = 30)]
					ExpectOrigin(
						::core::option::Option<runtime_types::staging_xcm::v4::location::Location>,
					),
					#[codec(index = 31)]
					ExpectError(
						::core::option::Option<(
							::core::primitive::u32,
							runtime_types::xcm::v3::traits::Error,
						)>,
					),
					#[codec(index = 32)]
					ExpectTransactStatus(runtime_types::xcm::v3::MaybeErrorCode),
					#[codec(index = 33)]
					QueryPallet {
						module_name:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						response_info: runtime_types::staging_xcm::v4::QueryResponseInfo,
					},
					#[codec(index = 34)]
					ExpectPallet {
						#[codec(compact)]
						index: ::core::primitive::u32,
						name: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						module_name:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						#[codec(compact)]
						crate_major: ::core::primitive::u32,
						#[codec(compact)]
						min_crate_minor: ::core::primitive::u32,
					},
					#[codec(index = 35)]
					ReportTransactStatus(runtime_types::staging_xcm::v4::QueryResponseInfo),
					#[codec(index = 36)]
					ClearTransactStatus,
					#[codec(index = 37)]
					UniversalOrigin(runtime_types::staging_xcm::v4::junction::Junction),
					#[codec(index = 38)]
					ExportMessage {
						network: runtime_types::staging_xcm::v4::junction::NetworkId,
						destination: runtime_types::staging_xcm::v4::junctions::Junctions,
						xcm: runtime_types::staging_xcm::v4::Xcm,
					},
					#[codec(index = 39)]
					LockAsset {
						asset: runtime_types::staging_xcm::v4::asset::Asset,
						unlocker: runtime_types::staging_xcm::v4::location::Location,
					},
					#[codec(index = 40)]
					UnlockAsset {
						asset: runtime_types::staging_xcm::v4::asset::Asset,
						target: runtime_types::staging_xcm::v4::location::Location,
					},
					#[codec(index = 41)]
					NoteUnlockable {
						asset: runtime_types::staging_xcm::v4::asset::Asset,
						owner: runtime_types::staging_xcm::v4::location::Location,
					},
					#[codec(index = 42)]
					RequestUnlock {
						asset: runtime_types::staging_xcm::v4::asset::Asset,
						locker: runtime_types::staging_xcm::v4::location::Location,
					},
					#[codec(index = 43)]
					SetFeesMode { jit_withdraw: ::core::primitive::bool },
					#[codec(index = 44)]
					SetTopic([::core::primitive::u8; 32usize]),
					#[codec(index = 45)]
					ClearTopic,
					#[codec(index = 46)]
					AliasOrigin(runtime_types::staging_xcm::v4::location::Location),
					#[codec(index = 47)]
					UnpaidExecution {
						weight_limit: runtime_types::xcm::v3::WeightLimit,
						check_origin: ::core::option::Option<
							runtime_types::staging_xcm::v4::location::Location,
						>,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct PalletInfo {
					#[codec(compact)]
					pub index: ::core::primitive::u32,
					pub name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					pub module_name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					#[codec(compact)]
					pub major: ::core::primitive::u32,
					#[codec(compact)]
					pub minor: ::core::primitive::u32,
					#[codec(compact)]
					pub patch: ::core::primitive::u32,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct QueryResponseInfo {
					pub destination: runtime_types::staging_xcm::v4::location::Location,
					#[codec(compact)]
					pub query_id: ::core::primitive::u64,
					pub max_weight: ::sp_weights::Weight,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Response {
					#[codec(index = 0)]
					Null,
					#[codec(index = 1)]
					Assets(runtime_types::staging_xcm::v4::asset::Assets),
					#[codec(index = 2)]
					ExecutionResult(
						::core::option::Option<(
							::core::primitive::u32,
							runtime_types::xcm::v3::traits::Error,
						)>,
					),
					#[codec(index = 3)]
					Version(::core::primitive::u32),
					#[codec(index = 4)]
					PalletsInfo(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::staging_xcm::v4::PalletInfo,
						>,
					),
					#[codec(index = 5)]
					DispatchResult(runtime_types::xcm::v3::MaybeErrorCode),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Xcm(
					pub  ::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::staging_xcm::v4::Instruction,
					>,
				);
			}
		}
		pub mod staging_xcm_executor {
			use super::runtime_types;
			pub mod traits {
				use super::runtime_types;
				pub mod asset_transfer {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum TransferType {
						#[codec(index = 0)]
						Teleport,
						#[codec(index = 1)]
						LocalReserve,
						#[codec(index = 2)]
						DestinationReserve,
						#[codec(index = 3)]
						RemoteReserve(runtime_types::xcm::VersionedLocation),
					}
				}
			}
		}
		pub mod xcm {
			use super::runtime_types;
			pub mod double_encoded {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct DoubleEncoded {
					pub encoded: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
				}
			}
			pub mod v2 {
				use super::runtime_types;
				pub mod junction {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum Junction {
						#[codec(index = 0)]
						Parachain(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 1)]
						AccountId32 {
							network: runtime_types::xcm::v2::NetworkId,
							id: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 2)]
						AccountIndex64 {
							network: runtime_types::xcm::v2::NetworkId,
							#[codec(compact)]
							index: ::core::primitive::u64,
						},
						#[codec(index = 3)]
						AccountKey20 {
							network: runtime_types::xcm::v2::NetworkId,
							key: [::core::primitive::u8; 20usize],
						},
						#[codec(index = 4)]
						PalletInstance(::core::primitive::u8),
						#[codec(index = 5)]
						GeneralIndex(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 6)]
						GeneralKey(
							runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
								::core::primitive::u8,
							>,
						),
						#[codec(index = 7)]
						OnlyChild,
						#[codec(index = 8)]
						Plurality {
							id: runtime_types::xcm::v2::BodyId,
							part: runtime_types::xcm::v2::BodyPart,
						},
					}
				}
				pub mod multiasset {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum AssetId {
						#[codec(index = 0)]
						Concrete(runtime_types::xcm::v2::multilocation::MultiLocation),
						#[codec(index = 1)]
						Abstract(::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>),
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum AssetInstance {
						#[codec(index = 0)]
						Undefined,
						#[codec(index = 1)]
						Index(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 2)]
						Array4([::core::primitive::u8; 4usize]),
						#[codec(index = 3)]
						Array8([::core::primitive::u8; 8usize]),
						#[codec(index = 4)]
						Array16([::core::primitive::u8; 16usize]),
						#[codec(index = 5)]
						Array32([::core::primitive::u8; 32usize]),
						#[codec(index = 6)]
						Blob(::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>),
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum Fungibility {
						#[codec(index = 0)]
						Fungible(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 1)]
						NonFungible(runtime_types::xcm::v2::multiasset::AssetInstance),
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub struct MultiAsset {
						pub id: runtime_types::xcm::v2::multiasset::AssetId,
						pub fun: runtime_types::xcm::v2::multiasset::Fungibility,
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum MultiAssetFilter {
						#[codec(index = 0)]
						Definite(runtime_types::xcm::v2::multiasset::MultiAssets),
						#[codec(index = 1)]
						Wild(runtime_types::xcm::v2::multiasset::WildMultiAsset),
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub struct MultiAssets(
						pub  ::subxt::ext::subxt_core::alloc::vec::Vec<
							runtime_types::xcm::v2::multiasset::MultiAsset,
						>,
					);
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum WildFungibility {
						#[codec(index = 0)]
						Fungible,
						#[codec(index = 1)]
						NonFungible,
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum WildMultiAsset {
						#[codec(index = 0)]
						All,
						#[codec(index = 1)]
						AllOf {
							id: runtime_types::xcm::v2::multiasset::AssetId,
							fun: runtime_types::xcm::v2::multiasset::WildFungibility,
						},
					}
				}
				pub mod multilocation {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum Junctions {
						#[codec(index = 0)]
						Here,
						#[codec(index = 1)]
						X1(runtime_types::xcm::v2::junction::Junction),
						#[codec(index = 2)]
						X2(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 3)]
						X3(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 4)]
						X4(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 5)]
						X5(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 6)]
						X6(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 7)]
						X7(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
						#[codec(index = 8)]
						X8(
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
							runtime_types::xcm::v2::junction::Junction,
						),
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub struct MultiLocation {
						pub parents: ::core::primitive::u8,
						pub interior: runtime_types::xcm::v2::multilocation::Junctions,
					}
				}
				pub mod traits {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum Error {
						#[codec(index = 0)]
						Overflow,
						#[codec(index = 1)]
						Unimplemented,
						#[codec(index = 2)]
						UntrustedReserveLocation,
						#[codec(index = 3)]
						UntrustedTeleportLocation,
						#[codec(index = 4)]
						MultiLocationFull,
						#[codec(index = 5)]
						MultiLocationNotInvertible,
						#[codec(index = 6)]
						BadOrigin,
						#[codec(index = 7)]
						InvalidLocation,
						#[codec(index = 8)]
						AssetNotFound,
						#[codec(index = 9)]
						FailedToTransactAsset,
						#[codec(index = 10)]
						NotWithdrawable,
						#[codec(index = 11)]
						LocationCannotHold,
						#[codec(index = 12)]
						ExceedsMaxMessageSize,
						#[codec(index = 13)]
						DestinationUnsupported,
						#[codec(index = 14)]
						Transport,
						#[codec(index = 15)]
						Unroutable,
						#[codec(index = 16)]
						UnknownClaim,
						#[codec(index = 17)]
						FailedToDecode,
						#[codec(index = 18)]
						MaxWeightInvalid,
						#[codec(index = 19)]
						NotHoldingFees,
						#[codec(index = 20)]
						TooExpensive,
						#[codec(index = 21)]
						Trap(::core::primitive::u64),
						#[codec(index = 22)]
						UnhandledXcmVersion,
						#[codec(index = 23)]
						WeightLimitReached(::core::primitive::u64),
						#[codec(index = 24)]
						Barrier,
						#[codec(index = 25)]
						WeightNotComputable,
					}
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum BodyId {
					#[codec(index = 0)]
					Unit,
					#[codec(index = 1)]
					Named(
						runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
							::core::primitive::u8,
						>,
					),
					#[codec(index = 2)]
					Index(#[codec(compact)] ::core::primitive::u32),
					#[codec(index = 3)]
					Executive,
					#[codec(index = 4)]
					Technical,
					#[codec(index = 5)]
					Legislative,
					#[codec(index = 6)]
					Judicial,
					#[codec(index = 7)]
					Defense,
					#[codec(index = 8)]
					Administration,
					#[codec(index = 9)]
					Treasury,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum BodyPart {
					#[codec(index = 0)]
					Voice,
					#[codec(index = 1)]
					Members {
						#[codec(compact)]
						count: ::core::primitive::u32,
					},
					#[codec(index = 2)]
					Fraction {
						#[codec(compact)]
						nom: ::core::primitive::u32,
						#[codec(compact)]
						denom: ::core::primitive::u32,
					},
					#[codec(index = 3)]
					AtLeastProportion {
						#[codec(compact)]
						nom: ::core::primitive::u32,
						#[codec(compact)]
						denom: ::core::primitive::u32,
					},
					#[codec(index = 4)]
					MoreThanProportion {
						#[codec(compact)]
						nom: ::core::primitive::u32,
						#[codec(compact)]
						denom: ::core::primitive::u32,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Instruction {
					#[codec(index = 0)]
					WithdrawAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
					#[codec(index = 1)]
					ReserveAssetDeposited(runtime_types::xcm::v2::multiasset::MultiAssets),
					#[codec(index = 2)]
					ReceiveTeleportedAsset(runtime_types::xcm::v2::multiasset::MultiAssets),
					#[codec(index = 3)]
					QueryResponse {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v2::Response,
						#[codec(compact)]
						max_weight: ::core::primitive::u64,
					},
					#[codec(index = 4)]
					TransferAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssets,
						beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
					},
					#[codec(index = 5)]
					TransferReserveAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssets,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 6)]
					Transact {
						origin_type: runtime_types::xcm::v2::OriginKind,
						#[codec(compact)]
						require_weight_at_most: ::core::primitive::u64,
						call: runtime_types::xcm::double_encoded::DoubleEncoded,
					},
					#[codec(index = 7)]
					HrmpNewChannelOpenRequest {
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						max_message_size: ::core::primitive::u32,
						#[codec(compact)]
						max_capacity: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					HrmpChannelAccepted {
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					HrmpChannelClosing {
						#[codec(compact)]
						initiator: ::core::primitive::u32,
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					ClearOrigin,
					#[codec(index = 11)]
					DescendOrigin(runtime_types::xcm::v2::multilocation::Junctions),
					#[codec(index = 12)]
					ReportError {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 13)]
					DepositAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_assets: ::core::primitive::u32,
						beneficiary: runtime_types::xcm::v2::multilocation::MultiLocation,
					},
					#[codec(index = 14)]
					DepositReserveAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_assets: ::core::primitive::u32,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 15)]
					ExchangeAsset {
						give: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						receive: runtime_types::xcm::v2::multiasset::MultiAssets,
					},
					#[codec(index = 16)]
					InitiateReserveWithdraw {
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						reserve: runtime_types::xcm::v2::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 17)]
					InitiateTeleport {
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v2::Xcm,
					},
					#[codec(index = 18)]
					QueryHolding {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						dest: runtime_types::xcm::v2::multilocation::MultiLocation,
						assets: runtime_types::xcm::v2::multiasset::MultiAssetFilter,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 19)]
					BuyExecution {
						fees: runtime_types::xcm::v2::multiasset::MultiAsset,
						weight_limit: runtime_types::xcm::v2::WeightLimit,
					},
					#[codec(index = 20)]
					RefundSurplus,
					#[codec(index = 21)]
					SetErrorHandler(runtime_types::xcm::v2::Xcm),
					#[codec(index = 22)]
					SetAppendix(runtime_types::xcm::v2::Xcm),
					#[codec(index = 23)]
					ClearError,
					#[codec(index = 24)]
					ClaimAsset {
						assets: runtime_types::xcm::v2::multiasset::MultiAssets,
						ticket: runtime_types::xcm::v2::multilocation::MultiLocation,
					},
					#[codec(index = 25)]
					Trap(#[codec(compact)] ::core::primitive::u64),
					#[codec(index = 26)]
					SubscribeVersion {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						#[codec(compact)]
						max_response_weight: ::core::primitive::u64,
					},
					#[codec(index = 27)]
					UnsubscribeVersion,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum NetworkId {
					#[codec(index = 0)]
					Any,
					#[codec(index = 1)]
					Named(
						runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
							::core::primitive::u8,
						>,
					),
					#[codec(index = 2)]
					Polkadot,
					#[codec(index = 3)]
					Kusama,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum OriginKind {
					#[codec(index = 0)]
					Native,
					#[codec(index = 1)]
					SovereignAccount,
					#[codec(index = 2)]
					Superuser,
					#[codec(index = 3)]
					Xcm,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Response {
					#[codec(index = 0)]
					Null,
					#[codec(index = 1)]
					Assets(runtime_types::xcm::v2::multiasset::MultiAssets),
					#[codec(index = 2)]
					ExecutionResult(
						::core::option::Option<(
							::core::primitive::u32,
							runtime_types::xcm::v2::traits::Error,
						)>,
					),
					#[codec(index = 3)]
					Version(::core::primitive::u32),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum WeightLimit {
					#[codec(index = 0)]
					Unlimited,
					#[codec(index = 1)]
					Limited(#[codec(compact)] ::core::primitive::u64),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Xcm(
					pub  ::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::xcm::v2::Instruction,
					>,
				);
			}
			pub mod v3 {
				use super::runtime_types;
				pub mod junction {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum BodyId {
						#[codec(index = 0)]
						Unit,
						#[codec(index = 1)]
						Moniker([::core::primitive::u8; 4usize]),
						#[codec(index = 2)]
						Index(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 3)]
						Executive,
						#[codec(index = 4)]
						Technical,
						#[codec(index = 5)]
						Legislative,
						#[codec(index = 6)]
						Judicial,
						#[codec(index = 7)]
						Defense,
						#[codec(index = 8)]
						Administration,
						#[codec(index = 9)]
						Treasury,
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum BodyPart {
						#[codec(index = 0)]
						Voice,
						#[codec(index = 1)]
						Members {
							#[codec(compact)]
							count: ::core::primitive::u32,
						},
						#[codec(index = 2)]
						Fraction {
							#[codec(compact)]
							nom: ::core::primitive::u32,
							#[codec(compact)]
							denom: ::core::primitive::u32,
						},
						#[codec(index = 3)]
						AtLeastProportion {
							#[codec(compact)]
							nom: ::core::primitive::u32,
							#[codec(compact)]
							denom: ::core::primitive::u32,
						},
						#[codec(index = 4)]
						MoreThanProportion {
							#[codec(compact)]
							nom: ::core::primitive::u32,
							#[codec(compact)]
							denom: ::core::primitive::u32,
						},
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum Junction {
						#[codec(index = 0)]
						Parachain(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 1)]
						AccountId32 {
							network:
								::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
							id: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 2)]
						AccountIndex64 {
							network:
								::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
							#[codec(compact)]
							index: ::core::primitive::u64,
						},
						#[codec(index = 3)]
						AccountKey20 {
							network:
								::core::option::Option<runtime_types::xcm::v3::junction::NetworkId>,
							key: [::core::primitive::u8; 20usize],
						},
						#[codec(index = 4)]
						PalletInstance(::core::primitive::u8),
						#[codec(index = 5)]
						GeneralIndex(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 6)]
						GeneralKey {
							length: ::core::primitive::u8,
							data: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 7)]
						OnlyChild,
						#[codec(index = 8)]
						Plurality {
							id: runtime_types::xcm::v3::junction::BodyId,
							part: runtime_types::xcm::v3::junction::BodyPart,
						},
						#[codec(index = 9)]
						GlobalConsensus(runtime_types::xcm::v3::junction::NetworkId),
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum NetworkId {
						#[codec(index = 0)]
						ByGenesis([::core::primitive::u8; 32usize]),
						#[codec(index = 1)]
						ByFork {
							block_number: ::core::primitive::u64,
							block_hash: [::core::primitive::u8; 32usize],
						},
						#[codec(index = 2)]
						Polkadot,
						#[codec(index = 3)]
						Kusama,
						#[codec(index = 4)]
						Westend,
						#[codec(index = 5)]
						Rococo,
						#[codec(index = 6)]
						Wococo,
						#[codec(index = 7)]
						Ethereum {
							#[codec(compact)]
							chain_id: ::core::primitive::u64,
						},
						#[codec(index = 8)]
						BitcoinCore,
						#[codec(index = 9)]
						BitcoinCash,
						#[codec(index = 10)]
						PolkadotBulletin,
					}
				}
				pub mod junctions {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum Junctions {
						#[codec(index = 0)]
						Here,
						#[codec(index = 1)]
						X1(runtime_types::xcm::v3::junction::Junction),
						#[codec(index = 2)]
						X2(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 3)]
						X3(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 4)]
						X4(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 5)]
						X5(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 6)]
						X6(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 7)]
						X7(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
						#[codec(index = 8)]
						X8(
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
							runtime_types::xcm::v3::junction::Junction,
						),
					}
				}
				pub mod multiasset {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum AssetId {
						#[codec(index = 0)]
						Concrete(runtime_types::staging_xcm::v3::multilocation::MultiLocation),
						#[codec(index = 1)]
						Abstract([::core::primitive::u8; 32usize]),
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum AssetInstance {
						#[codec(index = 0)]
						Undefined,
						#[codec(index = 1)]
						Index(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 2)]
						Array4([::core::primitive::u8; 4usize]),
						#[codec(index = 3)]
						Array8([::core::primitive::u8; 8usize]),
						#[codec(index = 4)]
						Array16([::core::primitive::u8; 16usize]),
						#[codec(index = 5)]
						Array32([::core::primitive::u8; 32usize]),
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum Fungibility {
						#[codec(index = 0)]
						Fungible(#[codec(compact)] ::core::primitive::u128),
						#[codec(index = 1)]
						NonFungible(runtime_types::xcm::v3::multiasset::AssetInstance),
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub struct MultiAsset {
						pub id: runtime_types::xcm::v3::multiasset::AssetId,
						pub fun: runtime_types::xcm::v3::multiasset::Fungibility,
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum MultiAssetFilter {
						#[codec(index = 0)]
						Definite(runtime_types::xcm::v3::multiasset::MultiAssets),
						#[codec(index = 1)]
						Wild(runtime_types::xcm::v3::multiasset::WildMultiAsset),
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub struct MultiAssets(
						pub  ::subxt::ext::subxt_core::alloc::vec::Vec<
							runtime_types::xcm::v3::multiasset::MultiAsset,
						>,
					);
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum WildFungibility {
						#[codec(index = 0)]
						Fungible,
						#[codec(index = 1)]
						NonFungible,
					}
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum WildMultiAsset {
						#[codec(index = 0)]
						All,
						#[codec(index = 1)]
						AllOf {
							id: runtime_types::xcm::v3::multiasset::AssetId,
							fun: runtime_types::xcm::v3::multiasset::WildFungibility,
						},
						#[codec(index = 2)]
						AllCounted(#[codec(compact)] ::core::primitive::u32),
						#[codec(index = 3)]
						AllOfCounted {
							id: runtime_types::xcm::v3::multiasset::AssetId,
							fun: runtime_types::xcm::v3::multiasset::WildFungibility,
							#[codec(compact)]
							count: ::core::primitive::u32,
						},
					}
				}
				pub mod traits {
					use super::runtime_types;
					#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
					pub enum Error {
						#[codec(index = 0)]
						Overflow,
						#[codec(index = 1)]
						Unimplemented,
						#[codec(index = 2)]
						UntrustedReserveLocation,
						#[codec(index = 3)]
						UntrustedTeleportLocation,
						#[codec(index = 4)]
						LocationFull,
						#[codec(index = 5)]
						LocationNotInvertible,
						#[codec(index = 6)]
						BadOrigin,
						#[codec(index = 7)]
						InvalidLocation,
						#[codec(index = 8)]
						AssetNotFound,
						#[codec(index = 9)]
						FailedToTransactAsset,
						#[codec(index = 10)]
						NotWithdrawable,
						#[codec(index = 11)]
						LocationCannotHold,
						#[codec(index = 12)]
						ExceedsMaxMessageSize,
						#[codec(index = 13)]
						DestinationUnsupported,
						#[codec(index = 14)]
						Transport,
						#[codec(index = 15)]
						Unroutable,
						#[codec(index = 16)]
						UnknownClaim,
						#[codec(index = 17)]
						FailedToDecode,
						#[codec(index = 18)]
						MaxWeightInvalid,
						#[codec(index = 19)]
						NotHoldingFees,
						#[codec(index = 20)]
						TooExpensive,
						#[codec(index = 21)]
						Trap(::core::primitive::u64),
						#[codec(index = 22)]
						ExpectationFalse,
						#[codec(index = 23)]
						PalletNotFound,
						#[codec(index = 24)]
						NameMismatch,
						#[codec(index = 25)]
						VersionIncompatible,
						#[codec(index = 26)]
						HoldingWouldOverflow,
						#[codec(index = 27)]
						ExportError,
						#[codec(index = 28)]
						ReanchorFailed,
						#[codec(index = 29)]
						NoDeal,
						#[codec(index = 30)]
						FeesNotMet,
						#[codec(index = 31)]
						LockError,
						#[codec(index = 32)]
						NoPermission,
						#[codec(index = 33)]
						Unanchored,
						#[codec(index = 34)]
						NotDepositable,
						#[codec(index = 35)]
						UnhandledXcmVersion,
						#[codec(index = 36)]
						WeightLimitReached(::sp_weights::Weight),
						#[codec(index = 37)]
						Barrier,
						#[codec(index = 38)]
						WeightNotComputable,
						#[codec(index = 39)]
						ExceedsStackLimit,
					}
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Instruction {
					#[codec(index = 0)]
					WithdrawAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 1)]
					ReserveAssetDeposited(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 2)]
					ReceiveTeleportedAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 3)]
					QueryResponse {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						response: runtime_types::xcm::v3::Response,
						max_weight: ::sp_weights::Weight,
						querier: ::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
					#[codec(index = 4)]
					TransferAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssets,
						beneficiary: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 5)]
					TransferReserveAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssets,
						dest: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 6)]
					Transact {
						origin_kind: runtime_types::xcm::v3::OriginKind,
						require_weight_at_most: ::sp_weights::Weight,
						call: runtime_types::xcm::double_encoded::DoubleEncoded,
					},
					#[codec(index = 7)]
					HrmpNewChannelOpenRequest {
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						max_message_size: ::core::primitive::u32,
						#[codec(compact)]
						max_capacity: ::core::primitive::u32,
					},
					#[codec(index = 8)]
					HrmpChannelAccepted {
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 9)]
					HrmpChannelClosing {
						#[codec(compact)]
						initiator: ::core::primitive::u32,
						#[codec(compact)]
						sender: ::core::primitive::u32,
						#[codec(compact)]
						recipient: ::core::primitive::u32,
					},
					#[codec(index = 10)]
					ClearOrigin,
					#[codec(index = 11)]
					DescendOrigin(runtime_types::xcm::v3::junctions::Junctions),
					#[codec(index = 12)]
					ReportError(runtime_types::xcm::v3::QueryResponseInfo),
					#[codec(index = 13)]
					DepositAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						beneficiary: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 14)]
					DepositReserveAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						dest: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 15)]
					ExchangeAsset {
						give: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						want: runtime_types::xcm::v3::multiasset::MultiAssets,
						maximal: ::core::primitive::bool,
					},
					#[codec(index = 16)]
					InitiateReserveWithdraw {
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						reserve: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 17)]
					InitiateTeleport {
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
						dest: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 18)]
					ReportHolding {
						response_info: runtime_types::xcm::v3::QueryResponseInfo,
						assets: runtime_types::xcm::v3::multiasset::MultiAssetFilter,
					},
					#[codec(index = 19)]
					BuyExecution {
						fees: runtime_types::xcm::v3::multiasset::MultiAsset,
						weight_limit: runtime_types::xcm::v3::WeightLimit,
					},
					#[codec(index = 20)]
					RefundSurplus,
					#[codec(index = 21)]
					SetErrorHandler(runtime_types::xcm::v3::Xcm),
					#[codec(index = 22)]
					SetAppendix(runtime_types::xcm::v3::Xcm),
					#[codec(index = 23)]
					ClearError,
					#[codec(index = 24)]
					ClaimAsset {
						assets: runtime_types::xcm::v3::multiasset::MultiAssets,
						ticket: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 25)]
					Trap(#[codec(compact)] ::core::primitive::u64),
					#[codec(index = 26)]
					SubscribeVersion {
						#[codec(compact)]
						query_id: ::core::primitive::u64,
						max_response_weight: ::sp_weights::Weight,
					},
					#[codec(index = 27)]
					UnsubscribeVersion,
					#[codec(index = 28)]
					BurnAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 29)]
					ExpectAsset(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 30)]
					ExpectOrigin(
						::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					),
					#[codec(index = 31)]
					ExpectError(
						::core::option::Option<(
							::core::primitive::u32,
							runtime_types::xcm::v3::traits::Error,
						)>,
					),
					#[codec(index = 32)]
					ExpectTransactStatus(runtime_types::xcm::v3::MaybeErrorCode),
					#[codec(index = 33)]
					QueryPallet {
						module_name:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						response_info: runtime_types::xcm::v3::QueryResponseInfo,
					},
					#[codec(index = 34)]
					ExpectPallet {
						#[codec(compact)]
						index: ::core::primitive::u32,
						name: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						module_name:
							::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
						#[codec(compact)]
						crate_major: ::core::primitive::u32,
						#[codec(compact)]
						min_crate_minor: ::core::primitive::u32,
					},
					#[codec(index = 35)]
					ReportTransactStatus(runtime_types::xcm::v3::QueryResponseInfo),
					#[codec(index = 36)]
					ClearTransactStatus,
					#[codec(index = 37)]
					UniversalOrigin(runtime_types::xcm::v3::junction::Junction),
					#[codec(index = 38)]
					ExportMessage {
						network: runtime_types::xcm::v3::junction::NetworkId,
						destination: runtime_types::xcm::v3::junctions::Junctions,
						xcm: runtime_types::xcm::v3::Xcm,
					},
					#[codec(index = 39)]
					LockAsset {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						unlocker: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 40)]
					UnlockAsset {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						target: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 41)]
					NoteUnlockable {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						owner: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 42)]
					RequestUnlock {
						asset: runtime_types::xcm::v3::multiasset::MultiAsset,
						locker: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					},
					#[codec(index = 43)]
					SetFeesMode { jit_withdraw: ::core::primitive::bool },
					#[codec(index = 44)]
					SetTopic([::core::primitive::u8; 32usize]),
					#[codec(index = 45)]
					ClearTopic,
					#[codec(index = 46)]
					AliasOrigin(runtime_types::staging_xcm::v3::multilocation::MultiLocation),
					#[codec(index = 47)]
					UnpaidExecution {
						weight_limit: runtime_types::xcm::v3::WeightLimit,
						check_origin: ::core::option::Option<
							runtime_types::staging_xcm::v3::multilocation::MultiLocation,
						>,
					},
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum MaybeErrorCode {
					#[codec(index = 0)]
					Success,
					#[codec(index = 1)]
					Error(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					),
					#[codec(index = 2)]
					TruncatedError(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							::core::primitive::u8,
						>,
					),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum OriginKind {
					#[codec(index = 0)]
					Native,
					#[codec(index = 1)]
					SovereignAccount,
					#[codec(index = 2)]
					Superuser,
					#[codec(index = 3)]
					Xcm,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct PalletInfo {
					#[codec(compact)]
					pub index: ::core::primitive::u32,
					pub name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					pub module_name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					#[codec(compact)]
					pub major: ::core::primitive::u32,
					#[codec(compact)]
					pub minor: ::core::primitive::u32,
					#[codec(compact)]
					pub patch: ::core::primitive::u32,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct QueryResponseInfo {
					pub destination: runtime_types::staging_xcm::v3::multilocation::MultiLocation,
					#[codec(compact)]
					pub query_id: ::core::primitive::u64,
					pub max_weight: ::sp_weights::Weight,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Response {
					#[codec(index = 0)]
					Null,
					#[codec(index = 1)]
					Assets(runtime_types::xcm::v3::multiasset::MultiAssets),
					#[codec(index = 2)]
					ExecutionResult(
						::core::option::Option<(
							::core::primitive::u32,
							runtime_types::xcm::v3::traits::Error,
						)>,
					),
					#[codec(index = 3)]
					Version(::core::primitive::u32),
					#[codec(index = 4)]
					PalletsInfo(
						runtime_types::bounded_collections::bounded_vec::BoundedVec<
							runtime_types::xcm::v3::PalletInfo,
						>,
					),
					#[codec(index = 5)]
					DispatchResult(runtime_types::xcm::v3::MaybeErrorCode),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum WeightLimit {
					#[codec(index = 0)]
					Unlimited,
					#[codec(index = 1)]
					Limited(::sp_weights::Weight),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct Xcm(
					pub  ::subxt::ext::subxt_core::alloc::vec::Vec<
						runtime_types::xcm::v3::Instruction,
					>,
				);
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum VersionedAssetId {
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::multiasset::AssetId),
				#[codec(index = 4)]
				V4(runtime_types::staging_xcm::v4::asset::AssetId),
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum VersionedAssets {
				#[codec(index = 1)]
				V2(runtime_types::xcm::v2::multiasset::MultiAssets),
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::multiasset::MultiAssets),
				#[codec(index = 4)]
				V4(runtime_types::staging_xcm::v4::asset::Assets),
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum VersionedInteriorLocation {
				#[codec(index = 2)]
				V2(runtime_types::xcm::v2::multilocation::Junctions),
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::junctions::Junctions),
				#[codec(index = 4)]
				V4(runtime_types::staging_xcm::v4::junctions::Junctions),
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum VersionedLocation {
				#[codec(index = 1)]
				V2(runtime_types::xcm::v2::multilocation::MultiLocation),
				#[codec(index = 3)]
				V3(runtime_types::staging_xcm::v3::multilocation::MultiLocation),
				#[codec(index = 4)]
				V4(runtime_types::staging_xcm::v4::location::Location),
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum VersionedResponse {
				#[codec(index = 2)]
				V2(runtime_types::xcm::v2::Response),
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::Response),
				#[codec(index = 4)]
				V4(runtime_types::staging_xcm::v4::Response),
			}
			#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
			pub enum VersionedXcm {
				#[codec(index = 2)]
				V2(runtime_types::xcm::v2::Xcm),
				#[codec(index = 3)]
				V3(runtime_types::xcm::v3::Xcm),
				#[codec(index = 4)]
				V4(runtime_types::staging_xcm::v4::Xcm),
			}
		}
		pub mod xcm_primitives {
			use super::runtime_types;
			pub mod ethereum_xcm {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum EthereumXcmFee {
					#[codec(index = 0)]
					Manual(runtime_types::xcm_primitives::ethereum_xcm::ManualEthereumXcmFee),
					#[codec(index = 1)]
					Auto,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum EthereumXcmTransaction {
					#[codec(index = 0)]
					V1(runtime_types::xcm_primitives::ethereum_xcm::EthereumXcmTransactionV1),
					#[codec(index = 1)]
					V2(runtime_types::xcm_primitives::ethereum_xcm::EthereumXcmTransactionV2),
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct EthereumXcmTransactionV1 {
					pub gas_limit: runtime_types::primitive_types::U256,
					pub fee_payment: runtime_types::xcm_primitives::ethereum_xcm::EthereumXcmFee,
					pub action: runtime_types::ethereum::transaction::TransactionAction,
					pub value: runtime_types::primitive_types::U256,
					pub input: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					pub access_list: ::core::option::Option<
						::subxt::ext::subxt_core::alloc::vec::Vec<(
							::subxt::ext::subxt_core::utils::H160,
							::subxt::ext::subxt_core::alloc::vec::Vec<
								::subxt::ext::subxt_core::utils::H256,
							>,
						)>,
					>,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct EthereumXcmTransactionV2 {
					pub gas_limit: runtime_types::primitive_types::U256,
					pub action: runtime_types::ethereum::transaction::TransactionAction,
					pub value: runtime_types::primitive_types::U256,
					pub input: runtime_types::bounded_collections::bounded_vec::BoundedVec<
						::core::primitive::u8,
					>,
					pub access_list: ::core::option::Option<
						::subxt::ext::subxt_core::alloc::vec::Vec<(
							::subxt::ext::subxt_core::utils::H160,
							::subxt::ext::subxt_core::alloc::vec::Vec<
								::subxt::ext::subxt_core::utils::H256,
							>,
						)>,
					>,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct ManualEthereumXcmFee {
					pub gas_price: ::core::option::Option<runtime_types::primitive_types::U256>,
					pub max_fee_per_gas:
						::core::option::Option<runtime_types::primitive_types::U256>,
				}
			}
		}
		pub mod xcm_runtime_apis {
			use super::runtime_types;
			pub mod conversions {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					Unsupported,
					#[codec(index = 1)]
					VersionedConversionFailed,
				}
			}
			pub mod dry_run {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct CallDryRunEffects<_0> {
					pub execution_result: ::core::result::Result<
						runtime_types::frame_support::dispatch::PostDispatchInfo,
						runtime_types::sp_runtime::DispatchErrorWithPostInfo<
							runtime_types::frame_support::dispatch::PostDispatchInfo,
						>,
					>,
					pub emitted_events: ::subxt::ext::subxt_core::alloc::vec::Vec<_0>,
					pub local_xcm: ::core::option::Option<runtime_types::xcm::VersionedXcm>,
					pub forwarded_xcms: ::subxt::ext::subxt_core::alloc::vec::Vec<(
						runtime_types::xcm::VersionedLocation,
						::subxt::ext::subxt_core::alloc::vec::Vec<runtime_types::xcm::VersionedXcm>,
					)>,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					Unimplemented,
					#[codec(index = 1)]
					VersionedConversionFailed,
				}
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub struct XcmDryRunEffects<_0> {
					pub execution_result: runtime_types::staging_xcm::v4::traits::Outcome,
					pub emitted_events: ::subxt::ext::subxt_core::alloc::vec::Vec<_0>,
					pub forwarded_xcms: ::subxt::ext::subxt_core::alloc::vec::Vec<(
						runtime_types::xcm::VersionedLocation,
						::subxt::ext::subxt_core::alloc::vec::Vec<runtime_types::xcm::VersionedXcm>,
					)>,
				}
			}
			pub mod fees {
				use super::runtime_types;
				#[derive(::codec::Decode, ::codec::Encode, Clone, Debug, PartialEq)]
				pub enum Error {
					#[codec(index = 0)]
					Unimplemented,
					#[codec(index = 1)]
					VersionedConversionFailed,
					#[codec(index = 2)]
					WeightNotComputable,
					#[codec(index = 3)]
					UnhandledXcmVersion,
					#[codec(index = 4)]
					AssetNotFound,
					#[codec(index = 5)]
					Unroutable,
				}
			}
		}
	}
}
